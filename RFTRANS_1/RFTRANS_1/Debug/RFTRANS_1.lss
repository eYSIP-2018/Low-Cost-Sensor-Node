
RFTRANS_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000101c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800100  00800100  00001090  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005afb  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff1  00000000  00000000  00006f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bc2  00000000  00000000  00007efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab4  00000000  00000000  00009ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001448  00000000  00000000  0000a574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004012  00000000  00000000  0000b9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000f9ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_6>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_14>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	2c 01       	movw	r4, r24

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ec e1       	ldi	r30, 0x1C	; 28
      7e:	f0 e1       	ldi	r31, 0x10	; 16
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a0 30       	cpi	r26, 0x00	; 0
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a0 e0       	ldi	r26, 0x00	; 0
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	ae 31       	cpi	r26, 0x1E	; 30
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 06 08 	call	0x100c	; 0x100c <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
      b6:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <UART_Init>:
		//BODS Disable
		// disable Brounout detection (BOD)
		MCUCR|=(3<<5);
		MCUCR = (MCUCR &~(1<<5)) | (1<<6);
		__asm__ __volatile__("sleep");// executes A sleep instruction
	}
      be:	e1 ec       	ldi	r30, 0xC1	; 193
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	10 82       	st	Z, r1
      c4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      c8:	a2 ec       	ldi	r26, 0xC2	; 194
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	8c 91       	ld	r24, X
      ce:	8e 60       	ori	r24, 0x0E	; 14
      d0:	8c 93       	st	X, r24
      d2:	83 e3       	ldi	r24, 0x33	; 51
      d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      dc:	80 81       	ld	r24, Z
      de:	88 61       	ori	r24, 0x18	; 24
      e0:	80 83       	st	Z, r24
      e2:	08 95       	ret

000000e4 <Set_pin>:
      e4:	61 30       	cpi	r22, 0x01	; 1
      e6:	71 05       	cpc	r23, r1
      e8:	f1 f4       	brne	.+60     	; 0x126 <Set_pin+0x42>
      ea:	88 30       	cpi	r24, 0x08	; 8
      ec:	91 05       	cpc	r25, r1
      ee:	70 f0       	brcs	.+28     	; 0x10c <Set_pin+0x28>
      f0:	44 b1       	in	r20, 0x04	; 4
      f2:	08 97       	sbiw	r24, 0x08	; 8
      f4:	21 e0       	ldi	r18, 0x01	; 1
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	b9 01       	movw	r22, r18
      fa:	02 c0       	rjmp	.+4      	; 0x100 <Set_pin+0x1c>
      fc:	66 0f       	add	r22, r22
      fe:	77 1f       	adc	r23, r23
     100:	8a 95       	dec	r24
     102:	e2 f7       	brpl	.-8      	; 0xfc <Set_pin+0x18>
     104:	cb 01       	movw	r24, r22
     106:	84 2b       	or	r24, r20
     108:	84 b9       	out	0x04, r24	; 4
     10a:	08 95       	ret
     10c:	4a b1       	in	r20, 0x0a	; 10
     10e:	21 e0       	ldi	r18, 0x01	; 1
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	b9 01       	movw	r22, r18
     114:	02 c0       	rjmp	.+4      	; 0x11a <Set_pin+0x36>
     116:	66 0f       	add	r22, r22
     118:	77 1f       	adc	r23, r23
     11a:	8a 95       	dec	r24
     11c:	e2 f7       	brpl	.-8      	; 0x116 <Set_pin+0x32>
     11e:	cb 01       	movw	r24, r22
     120:	84 2b       	or	r24, r20
     122:	8a b9       	out	0x0a, r24	; 10
     124:	08 95       	ret
     126:	08 97       	sbiw	r24, 0x08	; 8
     128:	18 f0       	brcs	.+6      	; 0x130 <Set_pin+0x4c>
     12a:	84 b1       	in	r24, 0x04	; 4
     12c:	84 b9       	out	0x04, r24	; 4
     12e:	08 95       	ret
     130:	8a b1       	in	r24, 0x0a	; 10
     132:	8a b9       	out	0x0a, r24	; 10
     134:	08 95       	ret

00000136 <Write_Digital>:
     136:	66 23       	and	r22, r22
     138:	f1 f0       	breq	.+60     	; 0x176 <Write_Digital+0x40>
     13a:	88 30       	cpi	r24, 0x08	; 8
     13c:	91 05       	cpc	r25, r1
     13e:	70 f0       	brcs	.+28     	; 0x15c <Write_Digital+0x26>
     140:	45 b1       	in	r20, 0x05	; 5
     142:	08 97       	sbiw	r24, 0x08	; 8
     144:	21 e0       	ldi	r18, 0x01	; 1
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	b9 01       	movw	r22, r18
     14a:	02 c0       	rjmp	.+4      	; 0x150 <Write_Digital+0x1a>
     14c:	66 0f       	add	r22, r22
     14e:	77 1f       	adc	r23, r23
     150:	8a 95       	dec	r24
     152:	e2 f7       	brpl	.-8      	; 0x14c <Write_Digital+0x16>
     154:	cb 01       	movw	r24, r22
     156:	84 2b       	or	r24, r20
     158:	85 b9       	out	0x05, r24	; 5
     15a:	08 95       	ret
     15c:	4b b1       	in	r20, 0x0b	; 11
     15e:	21 e0       	ldi	r18, 0x01	; 1
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	b9 01       	movw	r22, r18
     164:	02 c0       	rjmp	.+4      	; 0x16a <Write_Digital+0x34>
     166:	66 0f       	add	r22, r22
     168:	77 1f       	adc	r23, r23
     16a:	8a 95       	dec	r24
     16c:	e2 f7       	brpl	.-8      	; 0x166 <Write_Digital+0x30>
     16e:	cb 01       	movw	r24, r22
     170:	84 2b       	or	r24, r20
     172:	8b b9       	out	0x0b, r24	; 11
     174:	08 95       	ret
     176:	88 30       	cpi	r24, 0x08	; 8
     178:	91 05       	cpc	r25, r1
     17a:	78 f0       	brcs	.+30     	; 0x19a <Write_Digital+0x64>
     17c:	45 b1       	in	r20, 0x05	; 5
     17e:	08 97       	sbiw	r24, 0x08	; 8
     180:	21 e0       	ldi	r18, 0x01	; 1
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	b9 01       	movw	r22, r18
     186:	02 c0       	rjmp	.+4      	; 0x18c <Write_Digital+0x56>
     188:	66 0f       	add	r22, r22
     18a:	77 1f       	adc	r23, r23
     18c:	8a 95       	dec	r24
     18e:	e2 f7       	brpl	.-8      	; 0x188 <Write_Digital+0x52>
     190:	cb 01       	movw	r24, r22
     192:	80 95       	com	r24
     194:	84 23       	and	r24, r20
     196:	85 b9       	out	0x05, r24	; 5
     198:	08 95       	ret
     19a:	4b b1       	in	r20, 0x0b	; 11
     19c:	21 e0       	ldi	r18, 0x01	; 1
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	b9 01       	movw	r22, r18
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <Write_Digital+0x72>
     1a4:	66 0f       	add	r22, r22
     1a6:	77 1f       	adc	r23, r23
     1a8:	8a 95       	dec	r24
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <Write_Digital+0x6e>
     1ac:	cb 01       	movw	r24, r22
     1ae:	80 95       	com	r24
     1b0:	84 23       	and	r24, r20
     1b2:	8b b9       	out	0x0b, r24	; 11
     1b4:	08 95       	ret

000001b6 <__vector_14>:
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	8f 93       	push	r24
     1c2:	9f 93       	push	r25
     1c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     1c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
     1d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
     1d6:	9f 91       	pop	r25
     1d8:	8f 91       	pop	r24
     1da:	0f 90       	pop	r0
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	0f 90       	pop	r0
     1e0:	1f 90       	pop	r1
     1e2:	18 95       	reti

000001e4 <__vector_6>:
}
////   ISR For WATCHDOG TIMER
ISR(WDT_vect)
     1e4:	1f 92       	push	r1
     1e6:	0f 92       	push	r0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
{
	
     1ee:	0f 90       	pop	r0
     1f0:	0f be       	out	0x3f, r0	; 63
     1f2:	0f 90       	pop	r0
     1f4:	1f 90       	pop	r1
     1f6:	18 95       	reti

000001f8 <main>:
/// function to collect data from sensor user can add data depending on number of sensors
void getdata()
{
	data[0] = 250;//battery voltage
	data[1] = 25;//temp value from temp sensor
	data[2] = 76;//humidity value from DHTsensor
     1f8:	60 e8       	ldi	r22, 0x80	; 128
     1fa:	75 e2       	ldi	r23, 0x25	; 37
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_Init>
     204:	86 e0       	ldi	r24, 0x06	; 6
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN4RF245beginEv>
     20c:	02 ee       	ldi	r16, 0xE2	; 226
     20e:	10 ef       	ldi	r17, 0xF0	; 240
     210:	20 ef       	ldi	r18, 0xF0	; 240
     212:	30 ef       	ldi	r19, 0xF0	; 240
     214:	40 ef       	ldi	r20, 0xF0	; 240
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	86 e0       	ldi	r24, 0x06	; 6
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN4RF2415openWritingPipeEy>
     224:	62 e0       	ldi	r22, 0x02	; 2
     226:	86 e0       	ldi	r24, 0x06	; 6
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     22e:	86 e0       	ldi	r24, 0x06	; 6
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	0e 94 04 03 	call	0x608	; 0x608 <_ZN4RF2413stopListeningEv>
     236:	c8 ec       	ldi	r28, 0xC8	; 200
     238:	d0 e0       	ldi	r29, 0x00	; 0
     23a:	44 e0       	ldi	r20, 0x04	; 4
     23c:	62 e0       	ldi	r22, 0x02	; 2
     23e:	71 e0       	ldi	r23, 0x01	; 1
     240:	86 e0       	ldi	r24, 0x06	; 6
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN4RF245writeEPKvh>
     248:	80 e2       	ldi	r24, 0x20	; 32
     24a:	9e e4       	ldi	r25, 0x4E	; 78
     24c:	fe 01       	movw	r30, r28
     24e:	31 97       	sbiw	r30, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <main+0x56>
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	91 f3       	breq	.-28     	; 0x23a <main+0x42>
     256:	fa cf       	rjmp	.-12     	; 0x24c <main+0x54>

00000258 <_GLOBAL__sub_I_radio>:
 * Author : sachin mahadevjadhav
 */ 
#include <avr/io.h>
#include "RF24.h"
void getdata();
RF24 radio(9, 10); // CE, CSN
     258:	4a e0       	ldi	r20, 0x0A	; 10
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	69 e0       	ldi	r22, 0x09	; 9
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	86 e0       	ldi	r24, 0x06	; 6
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_ZN4RF24C1Ejj>
     268:	08 95       	ret

0000026a <_ZN4RF243csnEb>:


  write_register( RF_SETUP, setup |= level ) ;	// Write it to the chip
}

/****************************************************************************/
     26a:	4f 92       	push	r4
     26c:	5f 92       	push	r5
     26e:	6f 92       	push	r6
     270:	7f 92       	push	r7
     272:	8f 92       	push	r8
     274:	9f 92       	push	r9
     276:	af 92       	push	r10
     278:	bf 92       	push	r11
     27a:	cf 92       	push	r12
     27c:	df 92       	push	r13
     27e:	ef 92       	push	r14
     280:	ff 92       	push	r15
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	ec 01       	movw	r28, r24
     28a:	8a 81       	ldd	r24, Y+2	; 0x02
     28c:	9b 81       	ldd	r25, Y+3	; 0x03
     28e:	0e 94 9b 00 	call	0x136	; 0x136 <Write_Digital>
     292:	6c 89       	ldd	r22, Y+20	; 0x14
     294:	7d 89       	ldd	r23, Y+21	; 0x15
     296:	8e 89       	ldd	r24, Y+22	; 0x16
     298:	9f 89       	ldd	r25, Y+23	; 0x17
     29a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__floatunsisf>
     29e:	6b 01       	movw	r12, r22
     2a0:	7c 01       	movw	r14, r24
     2a2:	2b ea       	ldi	r18, 0xAB	; 171
     2a4:	3a ea       	ldi	r19, 0xAA	; 170
     2a6:	4a e2       	ldi	r20, 0x2A	; 42
     2a8:	50 e4       	ldi	r21, 0x40	; 64
     2aa:	0e 94 99 07 	call	0xf32	; 0xf32 <__mulsf3>
     2ae:	4b 01       	movw	r8, r22
     2b0:	5c 01       	movw	r10, r24
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	40 e8       	ldi	r20, 0x80	; 128
     2b8:	5f e3       	ldi	r21, 0x3F	; 63
     2ba:	0e 94 3c 06 	call	0xc78	; 0xc78 <__cmpsf2>
     2be:	88 23       	and	r24, r24
     2c0:	0c f4       	brge	.+2      	; 0x2c4 <_ZN4RF243csnEb+0x5a>
     2c2:	6e c0       	rjmp	.+220    	; 0x3a0 <_ZN4RF243csnEb+0x136>
     2c4:	a7 01       	movw	r20, r14
     2c6:	96 01       	movw	r18, r12
     2c8:	c7 01       	movw	r24, r14
     2ca:	b6 01       	movw	r22, r12
     2cc:	0e 94 d0 05 	call	0xba0	; 0xba0 <__addsf3>
     2d0:	2b 01       	movw	r4, r22
     2d2:	3c 01       	movw	r6, r24
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	3f ef       	ldi	r19, 0xFF	; 255
     2d8:	4f e7       	ldi	r20, 0x7F	; 127
     2da:	57 e4       	ldi	r21, 0x47	; 71
     2dc:	0e 94 94 07 	call	0xf28	; 0xf28 <__gesf2>
     2e0:	18 16       	cp	r1, r24
     2e2:	0c f0       	brlt	.+2      	; 0x2e6 <_ZN4RF243csnEb+0x7c>
     2e4:	45 c0       	rjmp	.+138    	; 0x370 <_ZN4RF243csnEb+0x106>
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	4a e7       	ldi	r20, 0x7A	; 122
     2ec:	54 e4       	ldi	r21, 0x44	; 68
     2ee:	c7 01       	movw	r24, r14
     2f0:	b6 01       	movw	r22, r12
     2f2:	0e 94 41 06 	call	0xc82	; 0xc82 <__divsf3>
     2f6:	4b 01       	movw	r8, r22
     2f8:	5c 01       	movw	r10, r24
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	4a ef       	ldi	r20, 0xFA	; 250
     300:	54 e4       	ldi	r21, 0x44	; 68
     302:	0e 94 99 07 	call	0xf32	; 0xf32 <__mulsf3>
     306:	6b 01       	movw	r12, r22
     308:	7c 01       	movw	r14, r24
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e8       	ldi	r20, 0x80	; 128
     310:	5f e3       	ldi	r21, 0x3F	; 63
     312:	0e 94 3c 06 	call	0xc78	; 0xc78 <__cmpsf2>
     316:	88 23       	and	r24, r24
     318:	2c f1       	brlt	.+74     	; 0x364 <_ZN4RF243csnEb+0xfa>
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	3f ef       	ldi	r19, 0xFF	; 255
     31e:	4f e7       	ldi	r20, 0x7F	; 127
     320:	57 e4       	ldi	r21, 0x47	; 71
     322:	c7 01       	movw	r24, r14
     324:	b6 01       	movw	r22, r12
     326:	0e 94 94 07 	call	0xf28	; 0xf28 <__gesf2>
     32a:	18 16       	cp	r1, r24
     32c:	b4 f4       	brge	.+44     	; 0x35a <_ZN4RF243csnEb+0xf0>
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e2       	ldi	r20, 0x20	; 32
     334:	51 e4       	ldi	r21, 0x41	; 65
     336:	c5 01       	movw	r24, r10
     338:	b4 01       	movw	r22, r8
     33a:	0e 94 99 07 	call	0xf32	; 0xf32 <__mulsf3>
     33e:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fixunssfsi>
     342:	61 15       	cp	r22, r1
     344:	71 05       	cpc	r23, r1
     346:	69 f1       	breq	.+90     	; 0x3a2 <_ZN4RF243csnEb+0x138>
     348:	28 ec       	ldi	r18, 0xC8	; 200
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	c9 01       	movw	r24, r18
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <_ZN4RF243csnEb+0xe4>
     352:	61 50       	subi	r22, 0x01	; 1
     354:	71 09       	sbc	r23, r1
     356:	d1 f7       	brne	.-12     	; 0x34c <_ZN4RF243csnEb+0xe2>
     358:	24 c0       	rjmp	.+72     	; 0x3a2 <_ZN4RF243csnEb+0x138>
     35a:	c7 01       	movw	r24, r14
     35c:	b6 01       	movw	r22, r12
     35e:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fixunssfsi>
     362:	02 c0       	rjmp	.+4      	; 0x368 <_ZN4RF243csnEb+0xfe>
     364:	61 e0       	ldi	r22, 0x01	; 1
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	cb 01       	movw	r24, r22
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <_ZN4RF243csnEb+0x100>
     36e:	19 c0       	rjmp	.+50     	; 0x3a2 <_ZN4RF243csnEb+0x138>
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	4f e7       	ldi	r20, 0x7F	; 127
     376:	53 e4       	ldi	r21, 0x43	; 67
     378:	c5 01       	movw	r24, r10
     37a:	b4 01       	movw	r22, r8
     37c:	0e 94 94 07 	call	0xf28	; 0xf28 <__gesf2>
     380:	18 16       	cp	r1, r24
     382:	44 f4       	brge	.+16     	; 0x394 <_ZN4RF243csnEb+0x12a>
     384:	c3 01       	movw	r24, r6
     386:	b2 01       	movw	r22, r4
     388:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fixunssfsi>
     38c:	cb 01       	movw	r24, r22
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <_ZN4RF243csnEb+0x124>
     392:	0a c0       	rjmp	.+20     	; 0x3a8 <_ZN4RF243csnEb+0x13e>
     394:	c5 01       	movw	r24, r10
     396:	b4 01       	movw	r22, r8
     398:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fixunssfsi>
     39c:	16 2f       	mov	r17, r22
     39e:	01 c0       	rjmp	.+2      	; 0x3a2 <_ZN4RF243csnEb+0x138>
     3a0:	11 e0       	ldi	r17, 0x01	; 1
     3a2:	61 2f       	mov	r22, r17
     3a4:	6a 95       	dec	r22
     3a6:	f1 f7       	brne	.-4      	; 0x3a4 <_ZN4RF243csnEb+0x13a>
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	df 90       	pop	r13
     3b4:	cf 90       	pop	r12
     3b6:	bf 90       	pop	r11
     3b8:	af 90       	pop	r10
     3ba:	9f 90       	pop	r9
     3bc:	8f 90       	pop	r8
     3be:	7f 90       	pop	r7
     3c0:	6f 90       	pop	r6
     3c2:	5f 90       	pop	r5
     3c4:	4f 90       	pop	r4
     3c6:	08 95       	ret

000003c8 <_ZN4RF242ceEb>:
     3c8:	fc 01       	movw	r30, r24
     3ca:	80 81       	ld	r24, Z
     3cc:	91 81       	ldd	r25, Z+1	; 0x01
     3ce:	22 81       	ldd	r18, Z+2	; 0x02
     3d0:	33 81       	ldd	r19, Z+3	; 0x03
     3d2:	82 17       	cp	r24, r18
     3d4:	93 07       	cpc	r25, r19
     3d6:	11 f0       	breq	.+4      	; 0x3dc <_ZN4RF242ceEb+0x14>
     3d8:	0e 94 9b 00 	call	0x136	; 0x136 <Write_Digital>
     3dc:	84 e0       	ldi	r24, 0x04	; 4
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <_ZN4RF242ceEb+0x18>
     3e4:	08 95       	ret

000003e6 <_ZN4RF2413read_registerEh>:
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	cf 93       	push	r28
     3ec:	8c 01       	movw	r16, r24
     3ee:	c6 2f       	mov	r28, r22
     3f0:	80 e5       	ldi	r24, 0x50	; 80
     3f2:	8c bd       	out	0x2c, r24	; 44
     3f4:	1d bc       	out	0x2d, r1	; 45
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	c8 01       	movw	r24, r16
     3fa:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN4RF243csnEb>
     3fe:	cf 71       	andi	r28, 0x1F	; 31
     400:	ce bd       	out	0x2e, r28	; 46
     402:	00 00       	nop
     404:	0d b4       	in	r0, 0x2d	; 45
     406:	07 fe       	sbrs	r0, 7
     408:	fd cf       	rjmp	.-6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     40a:	8e b5       	in	r24, 0x2e	; 46
     40c:	8f ef       	ldi	r24, 0xFF	; 255
     40e:	8e bd       	out	0x2e, r24	; 46
     410:	00 00       	nop
     412:	0d b4       	in	r0, 0x2d	; 45
     414:	07 fe       	sbrs	r0, 7
     416:	fd cf       	rjmp	.-6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     418:	ce b5       	in	r28, 0x2e	; 46
     41a:	61 e0       	ldi	r22, 0x01	; 1
     41c:	c8 01       	movw	r24, r16
     41e:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN4RF243csnEb>
     422:	8c 2f       	mov	r24, r28
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	08 95       	ret

0000042c <_ZN4RF2414write_registerEhPKhh>:
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	8c 01       	movw	r16, r24
     43a:	c6 2f       	mov	r28, r22
     43c:	e4 2e       	mov	r14, r20
     43e:	f5 2e       	mov	r15, r21
     440:	d2 2f       	mov	r29, r18
     442:	80 e5       	ldi	r24, 0x50	; 80
     444:	8c bd       	out	0x2c, r24	; 44
     446:	1d bc       	out	0x2d, r1	; 45
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	c8 01       	movw	r24, r16
     44c:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN4RF243csnEb>
     450:	cf 71       	andi	r28, 0x1F	; 31
     452:	c0 62       	ori	r28, 0x20	; 32
     454:	ce bd       	out	0x2e, r28	; 46
     456:	00 00       	nop
     458:	0d b4       	in	r0, 0x2d	; 45
     45a:	07 fe       	sbrs	r0, 7
     45c:	fd cf       	rjmp	.-6      	; 0x458 <_ZN4RF2414write_registerEhPKhh+0x2c>
     45e:	ce b5       	in	r28, 0x2e	; 46
     460:	8f ef       	ldi	r24, 0xFF	; 255
     462:	8d 0f       	add	r24, r29
     464:	dd 23       	and	r29, r29
     466:	59 f0       	breq	.+22     	; 0x47e <_ZN4RF2414write_registerEhPKhh+0x52>
     468:	ee 2d       	mov	r30, r14
     46a:	ff 2d       	mov	r31, r15
     46c:	91 91       	ld	r25, Z+
     46e:	9e bd       	out	0x2e, r25	; 46
     470:	00 00       	nop
     472:	0d b4       	in	r0, 0x2d	; 45
     474:	07 fe       	sbrs	r0, 7
     476:	fd cf       	rjmp	.-6      	; 0x472 <_ZN4RF2414write_registerEhPKhh+0x46>
     478:	9e b5       	in	r25, 0x2e	; 46
     47a:	81 50       	subi	r24, 0x01	; 1
     47c:	b8 f7       	brcc	.-18     	; 0x46c <_ZN4RF2414write_registerEhPKhh+0x40>
     47e:	61 e0       	ldi	r22, 0x01	; 1
     480:	c8 01       	movw	r24, r16
     482:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN4RF243csnEb>
     486:	8c 2f       	mov	r24, r28
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	08 95       	ret

00000496 <_ZN4RF2414write_registerEhh>:
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	8c 01       	movw	r16, r24
     4a0:	c6 2f       	mov	r28, r22
     4a2:	d4 2f       	mov	r29, r20
     4a4:	80 e5       	ldi	r24, 0x50	; 80
     4a6:	8c bd       	out	0x2c, r24	; 44
     4a8:	1d bc       	out	0x2d, r1	; 45
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	c8 01       	movw	r24, r16
     4ae:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN4RF243csnEb>
     4b2:	cf 71       	andi	r28, 0x1F	; 31
     4b4:	c0 62       	ori	r28, 0x20	; 32
     4b6:	ce bd       	out	0x2e, r28	; 46
     4b8:	00 00       	nop
     4ba:	0d b4       	in	r0, 0x2d	; 45
     4bc:	07 fe       	sbrs	r0, 7
     4be:	fd cf       	rjmp	.-6      	; 0x4ba <_ZN4RF2414write_registerEhh+0x24>
     4c0:	ce b5       	in	r28, 0x2e	; 46
     4c2:	de bd       	out	0x2e, r29	; 46
     4c4:	00 00       	nop
     4c6:	0d b4       	in	r0, 0x2d	; 45
     4c8:	07 fe       	sbrs	r0, 7
     4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <_ZN4RF2414write_registerEhh+0x30>
     4cc:	8e b5       	in	r24, 0x2e	; 46
     4ce:	61 e0       	ldi	r22, 0x01	; 1
     4d0:	c8 01       	movw	r24, r16
     4d2:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN4RF243csnEb>
     4d6:	8c 2f       	mov	r24, r28
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	08 95       	ret

000004e2 <_ZN4RF2413write_payloadEPKvhh>:
     4e2:	df 92       	push	r13
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	ec 01       	movw	r28, r24
     4f2:	d6 2e       	mov	r13, r22
     4f4:	e7 2e       	mov	r14, r23
     4f6:	f2 2e       	mov	r15, r18
     4f8:	8f 81       	ldd	r24, Y+7	; 0x07
     4fa:	08 2f       	mov	r16, r24
     4fc:	48 17       	cp	r20, r24
     4fe:	08 f4       	brcc	.+2      	; 0x502 <_ZN4RF2413write_payloadEPKvhh+0x20>
     500:	04 2f       	mov	r16, r20
     502:	98 85       	ldd	r25, Y+8	; 0x08
     504:	91 11       	cpse	r25, r1
     506:	03 c0       	rjmp	.+6      	; 0x50e <_ZN4RF2413write_payloadEPKvhh+0x2c>
     508:	18 2f       	mov	r17, r24
     50a:	10 1b       	sub	r17, r16
     50c:	01 c0       	rjmp	.+2      	; 0x510 <_ZN4RF2413write_payloadEPKvhh+0x2e>
     50e:	10 e0       	ldi	r17, 0x00	; 0
     510:	80 e5       	ldi	r24, 0x50	; 80
     512:	8c bd       	out	0x2c, r24	; 44
     514:	1d bc       	out	0x2d, r1	; 45
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	ce 01       	movw	r24, r28
     51a:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN4RF243csnEb>
     51e:	fe bc       	out	0x2e, r15	; 46
     520:	00 00       	nop
     522:	0d b4       	in	r0, 0x2d	; 45
     524:	07 fe       	sbrs	r0, 7
     526:	fd cf       	rjmp	.-6      	; 0x522 <_ZN4RF2413write_payloadEPKvhh+0x40>
     528:	fe b4       	in	r15, 0x2e	; 46
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	80 0f       	add	r24, r16
     52e:	01 11       	cpse	r16, r1
     530:	05 c0       	rjmp	.+10     	; 0x53c <_ZN4RF2413write_payloadEPKvhh+0x5a>
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	81 0f       	add	r24, r17
     536:	11 11       	cpse	r17, r1
     538:	0d c0       	rjmp	.+26     	; 0x554 <_ZN4RF2413write_payloadEPKvhh+0x72>
     53a:	14 c0       	rjmp	.+40     	; 0x564 <_ZN4RF2413write_payloadEPKvhh+0x82>
     53c:	ed 2d       	mov	r30, r13
     53e:	fe 2d       	mov	r31, r14
     540:	91 91       	ld	r25, Z+
     542:	9e bd       	out	0x2e, r25	; 46
     544:	00 00       	nop
     546:	0d b4       	in	r0, 0x2d	; 45
     548:	07 fe       	sbrs	r0, 7
     54a:	fd cf       	rjmp	.-6      	; 0x546 <_ZN4RF2413write_payloadEPKvhh+0x64>
     54c:	9e b5       	in	r25, 0x2e	; 46
     54e:	81 50       	subi	r24, 0x01	; 1
     550:	b8 f7       	brcc	.-18     	; 0x540 <_ZN4RF2413write_payloadEPKvhh+0x5e>
     552:	ef cf       	rjmp	.-34     	; 0x532 <_ZN4RF2413write_payloadEPKvhh+0x50>
     554:	1e bc       	out	0x2e, r1	; 46
     556:	00 00       	nop
     558:	0d b4       	in	r0, 0x2d	; 45
     55a:	07 fe       	sbrs	r0, 7
     55c:	fd cf       	rjmp	.-6      	; 0x558 <_ZN4RF2413write_payloadEPKvhh+0x76>
     55e:	9e b5       	in	r25, 0x2e	; 46
     560:	81 50       	subi	r24, 0x01	; 1
     562:	c0 f7       	brcc	.-16     	; 0x554 <_ZN4RF2413write_payloadEPKvhh+0x72>
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	ce 01       	movw	r24, r28
     568:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN4RF243csnEb>
     56c:	8f 2d       	mov	r24, r15
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	df 90       	pop	r13
     57c:	08 95       	ret

0000057e <_ZN4RF248spiTransEh>:
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	ec 01       	movw	r28, r24
     586:	16 2f       	mov	r17, r22
     588:	80 e5       	ldi	r24, 0x50	; 80
     58a:	8c bd       	out	0x2c, r24	; 44
     58c:	1d bc       	out	0x2d, r1	; 45
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	ce 01       	movw	r24, r28
     592:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN4RF243csnEb>
     596:	1e bd       	out	0x2e, r17	; 46
     598:	00 00       	nop
     59a:	0d b4       	in	r0, 0x2d	; 45
     59c:	07 fe       	sbrs	r0, 7
     59e:	fd cf       	rjmp	.-6      	; 0x59a <_ZN4RF248spiTransEh+0x1c>
     5a0:	1e b5       	in	r17, 0x2e	; 46
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	ce 01       	movw	r24, r28
     5a6:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN4RF243csnEb>
     5aa:	81 2f       	mov	r24, r17
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	08 95       	ret

000005b4 <_ZN4RF248flush_rxEv>:
     5b4:	62 ee       	ldi	r22, 0xE2	; 226
     5b6:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN4RF248spiTransEh>
     5ba:	08 95       	ret

000005bc <_ZN4RF248flush_txEv>:
     5bc:	61 ee       	ldi	r22, 0xE1	; 225
     5be:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN4RF248spiTransEh>
     5c2:	08 95       	ret

000005c4 <_ZN4RF2410get_statusEv>:
     5c4:	6f ef       	ldi	r22, 0xFF	; 255
     5c6:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN4RF248spiTransEh>
     5ca:	08 95       	ret

000005cc <_ZN4RF24C1Ejj>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	71 83       	std	Z+1, r23	; 0x01
     5d0:	60 83       	st	Z, r22
     5d2:	53 83       	std	Z+3, r21	; 0x03
     5d4:	42 83       	std	Z+2, r20	; 0x02
     5d6:	16 82       	std	Z+6, r1	; 0x06
     5d8:	80 e2       	ldi	r24, 0x20	; 32
     5da:	87 83       	std	Z+7, r24	; 0x07
     5dc:	10 86       	std	Z+8, r1	; 0x08
     5de:	85 e0       	ldi	r24, 0x05	; 5
     5e0:	86 87       	std	Z+14, r24	; 0x0e
     5e2:	85 e0       	ldi	r24, 0x05	; 5
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	a0 e0       	ldi	r26, 0x00	; 0
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	84 8b       	std	Z+20, r24	; 0x14
     5ec:	95 8b       	std	Z+21, r25	; 0x15
     5ee:	a6 8b       	std	Z+22, r26	; 0x16
     5f0:	b7 8b       	std	Z+23, r27	; 0x17
     5f2:	11 86       	std	Z+9, r1	; 0x09
     5f4:	08 95       	ret

000005f6 <_ZN4RF2410setChannelEh>:
     5f6:	6d 37       	cpi	r22, 0x7D	; 125
     5f8:	10 f4       	brcc	.+4      	; 0x5fe <_ZN4RF2410setChannelEh+0x8>
     5fa:	46 2f       	mov	r20, r22
     5fc:	01 c0       	rjmp	.+2      	; 0x600 <_ZN4RF2410setChannelEh+0xa>
     5fe:	4d e7       	ldi	r20, 0x7D	; 125
     600:	65 e0       	ldi	r22, 0x05	; 5
     602:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4RF2414write_registerEhh>
     606:	08 95       	ret

00000608 <_ZN4RF2413stopListeningEv>:
     608:	4f 92       	push	r4
     60a:	5f 92       	push	r5
     60c:	6f 92       	push	r6
     60e:	7f 92       	push	r7
     610:	8f 92       	push	r8
     612:	9f 92       	push	r9
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	ec 01       	movw	r28, r24
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN4RF242ceEb>
     630:	68 89       	ldd	r22, Y+16	; 0x10
     632:	79 89       	ldd	r23, Y+17	; 0x11
     634:	8a 89       	ldd	r24, Y+18	; 0x12
     636:	9b 89       	ldd	r25, Y+19	; 0x13
     638:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__floatunsisf>
     63c:	6b 01       	movw	r12, r22
     63e:	7c 01       	movw	r14, r24
     640:	2b ea       	ldi	r18, 0xAB	; 171
     642:	3a ea       	ldi	r19, 0xAA	; 170
     644:	4a e2       	ldi	r20, 0x2A	; 42
     646:	50 e4       	ldi	r21, 0x40	; 64
     648:	0e 94 99 07 	call	0xf32	; 0xf32 <__mulsf3>
     64c:	4b 01       	movw	r8, r22
     64e:	5c 01       	movw	r10, r24
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e8       	ldi	r20, 0x80	; 128
     656:	5f e3       	ldi	r21, 0x3F	; 63
     658:	0e 94 3c 06 	call	0xc78	; 0xc78 <__cmpsf2>
     65c:	88 23       	and	r24, r24
     65e:	0c f4       	brge	.+2      	; 0x662 <_ZN4RF2413stopListeningEv+0x5a>
     660:	6e c0       	rjmp	.+220    	; 0x73e <_ZN4RF2413stopListeningEv+0x136>
     662:	a7 01       	movw	r20, r14
     664:	96 01       	movw	r18, r12
     666:	c7 01       	movw	r24, r14
     668:	b6 01       	movw	r22, r12
     66a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__addsf3>
     66e:	2b 01       	movw	r4, r22
     670:	3c 01       	movw	r6, r24
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	3f ef       	ldi	r19, 0xFF	; 255
     676:	4f e7       	ldi	r20, 0x7F	; 127
     678:	57 e4       	ldi	r21, 0x47	; 71
     67a:	0e 94 94 07 	call	0xf28	; 0xf28 <__gesf2>
     67e:	18 16       	cp	r1, r24
     680:	0c f0       	brlt	.+2      	; 0x684 <_ZN4RF2413stopListeningEv+0x7c>
     682:	45 c0       	rjmp	.+138    	; 0x70e <_ZN4RF2413stopListeningEv+0x106>
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	4a e7       	ldi	r20, 0x7A	; 122
     68a:	54 e4       	ldi	r21, 0x44	; 68
     68c:	c7 01       	movw	r24, r14
     68e:	b6 01       	movw	r22, r12
     690:	0e 94 41 06 	call	0xc82	; 0xc82 <__divsf3>
     694:	4b 01       	movw	r8, r22
     696:	5c 01       	movw	r10, r24
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	4a ef       	ldi	r20, 0xFA	; 250
     69e:	54 e4       	ldi	r21, 0x44	; 68
     6a0:	0e 94 99 07 	call	0xf32	; 0xf32 <__mulsf3>
     6a4:	6b 01       	movw	r12, r22
     6a6:	7c 01       	movw	r14, r24
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e8       	ldi	r20, 0x80	; 128
     6ae:	5f e3       	ldi	r21, 0x3F	; 63
     6b0:	0e 94 3c 06 	call	0xc78	; 0xc78 <__cmpsf2>
     6b4:	88 23       	and	r24, r24
     6b6:	2c f1       	brlt	.+74     	; 0x702 <_ZN4RF2413stopListeningEv+0xfa>
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	3f ef       	ldi	r19, 0xFF	; 255
     6bc:	4f e7       	ldi	r20, 0x7F	; 127
     6be:	57 e4       	ldi	r21, 0x47	; 71
     6c0:	c7 01       	movw	r24, r14
     6c2:	b6 01       	movw	r22, r12
     6c4:	0e 94 94 07 	call	0xf28	; 0xf28 <__gesf2>
     6c8:	18 16       	cp	r1, r24
     6ca:	b4 f4       	brge	.+44     	; 0x6f8 <_ZN4RF2413stopListeningEv+0xf0>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e2       	ldi	r20, 0x20	; 32
     6d2:	51 e4       	ldi	r21, 0x41	; 65
     6d4:	c5 01       	movw	r24, r10
     6d6:	b4 01       	movw	r22, r8
     6d8:	0e 94 99 07 	call	0xf32	; 0xf32 <__mulsf3>
     6dc:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fixunssfsi>
     6e0:	61 15       	cp	r22, r1
     6e2:	71 05       	cpc	r23, r1
     6e4:	69 f1       	breq	.+90     	; 0x740 <_ZN4RF2413stopListeningEv+0x138>
     6e6:	28 ec       	ldi	r18, 0xC8	; 200
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	c9 01       	movw	r24, r18
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <_ZN4RF2413stopListeningEv+0xe4>
     6f0:	61 50       	subi	r22, 0x01	; 1
     6f2:	71 09       	sbc	r23, r1
     6f4:	d1 f7       	brne	.-12     	; 0x6ea <_ZN4RF2413stopListeningEv+0xe2>
     6f6:	24 c0       	rjmp	.+72     	; 0x740 <_ZN4RF2413stopListeningEv+0x138>
     6f8:	c7 01       	movw	r24, r14
     6fa:	b6 01       	movw	r22, r12
     6fc:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fixunssfsi>
     700:	02 c0       	rjmp	.+4      	; 0x706 <_ZN4RF2413stopListeningEv+0xfe>
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	cb 01       	movw	r24, r22
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <_ZN4RF2413stopListeningEv+0x100>
     70c:	19 c0       	rjmp	.+50     	; 0x740 <_ZN4RF2413stopListeningEv+0x138>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	4f e7       	ldi	r20, 0x7F	; 127
     714:	53 e4       	ldi	r21, 0x43	; 67
     716:	c5 01       	movw	r24, r10
     718:	b4 01       	movw	r22, r8
     71a:	0e 94 94 07 	call	0xf28	; 0xf28 <__gesf2>
     71e:	18 16       	cp	r1, r24
     720:	44 f4       	brge	.+16     	; 0x732 <_ZN4RF2413stopListeningEv+0x12a>
     722:	c3 01       	movw	r24, r6
     724:	b2 01       	movw	r22, r4
     726:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fixunssfsi>
     72a:	cb 01       	movw	r24, r22
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <_ZN4RF2413stopListeningEv+0x124>
     730:	09 c0       	rjmp	.+18     	; 0x744 <_ZN4RF2413stopListeningEv+0x13c>
     732:	c5 01       	movw	r24, r10
     734:	b4 01       	movw	r22, r8
     736:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fixunssfsi>
     73a:	16 2f       	mov	r17, r22
     73c:	01 c0       	rjmp	.+2      	; 0x740 <_ZN4RF2413stopListeningEv+0x138>
     73e:	11 e0       	ldi	r17, 0x01	; 1
     740:	1a 95       	dec	r17
     742:	f1 f7       	brne	.-4      	; 0x740 <_ZN4RF2413stopListeningEv+0x138>
     744:	6d e1       	ldi	r22, 0x1D	; 29
     746:	ce 01       	movw	r24, r28
     748:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN4RF2413read_registerEh>
     74c:	81 ff       	sbrs	r24, 1
     74e:	8d c0       	rjmp	.+282    	; 0x86a <_ZN4RF2413stopListeningEv+0x262>
     750:	68 89       	ldd	r22, Y+16	; 0x10
     752:	79 89       	ldd	r23, Y+17	; 0x11
     754:	8a 89       	ldd	r24, Y+18	; 0x12
     756:	9b 89       	ldd	r25, Y+19	; 0x13
     758:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__floatunsisf>
     75c:	6b 01       	movw	r12, r22
     75e:	7c 01       	movw	r14, r24
     760:	2b ea       	ldi	r18, 0xAB	; 171
     762:	3a ea       	ldi	r19, 0xAA	; 170
     764:	4a e2       	ldi	r20, 0x2A	; 42
     766:	50 e4       	ldi	r21, 0x40	; 64
     768:	0e 94 99 07 	call	0xf32	; 0xf32 <__mulsf3>
     76c:	4b 01       	movw	r8, r22
     76e:	5c 01       	movw	r10, r24
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	40 e8       	ldi	r20, 0x80	; 128
     776:	5f e3       	ldi	r21, 0x3F	; 63
     778:	0e 94 3c 06 	call	0xc78	; 0xc78 <__cmpsf2>
     77c:	88 23       	and	r24, r24
     77e:	0c f4       	brge	.+2      	; 0x782 <_ZN4RF2413stopListeningEv+0x17a>
     780:	6e c0       	rjmp	.+220    	; 0x85e <_ZN4RF2413stopListeningEv+0x256>
     782:	a7 01       	movw	r20, r14
     784:	96 01       	movw	r18, r12
     786:	c7 01       	movw	r24, r14
     788:	b6 01       	movw	r22, r12
     78a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__addsf3>
     78e:	2b 01       	movw	r4, r22
     790:	3c 01       	movw	r6, r24
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	3f ef       	ldi	r19, 0xFF	; 255
     796:	4f e7       	ldi	r20, 0x7F	; 127
     798:	57 e4       	ldi	r21, 0x47	; 71
     79a:	0e 94 94 07 	call	0xf28	; 0xf28 <__gesf2>
     79e:	18 16       	cp	r1, r24
     7a0:	0c f0       	brlt	.+2      	; 0x7a4 <_ZN4RF2413stopListeningEv+0x19c>
     7a2:	45 c0       	rjmp	.+138    	; 0x82e <_ZN4RF2413stopListeningEv+0x226>
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	4a e7       	ldi	r20, 0x7A	; 122
     7aa:	54 e4       	ldi	r21, 0x44	; 68
     7ac:	c7 01       	movw	r24, r14
     7ae:	b6 01       	movw	r22, r12
     7b0:	0e 94 41 06 	call	0xc82	; 0xc82 <__divsf3>
     7b4:	4b 01       	movw	r8, r22
     7b6:	5c 01       	movw	r10, r24
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	4a ef       	ldi	r20, 0xFA	; 250
     7be:	54 e4       	ldi	r21, 0x44	; 68
     7c0:	0e 94 99 07 	call	0xf32	; 0xf32 <__mulsf3>
     7c4:	6b 01       	movw	r12, r22
     7c6:	7c 01       	movw	r14, r24
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	40 e8       	ldi	r20, 0x80	; 128
     7ce:	5f e3       	ldi	r21, 0x3F	; 63
     7d0:	0e 94 3c 06 	call	0xc78	; 0xc78 <__cmpsf2>
     7d4:	88 23       	and	r24, r24
     7d6:	2c f1       	brlt	.+74     	; 0x822 <_ZN4RF2413stopListeningEv+0x21a>
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f e7       	ldi	r20, 0x7F	; 127
     7de:	57 e4       	ldi	r21, 0x47	; 71
     7e0:	c7 01       	movw	r24, r14
     7e2:	b6 01       	movw	r22, r12
     7e4:	0e 94 94 07 	call	0xf28	; 0xf28 <__gesf2>
     7e8:	18 16       	cp	r1, r24
     7ea:	b4 f4       	brge	.+44     	; 0x818 <_ZN4RF2413stopListeningEv+0x210>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e2       	ldi	r20, 0x20	; 32
     7f2:	51 e4       	ldi	r21, 0x41	; 65
     7f4:	c5 01       	movw	r24, r10
     7f6:	b4 01       	movw	r22, r8
     7f8:	0e 94 99 07 	call	0xf32	; 0xf32 <__mulsf3>
     7fc:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fixunssfsi>
     800:	61 15       	cp	r22, r1
     802:	71 05       	cpc	r23, r1
     804:	69 f1       	breq	.+90     	; 0x860 <_ZN4RF2413stopListeningEv+0x258>
     806:	28 ec       	ldi	r18, 0xC8	; 200
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	c9 01       	movw	r24, r18
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <_ZN4RF2413stopListeningEv+0x204>
     810:	61 50       	subi	r22, 0x01	; 1
     812:	71 09       	sbc	r23, r1
     814:	d1 f7       	brne	.-12     	; 0x80a <_ZN4RF2413stopListeningEv+0x202>
     816:	24 c0       	rjmp	.+72     	; 0x860 <_ZN4RF2413stopListeningEv+0x258>
     818:	c7 01       	movw	r24, r14
     81a:	b6 01       	movw	r22, r12
     81c:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fixunssfsi>
     820:	02 c0       	rjmp	.+4      	; 0x826 <_ZN4RF2413stopListeningEv+0x21e>
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	cb 01       	movw	r24, r22
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <_ZN4RF2413stopListeningEv+0x220>
     82c:	19 c0       	rjmp	.+50     	; 0x860 <_ZN4RF2413stopListeningEv+0x258>
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	4f e7       	ldi	r20, 0x7F	; 127
     834:	53 e4       	ldi	r21, 0x43	; 67
     836:	c5 01       	movw	r24, r10
     838:	b4 01       	movw	r22, r8
     83a:	0e 94 94 07 	call	0xf28	; 0xf28 <__gesf2>
     83e:	18 16       	cp	r1, r24
     840:	44 f4       	brge	.+16     	; 0x852 <_ZN4RF2413stopListeningEv+0x24a>
     842:	c3 01       	movw	r24, r6
     844:	b2 01       	movw	r22, r4
     846:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fixunssfsi>
     84a:	cb 01       	movw	r24, r22
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <_ZN4RF2413stopListeningEv+0x244>
     850:	09 c0       	rjmp	.+18     	; 0x864 <_ZN4RF2413stopListeningEv+0x25c>
     852:	c5 01       	movw	r24, r10
     854:	b4 01       	movw	r22, r8
     856:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fixunssfsi>
     85a:	06 2f       	mov	r16, r22
     85c:	01 c0       	rjmp	.+2      	; 0x860 <_ZN4RF2413stopListeningEv+0x258>
     85e:	01 e0       	ldi	r16, 0x01	; 1
     860:	0a 95       	dec	r16
     862:	f1 f7       	brne	.-4      	; 0x860 <_ZN4RF2413stopListeningEv+0x258>
     864:	ce 01       	movw	r24, r28
     866:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN4RF248flush_txEv>
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	ce 01       	movw	r24, r28
     86e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN4RF2413read_registerEh>
     872:	48 2f       	mov	r20, r24
     874:	4e 7f       	andi	r20, 0xFE	; 254
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	ce 01       	movw	r24, r28
     87a:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4RF2414write_registerEhh>
     87e:	62 e0       	ldi	r22, 0x02	; 2
     880:	ce 01       	movw	r24, r28
     882:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN4RF2413read_registerEh>
     886:	48 2f       	mov	r20, r24
     888:	41 60       	ori	r20, 0x01	; 1
     88a:	62 e0       	ldi	r22, 0x02	; 2
     88c:	ce 01       	movw	r24, r28
     88e:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4RF2414write_registerEhh>
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	bf 90       	pop	r11
     8a4:	af 90       	pop	r10
     8a6:	9f 90       	pop	r9
     8a8:	8f 90       	pop	r8
     8aa:	7f 90       	pop	r7
     8ac:	6f 90       	pop	r6
     8ae:	5f 90       	pop	r5
     8b0:	4f 90       	pop	r4
     8b2:	08 95       	ret

000008b4 <_ZN4RF247powerUpEv>:
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	ec 01       	movw	r28, r24
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN4RF2413read_registerEh>
     8c0:	81 fd       	sbrc	r24, 1
     8c2:	0a c0       	rjmp	.+20     	; 0x8d8 <_ZN4RF247powerUpEv+0x24>
     8c4:	48 2f       	mov	r20, r24
     8c6:	42 60       	ori	r20, 0x02	; 2
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	ce 01       	movw	r24, r28
     8cc:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4RF2414write_registerEhh>
     8d0:	80 e1       	ldi	r24, 0x10	; 16
     8d2:	97 e2       	ldi	r25, 0x27	; 39
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	f1 f7       	brne	.-4      	; 0x8d4 <_ZN4RF247powerUpEv+0x20>
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <_ZN4RF2414startFastWriteEPKvhbb>:
     8de:	0f 93       	push	r16
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	ec 01       	movw	r28, r24
     8e6:	21 11       	cpse	r18, r1
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <_ZN4RF2414startFastWriteEPKvhbb+0x10>
     8ea:	20 ea       	ldi	r18, 0xA0	; 160
     8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <_ZN4RF2414startFastWriteEPKvhbb+0x12>
     8ee:	20 eb       	ldi	r18, 0xB0	; 176
     8f0:	ce 01       	movw	r24, r28
     8f2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <_ZN4RF2413write_payloadEPKvhh>
     8f6:	00 23       	and	r16, r16
     8f8:	21 f0       	breq	.+8      	; 0x902 <__stack+0x3>
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	ce 01       	movw	r24, r28
     8fe:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN4RF242ceEb>
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	0f 91       	pop	r16
     908:	08 95       	ret

0000090a <_ZN4RF245writeEPKvhb>:
     90a:	0f 93       	push	r16
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	ec 01       	movw	r28, r24
     912:	01 e0       	ldi	r16, 0x01	; 1
     914:	0e 94 6f 04 	call	0x8de	; 0x8de <_ZN4RF2414startFastWriteEPKvhbb>
     918:	ce 01       	movw	r24, r28
     91a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <_ZN4RF2410get_statusEv>
     91e:	80 73       	andi	r24, 0x30	; 48
     920:	d9 f3       	breq	.-10     	; 0x918 <_ZN4RF245writeEPKvhb+0xe>
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	ce 01       	movw	r24, r28
     926:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN4RF242ceEb>
     92a:	40 e7       	ldi	r20, 0x70	; 112
     92c:	67 e0       	ldi	r22, 0x07	; 7
     92e:	ce 01       	movw	r24, r28
     930:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4RF2414write_registerEhh>
     934:	84 ff       	sbrs	r24, 4
     936:	05 c0       	rjmp	.+10     	; 0x942 <_ZN4RF245writeEPKvhb+0x38>
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN4RF248flush_txEv>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	01 c0       	rjmp	.+2      	; 0x944 <_ZN4RF245writeEPKvhb+0x3a>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	0f 91       	pop	r16
     94a:	08 95       	ret

0000094c <_ZN4RF245writeEPKvh>:
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4RF245writeEPKvhb>
     952:	08 95       	ret

00000954 <_ZN4RF2415openWritingPipeEy>:
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	28 97       	sbiw	r28, 0x08	; 8
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
     970:	7c 01       	movw	r14, r24
     972:	09 83       	std	Y+1, r16	; 0x01
     974:	1a 83       	std	Y+2, r17	; 0x02
     976:	2b 83       	std	Y+3, r18	; 0x03
     978:	3c 83       	std	Y+4, r19	; 0x04
     97a:	4d 83       	std	Y+5, r20	; 0x05
     97c:	5e 83       	std	Y+6, r21	; 0x06
     97e:	6f 83       	std	Y+7, r22	; 0x07
     980:	78 87       	std	Y+8, r23	; 0x08
     982:	fc 01       	movw	r30, r24
     984:	26 85       	ldd	r18, Z+14	; 0x0e
     986:	ae 01       	movw	r20, r28
     988:	4f 5f       	subi	r20, 0xFF	; 255
     98a:	5f 4f       	sbci	r21, 0xFF	; 255
     98c:	6a e0       	ldi	r22, 0x0A	; 10
     98e:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN4RF2414write_registerEhPKhh>
     992:	f7 01       	movw	r30, r14
     994:	26 85       	ldd	r18, Z+14	; 0x0e
     996:	ae 01       	movw	r20, r28
     998:	4f 5f       	subi	r20, 0xFF	; 255
     99a:	5f 4f       	sbci	r21, 0xFF	; 255
     99c:	60 e1       	ldi	r22, 0x10	; 16
     99e:	c7 01       	movw	r24, r14
     9a0:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN4RF2414write_registerEhPKhh>
     9a4:	f7 01       	movw	r30, r14
     9a6:	47 81       	ldd	r20, Z+7	; 0x07
     9a8:	61 e1       	ldi	r22, 0x11	; 17
     9aa:	c7 01       	movw	r24, r14
     9ac:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4RF2414write_registerEhh>
     9b0:	28 96       	adiw	r28, 0x08	; 8
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	08 95       	ret

000009ca <_ZN4RF2415toggle_featuresEv>:
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	ec 01       	movw	r28, r24
     9d2:	10 e5       	ldi	r17, 0x50	; 80
     9d4:	1c bd       	out	0x2c, r17	; 44
     9d6:	1d bc       	out	0x2d, r1	; 45
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN4RF243csnEb>
     9de:	1e bd       	out	0x2e, r17	; 46
     9e0:	00 00       	nop
     9e2:	0d b4       	in	r0, 0x2d	; 45
     9e4:	07 fe       	sbrs	r0, 7
     9e6:	fd cf       	rjmp	.-6      	; 0x9e2 <_ZN4RF2415toggle_featuresEv+0x18>
     9e8:	8e b5       	in	r24, 0x2e	; 46
     9ea:	83 e7       	ldi	r24, 0x73	; 115
     9ec:	8e bd       	out	0x2e, r24	; 46
     9ee:	00 00       	nop
     9f0:	0d b4       	in	r0, 0x2d	; 45
     9f2:	07 fe       	sbrs	r0, 7
     9f4:	fd cf       	rjmp	.-6      	; 0x9f0 <_ZN4RF2415toggle_featuresEv+0x26>
     9f6:	8e b5       	in	r24, 0x2e	; 46
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	ce 01       	movw	r24, r28
     9fc:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN4RF243csnEb>
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	08 95       	ret

00000a08 <_ZN4RF2411setDataRateE15rf24_datarate_e>:

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	ec 01       	movw	r28, r24
     a12:	06 2f       	mov	r16, r22
}

     a14:	66 e0       	ldi	r22, 0x06	; 6
     a16:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN4RF2413read_registerEh>
/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
     a1a:	18 2f       	mov	r17, r24
     a1c:	17 7d       	andi	r17, 0xD7	; 215
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
/*  
     a1e:	02 30       	cpi	r16, 0x02	; 2
     a20:	51 f4       	brne	.+20     	; 0xa36 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2e>
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
     a22:	10 62       	ori	r17, 0x20	; 32
  //#endif
  if( speed == RF24_250KBPS )
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
     a24:	8b e9       	ldi	r24, 0x9B	; 155
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	a0 e0       	ldi	r26, 0x00	; 0
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	88 8b       	std	Y+16, r24	; 0x10
     a2e:	99 8b       	std	Y+17, r25	; 0x11
     a30:	aa 8b       	std	Y+18, r26	; 0x12
     a32:	bb 8b       	std	Y+19, r27	; 0x13
     a34:	14 c0       	rjmp	.+40     	; 0xa5e <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
    setup |= _BV( RF_DR_LOW ) ;
 /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=450;
  #else //16Mhz Arduino*/
	txDelay=155;
 // #endif
     a36:	01 30       	cpi	r16, 0x01	; 1
     a38:	49 f0       	breq	.+18     	; 0xa4c <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
bool RF24::setDataRate(rf24_datarate_e speed)
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;

  // HIGH and LOW '00' is 1Mbs - our default
     a3a:	85 e5       	ldi	r24, 0x55	; 85
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	88 8b       	std	Y+16, r24	; 0x10
     a44:	99 8b       	std	Y+17, r25	; 0x11
     a46:	aa 8b       	std	Y+18, r26	; 0x12
     a48:	bb 8b       	std	Y+19, r27	; 0x13
     a4a:	09 c0       	rjmp	.+18     	; 0xa5e <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
    txDelay=450;
  #else //16Mhz Arduino*/
	txDelay=155;
 // #endif
  }
  else
     a4c:	18 60       	ori	r17, 0x08	; 8
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     a4e:	81 e4       	ldi	r24, 0x41	; 65
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	88 8b       	std	Y+16, r24	; 0x10
     a58:	99 8b       	std	Y+17, r25	; 0x11
     a5a:	aa 8b       	std	Y+18, r26	; 0x12
     a5c:	bb 8b       	std	Y+19, r27	; 0x13
    {
      setup |= _BV(RF_DR_HIGH);
     /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txDelay=190;
     a5e:	41 2f       	mov	r20, r17
     a60:	66 e0       	ldi	r22, 0x06	; 6
     a62:	ce 01       	movw	r24, r28
     a64:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4RF2414write_registerEhh>
      #else //16Mhz Arduino	*/  
	 txDelay=65;
	  //#endif
     a68:	66 e0       	ldi	r22, 0x06	; 6
     a6a:	ce 01       	movw	r24, r28
     a6c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN4RF2413read_registerEh>
    }
  }
  write_register(RF_SETUP,setup);

     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	18 13       	cpse	r17, r24
     a74:	90 e0       	ldi	r25, 0x00	; 0
  // Verify our result
     a76:	89 2f       	mov	r24, r25
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	08 95       	ret

00000a82 <_ZN4RF245beginEv>:
/****************************************************************************/

bool RF24::begin(void)
{
  uint8_t setup=0;

     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	ec 01       	movw	r28, r24
    if (ce_pin != csn_pin) Set_pin(ce_pin,OUT);  
        Set_pin(csn_pin,OUT);
    _SPI.begin();
     a8a:	88 81       	ld	r24, Y
     a8c:	99 81       	ldd	r25, Y+1	; 0x01
     a8e:	2a 81       	ldd	r18, Y+2	; 0x02
     a90:	3b 81       	ldd	r19, Y+3	; 0x03
     a92:	82 17       	cp	r24, r18
     a94:	93 07       	cpc	r25, r19
     a96:	21 f0       	breq	.+8      	; 0xaa0 <_ZN4RF245beginEv+0x1e>
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
    ce(low);
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	8a 81       	ldd	r24, Y+2	; 0x02
     aa6:	9b 81       	ldd	r25, Y+3	; 0x03
     aa8:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
  	csn(high);
     aac:	0e 94 b6 05 	call	0xb6c	; 0xb6c <_ZN8SPIClass5beginEv>
  	
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	ce 01       	movw	r24, r28
     ab4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN4RF242ceEb>
  // Must allow the radio time to settle else configuration bits will not necessarily stick.
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	ce 01       	movw	r24, r28
     abc:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN4RF243csnEb>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     ac0:	80 e1       	ldi	r24, 0x10	; 16
     ac2:	97 e2       	ldi	r25, 0x27	; 39
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <_ZN4RF245beginEv+0x42>
  _delay_ms(5) ;

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;

  // Set 1500uS (minimum for 32B payload in ESB@250KBPS) timeouts, to make testing a little easier
     ac8:	4c e0       	ldi	r20, 0x0C	; 12
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	ce 01       	movw	r24, r28
     ace:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4RF2414write_registerEhh>
/****************************************************************************/

void RF24::disableCRC( void )
{
  uint8_t disable = read_register(NRF_CONFIG) & ~_BV(EN_CRC) ;
  write_register( NRF_CONFIG, disable ) ;
     ad2:	4f e5       	ldi	r20, 0x5F	; 95
     ad4:	64 e0       	ldi	r22, 0x04	; 4
     ad6:	ce 01       	movw	r24, r28
     ad8:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4RF2414write_registerEhh>

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
  {
    p_variant = true ;
     adc:	62 e0       	ldi	r22, 0x02	; 2
     ade:	ce 01       	movw	r24, r28
     ae0:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     ae4:	88 23       	and	r24, r24
     ae6:	11 f0       	breq	.+4      	; 0xaec <_ZN4RF245beginEv+0x6a>
  }
  setup = read_register(RF_SETUP);
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	8e 83       	std	Y+6, r24	; 0x06
 if( setup == 0b00001110 )     // register default for nRF24L01P
  {
     aec:	66 e0       	ldi	r22, 0x06	; 6
     aee:	ce 01       	movw	r24, r28
     af0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN4RF2413read_registerEh>
     af4:	18 2f       	mov	r17, r24
    p_variant = true ;
     af6:	8e 30       	cpi	r24, 0x0E	; 14
     af8:	11 f4       	brne	.+4      	; 0xafe <_ZN4RF245beginEv+0x7c>
  }
  
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	8e 83       	std	Y+6, r24	; 0x06
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;

  // Initialize CRC and request 2-byte (16bit) CRC
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	ce 01       	movw	r24, r28
     b02:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN4RF2411setDataRateE15rf24_datarate_e>
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
  write_register(FEATURE,0 );
  write_register(DYNPD,0);
     b06:	ce 01       	movw	r24, r28
     b08:	0e 94 e5 04 	call	0x9ca	; 0x9ca <_ZN4RF2415toggle_featuresEv>
  dynamic_payloads_enabled = false;
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	6d e1       	ldi	r22, 0x1D	; 29
     b10:	ce 01       	movw	r24, r28
     b12:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4RF2414write_registerEhh>

     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	6c e1       	ldi	r22, 0x1C	; 28
     b1a:	ce 01       	movw	r24, r28
     b1c:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4RF2414write_registerEhh>
  // Reset current status
     b20:	18 86       	std	Y+8, r1	; 0x08
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );

  // Set up default configuration.  Callers can always change it later.
     b22:	40 e7       	ldi	r20, 0x70	; 112
     b24:	67 e0       	ldi	r22, 0x07	; 7
     b26:	ce 01       	movw	r24, r28
     b28:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4RF2414write_registerEhh>
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);

  // Flush buffers
     b2c:	6c e4       	ldi	r22, 0x4C	; 76
     b2e:	ce 01       	movw	r24, r28
     b30:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_ZN4RF2410setChannelEh>
  flush_rx();
  flush_tx();

     b34:	ce 01       	movw	r24, r28
     b36:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN4RF248flush_rxEv>
  powerUp(); //Power up by default when begin() is called
     b3a:	ce 01       	movw	r24, r28
     b3c:	0e 94 de 02 	call	0x5bc	; 0x5bc <_ZN4RF248flush_txEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
     b40:	ce 01       	movw	r24, r28
     b42:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN4RF247powerUpEv>
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );

  // if setup is 0 or ff then there was no response from module
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	ce 01       	movw	r24, r28
     b4a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN4RF2413read_registerEh>
     b4e:	48 2f       	mov	r20, r24
     b50:	4e 7f       	andi	r20, 0xFE	; 254
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	ce 01       	movw	r24, r28
     b56:	0e 94 4b 02 	call	0x496	; 0x496 <_ZN4RF2414write_registerEhh>
  return ( setup != 0 && setup != 0xff );
}

     b5a:	11 50       	subi	r17, 0x01	; 1
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	1e 3f       	cpi	r17, 0xFE	; 254
     b60:	08 f0       	brcs	.+2      	; 0xb64 <_ZN4RF245beginEv+0xe2>
     b62:	80 e0       	ldi	r24, 0x00	; 0
/****************************************************************************/
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	08 95       	ret

00000b6c <_ZN8SPIClass5beginEv>:
void SPIClass::begin()
{
 //  cli();//noInterrupts(); // Protect from a scheduler and prevent transactionBegin
 
    
    Set_pin(SS, OUT);
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	8a e0       	ldi	r24, 0x0A	; 10
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUT.
    SPCR |= _BV(MSTR);
     b78:	8c b5       	in	r24, 0x2c	; 44
     b7a:	80 61       	ori	r24, 0x10	; 16
     b7c:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     b7e:	8c b5       	in	r24, 0x2c	; 44
     b80:	80 64       	ori	r24, 0x40	; 64
     b82:	8c bd       	out	0x2c, r24	; 44
    // Set direction register for SCK and MOSI pin.
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    Set_pin(SCK, OUT);
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	8d e0       	ldi	r24, 0x0D	; 13
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
    Set_pin(MOSI, OUT);
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	8b e0       	ldi	r24, 0x0B	; 11
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
     b9c:	08 95       	ret

00000b9e <__subsf3>:
     b9e:	50 58       	subi	r21, 0x80	; 128

00000ba0 <__addsf3>:
     ba0:	bb 27       	eor	r27, r27
     ba2:	aa 27       	eor	r26, r26
     ba4:	0e 94 e7 05 	call	0xbce	; 0xbce <__addsf3x>
     ba8:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_round>
     bac:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fp_pscA>
     bb0:	38 f0       	brcs	.+14     	; 0xbc0 <__addsf3+0x20>
     bb2:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_pscB>
     bb6:	20 f0       	brcs	.+8      	; 0xbc0 <__addsf3+0x20>
     bb8:	39 f4       	brne	.+14     	; 0xbc8 <__addsf3+0x28>
     bba:	9f 3f       	cpi	r25, 0xFF	; 255
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <__addsf3+0x24>
     bbe:	26 f4       	brtc	.+8      	; 0xbc8 <__addsf3+0x28>
     bc0:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_nan>
     bc4:	0e f4       	brtc	.+2      	; 0xbc8 <__addsf3+0x28>
     bc6:	e0 95       	com	r30
     bc8:	e7 fb       	bst	r30, 7
     bca:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_inf>

00000bce <__addsf3x>:
     bce:	e9 2f       	mov	r30, r25
     bd0:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fp_split3>
     bd4:	58 f3       	brcs	.-42     	; 0xbac <__addsf3+0xc>
     bd6:	ba 17       	cp	r27, r26
     bd8:	62 07       	cpc	r22, r18
     bda:	73 07       	cpc	r23, r19
     bdc:	84 07       	cpc	r24, r20
     bde:	95 07       	cpc	r25, r21
     be0:	20 f0       	brcs	.+8      	; 0xbea <__addsf3x+0x1c>
     be2:	79 f4       	brne	.+30     	; 0xc02 <__addsf3x+0x34>
     be4:	a6 f5       	brtc	.+104    	; 0xc4e <__addsf3x+0x80>
     be6:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_zero>
     bea:	0e f4       	brtc	.+2      	; 0xbee <__addsf3x+0x20>
     bec:	e0 95       	com	r30
     bee:	0b 2e       	mov	r0, r27
     bf0:	ba 2f       	mov	r27, r26
     bf2:	a0 2d       	mov	r26, r0
     bf4:	0b 01       	movw	r0, r22
     bf6:	b9 01       	movw	r22, r18
     bf8:	90 01       	movw	r18, r0
     bfa:	0c 01       	movw	r0, r24
     bfc:	ca 01       	movw	r24, r20
     bfe:	a0 01       	movw	r20, r0
     c00:	11 24       	eor	r1, r1
     c02:	ff 27       	eor	r31, r31
     c04:	59 1b       	sub	r21, r25
     c06:	99 f0       	breq	.+38     	; 0xc2e <__addsf3x+0x60>
     c08:	59 3f       	cpi	r21, 0xF9	; 249
     c0a:	50 f4       	brcc	.+20     	; 0xc20 <__addsf3x+0x52>
     c0c:	50 3e       	cpi	r21, 0xE0	; 224
     c0e:	68 f1       	brcs	.+90     	; 0xc6a <__addsf3x+0x9c>
     c10:	1a 16       	cp	r1, r26
     c12:	f0 40       	sbci	r31, 0x00	; 0
     c14:	a2 2f       	mov	r26, r18
     c16:	23 2f       	mov	r18, r19
     c18:	34 2f       	mov	r19, r20
     c1a:	44 27       	eor	r20, r20
     c1c:	58 5f       	subi	r21, 0xF8	; 248
     c1e:	f3 cf       	rjmp	.-26     	; 0xc06 <__addsf3x+0x38>
     c20:	46 95       	lsr	r20
     c22:	37 95       	ror	r19
     c24:	27 95       	ror	r18
     c26:	a7 95       	ror	r26
     c28:	f0 40       	sbci	r31, 0x00	; 0
     c2a:	53 95       	inc	r21
     c2c:	c9 f7       	brne	.-14     	; 0xc20 <__addsf3x+0x52>
     c2e:	7e f4       	brtc	.+30     	; 0xc4e <__addsf3x+0x80>
     c30:	1f 16       	cp	r1, r31
     c32:	ba 0b       	sbc	r27, r26
     c34:	62 0b       	sbc	r22, r18
     c36:	73 0b       	sbc	r23, r19
     c38:	84 0b       	sbc	r24, r20
     c3a:	ba f0       	brmi	.+46     	; 0xc6a <__addsf3x+0x9c>
     c3c:	91 50       	subi	r25, 0x01	; 1
     c3e:	a1 f0       	breq	.+40     	; 0xc68 <__addsf3x+0x9a>
     c40:	ff 0f       	add	r31, r31
     c42:	bb 1f       	adc	r27, r27
     c44:	66 1f       	adc	r22, r22
     c46:	77 1f       	adc	r23, r23
     c48:	88 1f       	adc	r24, r24
     c4a:	c2 f7       	brpl	.-16     	; 0xc3c <__addsf3x+0x6e>
     c4c:	0e c0       	rjmp	.+28     	; 0xc6a <__addsf3x+0x9c>
     c4e:	ba 0f       	add	r27, r26
     c50:	62 1f       	adc	r22, r18
     c52:	73 1f       	adc	r23, r19
     c54:	84 1f       	adc	r24, r20
     c56:	48 f4       	brcc	.+18     	; 0xc6a <__addsf3x+0x9c>
     c58:	87 95       	ror	r24
     c5a:	77 95       	ror	r23
     c5c:	67 95       	ror	r22
     c5e:	b7 95       	ror	r27
     c60:	f7 95       	ror	r31
     c62:	9e 3f       	cpi	r25, 0xFE	; 254
     c64:	08 f0       	brcs	.+2      	; 0xc68 <__addsf3x+0x9a>
     c66:	b0 cf       	rjmp	.-160    	; 0xbc8 <__addsf3+0x28>
     c68:	93 95       	inc	r25
     c6a:	88 0f       	add	r24, r24
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <__addsf3x+0xa2>
     c6e:	99 27       	eor	r25, r25
     c70:	ee 0f       	add	r30, r30
     c72:	97 95       	ror	r25
     c74:	87 95       	ror	r24
     c76:	08 95       	ret

00000c78 <__cmpsf2>:
     c78:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_cmp>
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <__cmpsf2+0x8>
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	08 95       	ret

00000c82 <__divsf3>:
     c82:	0e 94 55 06 	call	0xcaa	; 0xcaa <__divsf3x>
     c86:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_round>
     c8a:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_pscB>
     c8e:	58 f0       	brcs	.+22     	; 0xca6 <__divsf3+0x24>
     c90:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fp_pscA>
     c94:	40 f0       	brcs	.+16     	; 0xca6 <__divsf3+0x24>
     c96:	29 f4       	brne	.+10     	; 0xca2 <__divsf3+0x20>
     c98:	5f 3f       	cpi	r21, 0xFF	; 255
     c9a:	29 f0       	breq	.+10     	; 0xca6 <__divsf3+0x24>
     c9c:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_inf>
     ca0:	51 11       	cpse	r21, r1
     ca2:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_szero>
     ca6:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_nan>

00000caa <__divsf3x>:
     caa:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fp_split3>
     cae:	68 f3       	brcs	.-38     	; 0xc8a <__divsf3+0x8>

00000cb0 <__divsf3_pse>:
     cb0:	99 23       	and	r25, r25
     cb2:	b1 f3       	breq	.-20     	; 0xca0 <__divsf3+0x1e>
     cb4:	55 23       	and	r21, r21
     cb6:	91 f3       	breq	.-28     	; 0xc9c <__divsf3+0x1a>
     cb8:	95 1b       	sub	r25, r21
     cba:	55 0b       	sbc	r21, r21
     cbc:	bb 27       	eor	r27, r27
     cbe:	aa 27       	eor	r26, r26
     cc0:	62 17       	cp	r22, r18
     cc2:	73 07       	cpc	r23, r19
     cc4:	84 07       	cpc	r24, r20
     cc6:	38 f0       	brcs	.+14     	; 0xcd6 <__divsf3_pse+0x26>
     cc8:	9f 5f       	subi	r25, 0xFF	; 255
     cca:	5f 4f       	sbci	r21, 0xFF	; 255
     ccc:	22 0f       	add	r18, r18
     cce:	33 1f       	adc	r19, r19
     cd0:	44 1f       	adc	r20, r20
     cd2:	aa 1f       	adc	r26, r26
     cd4:	a9 f3       	breq	.-22     	; 0xcc0 <__divsf3_pse+0x10>
     cd6:	35 d0       	rcall	.+106    	; 0xd42 <__divsf3_pse+0x92>
     cd8:	0e 2e       	mov	r0, r30
     cda:	3a f0       	brmi	.+14     	; 0xcea <__divsf3_pse+0x3a>
     cdc:	e0 e8       	ldi	r30, 0x80	; 128
     cde:	32 d0       	rcall	.+100    	; 0xd44 <__divsf3_pse+0x94>
     ce0:	91 50       	subi	r25, 0x01	; 1
     ce2:	50 40       	sbci	r21, 0x00	; 0
     ce4:	e6 95       	lsr	r30
     ce6:	00 1c       	adc	r0, r0
     ce8:	ca f7       	brpl	.-14     	; 0xcdc <__divsf3_pse+0x2c>
     cea:	2b d0       	rcall	.+86     	; 0xd42 <__divsf3_pse+0x92>
     cec:	fe 2f       	mov	r31, r30
     cee:	29 d0       	rcall	.+82     	; 0xd42 <__divsf3_pse+0x92>
     cf0:	66 0f       	add	r22, r22
     cf2:	77 1f       	adc	r23, r23
     cf4:	88 1f       	adc	r24, r24
     cf6:	bb 1f       	adc	r27, r27
     cf8:	26 17       	cp	r18, r22
     cfa:	37 07       	cpc	r19, r23
     cfc:	48 07       	cpc	r20, r24
     cfe:	ab 07       	cpc	r26, r27
     d00:	b0 e8       	ldi	r27, 0x80	; 128
     d02:	09 f0       	breq	.+2      	; 0xd06 <__divsf3_pse+0x56>
     d04:	bb 0b       	sbc	r27, r27
     d06:	80 2d       	mov	r24, r0
     d08:	bf 01       	movw	r22, r30
     d0a:	ff 27       	eor	r31, r31
     d0c:	93 58       	subi	r25, 0x83	; 131
     d0e:	5f 4f       	sbci	r21, 0xFF	; 255
     d10:	3a f0       	brmi	.+14     	; 0xd20 <__divsf3_pse+0x70>
     d12:	9e 3f       	cpi	r25, 0xFE	; 254
     d14:	51 05       	cpc	r21, r1
     d16:	78 f0       	brcs	.+30     	; 0xd36 <__divsf3_pse+0x86>
     d18:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_inf>
     d1c:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_szero>
     d20:	5f 3f       	cpi	r21, 0xFF	; 255
     d22:	e4 f3       	brlt	.-8      	; 0xd1c <__divsf3_pse+0x6c>
     d24:	98 3e       	cpi	r25, 0xE8	; 232
     d26:	d4 f3       	brlt	.-12     	; 0xd1c <__divsf3_pse+0x6c>
     d28:	86 95       	lsr	r24
     d2a:	77 95       	ror	r23
     d2c:	67 95       	ror	r22
     d2e:	b7 95       	ror	r27
     d30:	f7 95       	ror	r31
     d32:	9f 5f       	subi	r25, 0xFF	; 255
     d34:	c9 f7       	brne	.-14     	; 0xd28 <__divsf3_pse+0x78>
     d36:	88 0f       	add	r24, r24
     d38:	91 1d       	adc	r25, r1
     d3a:	96 95       	lsr	r25
     d3c:	87 95       	ror	r24
     d3e:	97 f9       	bld	r25, 7
     d40:	08 95       	ret
     d42:	e1 e0       	ldi	r30, 0x01	; 1
     d44:	66 0f       	add	r22, r22
     d46:	77 1f       	adc	r23, r23
     d48:	88 1f       	adc	r24, r24
     d4a:	bb 1f       	adc	r27, r27
     d4c:	62 17       	cp	r22, r18
     d4e:	73 07       	cpc	r23, r19
     d50:	84 07       	cpc	r24, r20
     d52:	ba 07       	cpc	r27, r26
     d54:	20 f0       	brcs	.+8      	; 0xd5e <__divsf3_pse+0xae>
     d56:	62 1b       	sub	r22, r18
     d58:	73 0b       	sbc	r23, r19
     d5a:	84 0b       	sbc	r24, r20
     d5c:	ba 0b       	sbc	r27, r26
     d5e:	ee 1f       	adc	r30, r30
     d60:	88 f7       	brcc	.-30     	; 0xd44 <__divsf3_pse+0x94>
     d62:	e0 95       	com	r30
     d64:	08 95       	ret

00000d66 <__fixunssfsi>:
     d66:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_splitA>
     d6a:	88 f0       	brcs	.+34     	; 0xd8e <__fixunssfsi+0x28>
     d6c:	9f 57       	subi	r25, 0x7F	; 127
     d6e:	98 f0       	brcs	.+38     	; 0xd96 <__fixunssfsi+0x30>
     d70:	b9 2f       	mov	r27, r25
     d72:	99 27       	eor	r25, r25
     d74:	b7 51       	subi	r27, 0x17	; 23
     d76:	b0 f0       	brcs	.+44     	; 0xda4 <__fixunssfsi+0x3e>
     d78:	e1 f0       	breq	.+56     	; 0xdb2 <__fixunssfsi+0x4c>
     d7a:	66 0f       	add	r22, r22
     d7c:	77 1f       	adc	r23, r23
     d7e:	88 1f       	adc	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	1a f0       	brmi	.+6      	; 0xd8a <__fixunssfsi+0x24>
     d84:	ba 95       	dec	r27
     d86:	c9 f7       	brne	.-14     	; 0xd7a <__fixunssfsi+0x14>
     d88:	14 c0       	rjmp	.+40     	; 0xdb2 <__fixunssfsi+0x4c>
     d8a:	b1 30       	cpi	r27, 0x01	; 1
     d8c:	91 f0       	breq	.+36     	; 0xdb2 <__fixunssfsi+0x4c>
     d8e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__fp_zero>
     d92:	b1 e0       	ldi	r27, 0x01	; 1
     d94:	08 95       	ret
     d96:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__fp_zero>
     d9a:	67 2f       	mov	r22, r23
     d9c:	78 2f       	mov	r23, r24
     d9e:	88 27       	eor	r24, r24
     da0:	b8 5f       	subi	r27, 0xF8	; 248
     da2:	39 f0       	breq	.+14     	; 0xdb2 <__fixunssfsi+0x4c>
     da4:	b9 3f       	cpi	r27, 0xF9	; 249
     da6:	cc f3       	brlt	.-14     	; 0xd9a <__fixunssfsi+0x34>
     da8:	86 95       	lsr	r24
     daa:	77 95       	ror	r23
     dac:	67 95       	ror	r22
     dae:	b3 95       	inc	r27
     db0:	d9 f7       	brne	.-10     	; 0xda8 <__fixunssfsi+0x42>
     db2:	3e f4       	brtc	.+14     	; 0xdc2 <__fixunssfsi+0x5c>
     db4:	90 95       	com	r25
     db6:	80 95       	com	r24
     db8:	70 95       	com	r23
     dba:	61 95       	neg	r22
     dbc:	7f 4f       	sbci	r23, 0xFF	; 255
     dbe:	8f 4f       	sbci	r24, 0xFF	; 255
     dc0:	9f 4f       	sbci	r25, 0xFF	; 255
     dc2:	08 95       	ret

00000dc4 <__floatunsisf>:
     dc4:	e8 94       	clt
     dc6:	09 c0       	rjmp	.+18     	; 0xdda <__floatsisf+0x12>

00000dc8 <__floatsisf>:
     dc8:	97 fb       	bst	r25, 7
     dca:	3e f4       	brtc	.+14     	; 0xdda <__floatsisf+0x12>
     dcc:	90 95       	com	r25
     dce:	80 95       	com	r24
     dd0:	70 95       	com	r23
     dd2:	61 95       	neg	r22
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	8f 4f       	sbci	r24, 0xFF	; 255
     dd8:	9f 4f       	sbci	r25, 0xFF	; 255
     dda:	99 23       	and	r25, r25
     ddc:	a9 f0       	breq	.+42     	; 0xe08 <__floatsisf+0x40>
     dde:	f9 2f       	mov	r31, r25
     de0:	96 e9       	ldi	r25, 0x96	; 150
     de2:	bb 27       	eor	r27, r27
     de4:	93 95       	inc	r25
     de6:	f6 95       	lsr	r31
     de8:	87 95       	ror	r24
     dea:	77 95       	ror	r23
     dec:	67 95       	ror	r22
     dee:	b7 95       	ror	r27
     df0:	f1 11       	cpse	r31, r1
     df2:	f8 cf       	rjmp	.-16     	; 0xde4 <__floatsisf+0x1c>
     df4:	fa f4       	brpl	.+62     	; 0xe34 <__floatsisf+0x6c>
     df6:	bb 0f       	add	r27, r27
     df8:	11 f4       	brne	.+4      	; 0xdfe <__floatsisf+0x36>
     dfa:	60 ff       	sbrs	r22, 0
     dfc:	1b c0       	rjmp	.+54     	; 0xe34 <__floatsisf+0x6c>
     dfe:	6f 5f       	subi	r22, 0xFF	; 255
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	8f 4f       	sbci	r24, 0xFF	; 255
     e04:	9f 4f       	sbci	r25, 0xFF	; 255
     e06:	16 c0       	rjmp	.+44     	; 0xe34 <__floatsisf+0x6c>
     e08:	88 23       	and	r24, r24
     e0a:	11 f0       	breq	.+4      	; 0xe10 <__floatsisf+0x48>
     e0c:	96 e9       	ldi	r25, 0x96	; 150
     e0e:	11 c0       	rjmp	.+34     	; 0xe32 <__floatsisf+0x6a>
     e10:	77 23       	and	r23, r23
     e12:	21 f0       	breq	.+8      	; 0xe1c <__floatsisf+0x54>
     e14:	9e e8       	ldi	r25, 0x8E	; 142
     e16:	87 2f       	mov	r24, r23
     e18:	76 2f       	mov	r23, r22
     e1a:	05 c0       	rjmp	.+10     	; 0xe26 <__floatsisf+0x5e>
     e1c:	66 23       	and	r22, r22
     e1e:	71 f0       	breq	.+28     	; 0xe3c <__floatsisf+0x74>
     e20:	96 e8       	ldi	r25, 0x86	; 134
     e22:	86 2f       	mov	r24, r22
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	2a f0       	brmi	.+10     	; 0xe34 <__floatsisf+0x6c>
     e2a:	9a 95       	dec	r25
     e2c:	66 0f       	add	r22, r22
     e2e:	77 1f       	adc	r23, r23
     e30:	88 1f       	adc	r24, r24
     e32:	da f7       	brpl	.-10     	; 0xe2a <__floatsisf+0x62>
     e34:	88 0f       	add	r24, r24
     e36:	96 95       	lsr	r25
     e38:	87 95       	ror	r24
     e3a:	97 f9       	bld	r25, 7
     e3c:	08 95       	ret

00000e3e <__fp_cmp>:
     e3e:	99 0f       	add	r25, r25
     e40:	00 08       	sbc	r0, r0
     e42:	55 0f       	add	r21, r21
     e44:	aa 0b       	sbc	r26, r26
     e46:	e0 e8       	ldi	r30, 0x80	; 128
     e48:	fe ef       	ldi	r31, 0xFE	; 254
     e4a:	16 16       	cp	r1, r22
     e4c:	17 06       	cpc	r1, r23
     e4e:	e8 07       	cpc	r30, r24
     e50:	f9 07       	cpc	r31, r25
     e52:	c0 f0       	brcs	.+48     	; 0xe84 <__fp_cmp+0x46>
     e54:	12 16       	cp	r1, r18
     e56:	13 06       	cpc	r1, r19
     e58:	e4 07       	cpc	r30, r20
     e5a:	f5 07       	cpc	r31, r21
     e5c:	98 f0       	brcs	.+38     	; 0xe84 <__fp_cmp+0x46>
     e5e:	62 1b       	sub	r22, r18
     e60:	73 0b       	sbc	r23, r19
     e62:	84 0b       	sbc	r24, r20
     e64:	95 0b       	sbc	r25, r21
     e66:	39 f4       	brne	.+14     	; 0xe76 <__fp_cmp+0x38>
     e68:	0a 26       	eor	r0, r26
     e6a:	61 f0       	breq	.+24     	; 0xe84 <__fp_cmp+0x46>
     e6c:	23 2b       	or	r18, r19
     e6e:	24 2b       	or	r18, r20
     e70:	25 2b       	or	r18, r21
     e72:	21 f4       	brne	.+8      	; 0xe7c <__fp_cmp+0x3e>
     e74:	08 95       	ret
     e76:	0a 26       	eor	r0, r26
     e78:	09 f4       	brne	.+2      	; 0xe7c <__fp_cmp+0x3e>
     e7a:	a1 40       	sbci	r26, 0x01	; 1
     e7c:	a6 95       	lsr	r26
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	81 1d       	adc	r24, r1
     e82:	81 1d       	adc	r24, r1
     e84:	08 95       	ret

00000e86 <__fp_inf>:
     e86:	97 f9       	bld	r25, 7
     e88:	9f 67       	ori	r25, 0x7F	; 127
     e8a:	80 e8       	ldi	r24, 0x80	; 128
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	08 95       	ret

00000e92 <__fp_nan>:
     e92:	9f ef       	ldi	r25, 0xFF	; 255
     e94:	80 ec       	ldi	r24, 0xC0	; 192
     e96:	08 95       	ret

00000e98 <__fp_pscA>:
     e98:	00 24       	eor	r0, r0
     e9a:	0a 94       	dec	r0
     e9c:	16 16       	cp	r1, r22
     e9e:	17 06       	cpc	r1, r23
     ea0:	18 06       	cpc	r1, r24
     ea2:	09 06       	cpc	r0, r25
     ea4:	08 95       	ret

00000ea6 <__fp_pscB>:
     ea6:	00 24       	eor	r0, r0
     ea8:	0a 94       	dec	r0
     eaa:	12 16       	cp	r1, r18
     eac:	13 06       	cpc	r1, r19
     eae:	14 06       	cpc	r1, r20
     eb0:	05 06       	cpc	r0, r21
     eb2:	08 95       	ret

00000eb4 <__fp_round>:
     eb4:	09 2e       	mov	r0, r25
     eb6:	03 94       	inc	r0
     eb8:	00 0c       	add	r0, r0
     eba:	11 f4       	brne	.+4      	; 0xec0 <__fp_round+0xc>
     ebc:	88 23       	and	r24, r24
     ebe:	52 f0       	brmi	.+20     	; 0xed4 <__fp_round+0x20>
     ec0:	bb 0f       	add	r27, r27
     ec2:	40 f4       	brcc	.+16     	; 0xed4 <__fp_round+0x20>
     ec4:	bf 2b       	or	r27, r31
     ec6:	11 f4       	brne	.+4      	; 0xecc <__fp_round+0x18>
     ec8:	60 ff       	sbrs	r22, 0
     eca:	04 c0       	rjmp	.+8      	; 0xed4 <__fp_round+0x20>
     ecc:	6f 5f       	subi	r22, 0xFF	; 255
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
     ed0:	8f 4f       	sbci	r24, 0xFF	; 255
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	08 95       	ret

00000ed6 <__fp_split3>:
     ed6:	57 fd       	sbrc	r21, 7
     ed8:	90 58       	subi	r25, 0x80	; 128
     eda:	44 0f       	add	r20, r20
     edc:	55 1f       	adc	r21, r21
     ede:	59 f0       	breq	.+22     	; 0xef6 <__fp_splitA+0x10>
     ee0:	5f 3f       	cpi	r21, 0xFF	; 255
     ee2:	71 f0       	breq	.+28     	; 0xf00 <__fp_splitA+0x1a>
     ee4:	47 95       	ror	r20

00000ee6 <__fp_splitA>:
     ee6:	88 0f       	add	r24, r24
     ee8:	97 fb       	bst	r25, 7
     eea:	99 1f       	adc	r25, r25
     eec:	61 f0       	breq	.+24     	; 0xf06 <__fp_splitA+0x20>
     eee:	9f 3f       	cpi	r25, 0xFF	; 255
     ef0:	79 f0       	breq	.+30     	; 0xf10 <__fp_splitA+0x2a>
     ef2:	87 95       	ror	r24
     ef4:	08 95       	ret
     ef6:	12 16       	cp	r1, r18
     ef8:	13 06       	cpc	r1, r19
     efa:	14 06       	cpc	r1, r20
     efc:	55 1f       	adc	r21, r21
     efe:	f2 cf       	rjmp	.-28     	; 0xee4 <__fp_split3+0xe>
     f00:	46 95       	lsr	r20
     f02:	f1 df       	rcall	.-30     	; 0xee6 <__fp_splitA>
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <__fp_splitA+0x30>
     f06:	16 16       	cp	r1, r22
     f08:	17 06       	cpc	r1, r23
     f0a:	18 06       	cpc	r1, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	f1 cf       	rjmp	.-30     	; 0xef2 <__fp_splitA+0xc>
     f10:	86 95       	lsr	r24
     f12:	71 05       	cpc	r23, r1
     f14:	61 05       	cpc	r22, r1
     f16:	08 94       	sec
     f18:	08 95       	ret

00000f1a <__fp_zero>:
     f1a:	e8 94       	clt

00000f1c <__fp_szero>:
     f1c:	bb 27       	eor	r27, r27
     f1e:	66 27       	eor	r22, r22
     f20:	77 27       	eor	r23, r23
     f22:	cb 01       	movw	r24, r22
     f24:	97 f9       	bld	r25, 7
     f26:	08 95       	ret

00000f28 <__gesf2>:
     f28:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_cmp>
     f2c:	08 f4       	brcc	.+2      	; 0xf30 <__gesf2+0x8>
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	08 95       	ret

00000f32 <__mulsf3>:
     f32:	0e 94 ac 07 	call	0xf58	; 0xf58 <__mulsf3x>
     f36:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_round>
     f3a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fp_pscA>
     f3e:	38 f0       	brcs	.+14     	; 0xf4e <__mulsf3+0x1c>
     f40:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_pscB>
     f44:	20 f0       	brcs	.+8      	; 0xf4e <__mulsf3+0x1c>
     f46:	95 23       	and	r25, r21
     f48:	11 f0       	breq	.+4      	; 0xf4e <__mulsf3+0x1c>
     f4a:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_inf>
     f4e:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_nan>
     f52:	11 24       	eor	r1, r1
     f54:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_szero>

00000f58 <__mulsf3x>:
     f58:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fp_split3>
     f5c:	70 f3       	brcs	.-36     	; 0xf3a <__mulsf3+0x8>

00000f5e <__mulsf3_pse>:
     f5e:	95 9f       	mul	r25, r21
     f60:	c1 f3       	breq	.-16     	; 0xf52 <__mulsf3+0x20>
     f62:	95 0f       	add	r25, r21
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	55 1f       	adc	r21, r21
     f68:	62 9f       	mul	r22, r18
     f6a:	f0 01       	movw	r30, r0
     f6c:	72 9f       	mul	r23, r18
     f6e:	bb 27       	eor	r27, r27
     f70:	f0 0d       	add	r31, r0
     f72:	b1 1d       	adc	r27, r1
     f74:	63 9f       	mul	r22, r19
     f76:	aa 27       	eor	r26, r26
     f78:	f0 0d       	add	r31, r0
     f7a:	b1 1d       	adc	r27, r1
     f7c:	aa 1f       	adc	r26, r26
     f7e:	64 9f       	mul	r22, r20
     f80:	66 27       	eor	r22, r22
     f82:	b0 0d       	add	r27, r0
     f84:	a1 1d       	adc	r26, r1
     f86:	66 1f       	adc	r22, r22
     f88:	82 9f       	mul	r24, r18
     f8a:	22 27       	eor	r18, r18
     f8c:	b0 0d       	add	r27, r0
     f8e:	a1 1d       	adc	r26, r1
     f90:	62 1f       	adc	r22, r18
     f92:	73 9f       	mul	r23, r19
     f94:	b0 0d       	add	r27, r0
     f96:	a1 1d       	adc	r26, r1
     f98:	62 1f       	adc	r22, r18
     f9a:	83 9f       	mul	r24, r19
     f9c:	a0 0d       	add	r26, r0
     f9e:	61 1d       	adc	r22, r1
     fa0:	22 1f       	adc	r18, r18
     fa2:	74 9f       	mul	r23, r20
     fa4:	33 27       	eor	r19, r19
     fa6:	a0 0d       	add	r26, r0
     fa8:	61 1d       	adc	r22, r1
     faa:	23 1f       	adc	r18, r19
     fac:	84 9f       	mul	r24, r20
     fae:	60 0d       	add	r22, r0
     fb0:	21 1d       	adc	r18, r1
     fb2:	82 2f       	mov	r24, r18
     fb4:	76 2f       	mov	r23, r22
     fb6:	6a 2f       	mov	r22, r26
     fb8:	11 24       	eor	r1, r1
     fba:	9f 57       	subi	r25, 0x7F	; 127
     fbc:	50 40       	sbci	r21, 0x00	; 0
     fbe:	9a f0       	brmi	.+38     	; 0xfe6 <__mulsf3_pse+0x88>
     fc0:	f1 f0       	breq	.+60     	; 0xffe <__mulsf3_pse+0xa0>
     fc2:	88 23       	and	r24, r24
     fc4:	4a f0       	brmi	.+18     	; 0xfd8 <__mulsf3_pse+0x7a>
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	bb 1f       	adc	r27, r27
     fcc:	66 1f       	adc	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	88 1f       	adc	r24, r24
     fd2:	91 50       	subi	r25, 0x01	; 1
     fd4:	50 40       	sbci	r21, 0x00	; 0
     fd6:	a9 f7       	brne	.-22     	; 0xfc2 <__mulsf3_pse+0x64>
     fd8:	9e 3f       	cpi	r25, 0xFE	; 254
     fda:	51 05       	cpc	r21, r1
     fdc:	80 f0       	brcs	.+32     	; 0xffe <__mulsf3_pse+0xa0>
     fde:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_inf>
     fe2:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_szero>
     fe6:	5f 3f       	cpi	r21, 0xFF	; 255
     fe8:	e4 f3       	brlt	.-8      	; 0xfe2 <__mulsf3_pse+0x84>
     fea:	98 3e       	cpi	r25, 0xE8	; 232
     fec:	d4 f3       	brlt	.-12     	; 0xfe2 <__mulsf3_pse+0x84>
     fee:	86 95       	lsr	r24
     ff0:	77 95       	ror	r23
     ff2:	67 95       	ror	r22
     ff4:	b7 95       	ror	r27
     ff6:	f7 95       	ror	r31
     ff8:	e7 95       	ror	r30
     ffa:	9f 5f       	subi	r25, 0xFF	; 255
     ffc:	c1 f7       	brne	.-16     	; 0xfee <__mulsf3_pse+0x90>
     ffe:	fe 2b       	or	r31, r30
    1000:	88 0f       	add	r24, r24
    1002:	91 1d       	adc	r25, r1
    1004:	96 95       	lsr	r25
    1006:	87 95       	ror	r24
    1008:	97 f9       	bld	r25, 7
    100a:	08 95       	ret

0000100c <__tablejump2__>:
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	05 90       	lpm	r0, Z+
    1012:	f4 91       	lpm	r31, Z
    1014:	e0 2d       	mov	r30, r0
    1016:	09 94       	ijmp

00001018 <_exit>:
    1018:	f8 94       	cli

0000101a <__stop_program>:
    101a:	ff cf       	rjmp	.-2      	; 0x101a <__stop_program>
