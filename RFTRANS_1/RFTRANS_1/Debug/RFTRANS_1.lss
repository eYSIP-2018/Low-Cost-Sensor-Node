
RFTRANS_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000115c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800100  00800100  0000115c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005ac4  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fab  00000000  00000000  00006fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b4d  00000000  00000000  00007f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab4  00000000  00000000  00009a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013e7  00000000  00000000  0000a54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fba  00000000  00000000  0000b933  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000f8ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_6>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_14>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	7f 01       	movw	r14, r30

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e8 ee       	ldi	r30, 0xE8	; 232
      7e:	f0 e1       	ldi	r31, 0x10	; 16
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a0 30       	cpi	r26, 0x00	; 0
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a0 e0       	ldi	r26, 0x00	; 0
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	ae 31       	cpi	r26, 0x1E	; 30
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 47 01 	call	0x28e	; 0x28e <main>
      b6:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <UART_Init>:
	while((ADCSRA&0x10)==0);  //Wait for ADC conversion to complete
	a = ADCL;
	a |= (ADCH<<8);//higher 2 bit
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
	return a;
}
      be:	e1 ec       	ldi	r30, 0xC1	; 193
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	10 82       	st	Z, r1
      c4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      c8:	a2 ec       	ldi	r26, 0xC2	; 194
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	8c 91       	ld	r24, X
      ce:	8e 60       	ori	r24, 0x0E	; 14
      d0:	8c 93       	st	X, r24
      d2:	83 e3       	ldi	r24, 0x33	; 51
      d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      dc:	80 81       	ld	r24, Z
      de:	88 61       	ori	r24, 0x18	; 24
      e0:	80 83       	st	Z, r24
      e2:	08 95       	ret

000000e4 <Set_pin>:
      e4:	61 30       	cpi	r22, 0x01	; 1
      e6:	71 05       	cpc	r23, r1
      e8:	f1 f4       	brne	.+60     	; 0x126 <Set_pin+0x42>
      ea:	88 30       	cpi	r24, 0x08	; 8
      ec:	91 05       	cpc	r25, r1
      ee:	70 f0       	brcs	.+28     	; 0x10c <Set_pin+0x28>
      f0:	44 b1       	in	r20, 0x04	; 4
      f2:	08 97       	sbiw	r24, 0x08	; 8
      f4:	21 e0       	ldi	r18, 0x01	; 1
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	b9 01       	movw	r22, r18
      fa:	02 c0       	rjmp	.+4      	; 0x100 <Set_pin+0x1c>
      fc:	66 0f       	add	r22, r22
      fe:	77 1f       	adc	r23, r23
     100:	8a 95       	dec	r24
     102:	e2 f7       	brpl	.-8      	; 0xfc <Set_pin+0x18>
     104:	cb 01       	movw	r24, r22
     106:	84 2b       	or	r24, r20
     108:	84 b9       	out	0x04, r24	; 4
     10a:	08 95       	ret
     10c:	4a b1       	in	r20, 0x0a	; 10
     10e:	21 e0       	ldi	r18, 0x01	; 1
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	b9 01       	movw	r22, r18
     114:	02 c0       	rjmp	.+4      	; 0x11a <Set_pin+0x36>
     116:	66 0f       	add	r22, r22
     118:	77 1f       	adc	r23, r23
     11a:	8a 95       	dec	r24
     11c:	e2 f7       	brpl	.-8      	; 0x116 <Set_pin+0x32>
     11e:	cb 01       	movw	r24, r22
     120:	84 2b       	or	r24, r20
     122:	8a b9       	out	0x0a, r24	; 10
     124:	08 95       	ret
     126:	08 97       	sbiw	r24, 0x08	; 8
     128:	18 f0       	brcs	.+6      	; 0x130 <Set_pin+0x4c>
     12a:	84 b1       	in	r24, 0x04	; 4
     12c:	84 b9       	out	0x04, r24	; 4
     12e:	08 95       	ret
     130:	8a b1       	in	r24, 0x0a	; 10
     132:	8a b9       	out	0x0a, r24	; 10
     134:	08 95       	ret

00000136 <Write_Digital>:
     136:	66 23       	and	r22, r22
     138:	f1 f0       	breq	.+60     	; 0x176 <Write_Digital+0x40>
     13a:	88 30       	cpi	r24, 0x08	; 8
     13c:	91 05       	cpc	r25, r1
     13e:	70 f0       	brcs	.+28     	; 0x15c <Write_Digital+0x26>
     140:	45 b1       	in	r20, 0x05	; 5
     142:	08 97       	sbiw	r24, 0x08	; 8
     144:	21 e0       	ldi	r18, 0x01	; 1
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	b9 01       	movw	r22, r18
     14a:	02 c0       	rjmp	.+4      	; 0x150 <Write_Digital+0x1a>
     14c:	66 0f       	add	r22, r22
     14e:	77 1f       	adc	r23, r23
     150:	8a 95       	dec	r24
     152:	e2 f7       	brpl	.-8      	; 0x14c <Write_Digital+0x16>
     154:	cb 01       	movw	r24, r22
     156:	84 2b       	or	r24, r20
     158:	85 b9       	out	0x05, r24	; 5
     15a:	08 95       	ret
     15c:	4b b1       	in	r20, 0x0b	; 11
     15e:	21 e0       	ldi	r18, 0x01	; 1
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	b9 01       	movw	r22, r18
     164:	02 c0       	rjmp	.+4      	; 0x16a <Write_Digital+0x34>
     166:	66 0f       	add	r22, r22
     168:	77 1f       	adc	r23, r23
     16a:	8a 95       	dec	r24
     16c:	e2 f7       	brpl	.-8      	; 0x166 <Write_Digital+0x30>
     16e:	cb 01       	movw	r24, r22
     170:	84 2b       	or	r24, r20
     172:	8b b9       	out	0x0b, r24	; 11
     174:	08 95       	ret
     176:	88 30       	cpi	r24, 0x08	; 8
     178:	91 05       	cpc	r25, r1
     17a:	78 f0       	brcs	.+30     	; 0x19a <Write_Digital+0x64>
     17c:	45 b1       	in	r20, 0x05	; 5
     17e:	08 97       	sbiw	r24, 0x08	; 8
     180:	21 e0       	ldi	r18, 0x01	; 1
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	b9 01       	movw	r22, r18
     186:	02 c0       	rjmp	.+4      	; 0x18c <Write_Digital+0x56>
     188:	66 0f       	add	r22, r22
     18a:	77 1f       	adc	r23, r23
     18c:	8a 95       	dec	r24
     18e:	e2 f7       	brpl	.-8      	; 0x188 <Write_Digital+0x52>
     190:	cb 01       	movw	r24, r22
     192:	80 95       	com	r24
     194:	84 23       	and	r24, r20
     196:	85 b9       	out	0x05, r24	; 5
     198:	08 95       	ret
     19a:	4b b1       	in	r20, 0x0b	; 11
     19c:	21 e0       	ldi	r18, 0x01	; 1
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	b9 01       	movw	r22, r18
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <Write_Digital+0x72>
     1a4:	66 0f       	add	r22, r22
     1a6:	77 1f       	adc	r23, r23
     1a8:	8a 95       	dec	r24
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <Write_Digital+0x6e>
     1ac:	cb 01       	movw	r24, r22
     1ae:	80 95       	com	r24
     1b0:	84 23       	and	r24, r20
     1b2:	8b b9       	out	0x0b, r24	; 11
     1b4:	08 95       	ret

000001b6 <__vector_14>:
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	8f 93       	push	r24
     1c2:	9f 93       	push	r25
     1c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
     1c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
     1d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
     1d6:	9f 91       	pop	r25
     1d8:	8f 91       	pop	r24
     1da:	0f 90       	pop	r0
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	0f 90       	pop	r0
     1e0:	1f 90       	pop	r1
     1e2:	18 95       	reti

000001e4 <power_down>:
// function for setting ucontroller in sleep mode for given time in minute
void power_down (unsigned int s_time)
{
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	8c 01       	movw	r16, r24
	for(int i=0;i<20;i++)
     1ee:	c0 e0       	ldi	r28, 0x00	; 0
     1f0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Set_pin(i,OUT);
     1f2:	61 e0       	ldi	r22, 0x01	; 1
     1f4:	70 e0       	ldi	r23, 0x00	; 0
     1f6:	ce 01       	movw	r24, r28
     1f8:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
	return a;
}
// function for setting ucontroller in sleep mode for given time in minute
void power_down (unsigned int s_time)
{
	for(int i=0;i<20;i++)
     1fc:	21 96       	adiw	r28, 0x01	; 1
     1fe:	c4 31       	cpi	r28, 0x14	; 20
     200:	d1 05       	cpc	r29, r1
     202:	b9 f7       	brne	.-18     	; 0x1f2 <power_down+0xe>
		
	}
	//setup watchdog timer for 8s
	// comment below line if delay required in seconds
	// s_time = s_time*8;//as 1 for loop 8 sec sleep factor for 1 minute sleep
	WDTCSR = (24);//chane WDCE and WDE also resets
     204:	e0 e6       	ldi	r30, 0x60	; 96
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	88 e1       	ldi	r24, 0x18	; 24
     20a:	80 83       	st	Z, r24
	// WDTCSR = (33);//set prescalar for 8 sec timeout
	WDTCSR = 0x06; // set prescaler for 1 second timeout
     20c:	86 e0       	ldi	r24, 0x06	; 6
     20e:	80 83       	st	Z, r24
	WDTCSR |=(1<<6);//enable interrupt mode WDIE set
     210:	80 81       	ld	r24, Z
     212:	80 64       	ori	r24, 0x40	; 64
     214:	80 83       	st	Z, r24
	//Disable ADC
	ADCSRA &= ~(1<<7);//clear ADEN bit dont forget to set this bit while using ADC in main code
     216:	ea e7       	ldi	r30, 0x7A	; 122
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	8f 77       	andi	r24, 0x7F	; 127
     21e:	80 83       	st	Z, r24
	 DIDR0=0x3F;//disable digital input buffers
     220:	8f e3       	ldi	r24, 0x3F	; 63
     222:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	 DIDR1=0x03;//Disabled  AIN Digital Input Disable it reduces power consumption in digital input buffers
     226:	83 e0       	ldi	r24, 0x03	; 3
     228:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
	// select sleep mode using SMCR.SM[2:0]
	SMCR |=(1<<2);//power down mode   010
     22c:	83 b7       	in	r24, 0x33	; 51
     22e:	84 60       	ori	r24, 0x04	; 4
     230:	83 bf       	out	0x33, r24	; 51
	SMCR |=1;//enable sleep SMCR.SE set
     232:	83 b7       	in	r24, 0x33	; 51
     234:	81 60       	ori	r24, 0x01	; 1
     236:	83 bf       	out	0x33, r24	; 51
	for (int i=0;i<s_time;i++)//gives extended timeout for 8*s_time sec
     238:	01 15       	cp	r16, r1
     23a:	11 05       	cpc	r17, r1
     23c:	81 f0       	breq	.+32     	; 0x25e <power_down+0x7a>
     23e:	a8 01       	movw	r20, r16
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	30 e0       	ldi	r19, 0x00	; 0
	{
		//BODS Disable
		// disable Brounout detection (BOD)
		MCUCR|=(3<<5);
     244:	95 b7       	in	r25, 0x35	; 53
     246:	90 66       	ori	r25, 0x60	; 96
     248:	95 bf       	out	0x35, r25	; 53
		MCUCR = (MCUCR &~(1<<5)) | (1<<6);
     24a:	95 b7       	in	r25, 0x35	; 53
     24c:	9f 79       	andi	r25, 0x9F	; 159
     24e:	90 64       	ori	r25, 0x40	; 64
     250:	95 bf       	out	0x35, r25	; 53
		__asm__ __volatile__("sleep");// executes A sleep instruction
     252:	88 95       	sleep
	 DIDR0=0x3F;//disable digital input buffers
	 DIDR1=0x03;//Disabled  AIN Digital Input Disable it reduces power consumption in digital input buffers
	// select sleep mode using SMCR.SM[2:0]
	SMCR |=(1<<2);//power down mode   010
	SMCR |=1;//enable sleep SMCR.SE set
	for (int i=0;i<s_time;i++)//gives extended timeout for 8*s_time sec
     254:	2f 5f       	subi	r18, 0xFF	; 255
     256:	3f 4f       	sbci	r19, 0xFF	; 255
     258:	42 17       	cp	r20, r18
     25a:	53 07       	cpc	r21, r19
     25c:	99 f7       	brne	.-26     	; 0x244 <power_down+0x60>
		// disable Brounout detection (BOD)
		MCUCR|=(3<<5);
		MCUCR = (MCUCR &~(1<<5)) | (1<<6);
		__asm__ __volatile__("sleep");// executes A sleep instruction
	}
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	08 95       	ret

00000268 <__vector_6>:
////   ISR For WATCHDOG TIMER
ISR(WDT_vect)
{
     268:	1f 92       	push	r1
     26a:	0f 92       	push	r0
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	0f 92       	push	r0
     270:	11 24       	eor	r1, r1
	
};
     272:	0f 90       	pop	r0
     274:	0f be       	out	0x3f, r0	; 63
     276:	0f 90       	pop	r0
     278:	1f 90       	pop	r1
     27a:	18 95       	reti

0000027c <_Z7getdatav>:
	}// while 1 loop ends here
}//main ends here 
/// function to collect data from sensor user can add data depending on number of sensors
void getdata()
{
	data[0] = 250;//battery voltage
     27c:	e2 e0       	ldi	r30, 0x02	; 2
     27e:	f1 e0       	ldi	r31, 0x01	; 1
     280:	8a ef       	ldi	r24, 0xFA	; 250
     282:	80 83       	st	Z, r24
	data[1] = 25;//temp value from temp sensor
     284:	89 e1       	ldi	r24, 0x19	; 25
     286:	81 83       	std	Z+1, r24	; 0x01
	data[2] = 76;//humidity value from DHTsensor
     288:	8c e4       	ldi	r24, 0x4C	; 76
     28a:	82 83       	std	Z+2, r24	; 0x02
     28c:	08 95       	ret

0000028e <main>:
byte data[4]="";	
char Ntime[3] = "";
int main(void)
{ 
	unsigned char status1;//to read a NRF24L01 particular register using SPI
	UART_Init(9600);	 
     28e:	60 e8       	ldi	r22, 0x80	; 128
     290:	75 e2       	ldi	r23, 0x25	; 37
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_Init>
	radio.begin();	 
     29a:	86 e0       	ldi	r24, 0x06	; 6
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN4RF245beginEv>
	radio.openWritingPipe(pipes[1]);// transmitter address for pipe 1
     2a2:	02 ee       	ldi	r16, 0xE2	; 226
     2a4:	10 ef       	ldi	r17, 0xF0	; 240
     2a6:	20 ef       	ldi	r18, 0xF0	; 240
     2a8:	30 ef       	ldi	r19, 0xF0	; 240
     2aa:	40 ef       	ldi	r20, 0xF0	; 240
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	86 e0       	ldi	r24, 0x06	; 6
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0e 94 10 05 	call	0xa20	; 0xa20 <_ZN4RF2415openWritingPipeEy>
	radio.setDataRate(RF24_250KBPS);
     2ba:	62 e0       	ldi	r22, 0x02	; 2
     2bc:	86 e0       	ldi	r24, 0x06	; 6
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	0e 94 6a 05 	call	0xad4	; 0xad4 <_ZN4RF2411setDataRateE15rf24_datarate_e>
	//radio.setRetries(12,15);
	radio.stopListening();//make radio  transmitter
     2c4:	86 e0       	ldi	r24, 0x06	; 6
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	0e 94 57 03 	call	0x6ae	; 0x6ae <_ZN4RF2413stopListeningEv>
	while (1)
	{
	 // code for transmitter
		// function to read modify data string i.e, read sensors data
		getdata();
     2cc:	0e 94 3e 01 	call	0x27c	; 0x27c <_Z7getdatav>
		while (radio.write(data, sizeof(data)) != true)	{}
     2d0:	44 e0       	ldi	r20, 0x04	; 4
     2d2:	62 e0       	ldi	r22, 0x02	; 2
     2d4:	71 e0       	ldi	r23, 0x01	; 1
     2d6:	86 e0       	ldi	r24, 0x06	; 6
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN4RF245writeEPKvh>
     2de:	88 23       	and	r24, r24
     2e0:	b9 f3       	breq	.-18     	; 0x2d0 <main+0x42>
			 sei();//enable global interrupts
     2e2:	78 94       	sei
			 radio.powerDown();
     2e4:	86 e0       	ldi	r24, 0x06	; 6
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 ad 04 	call	0x95a	; 0x95a <_ZN4RF249powerDownEv>
			 power_down(20);
     2ec:	84 e1       	ldi	r24, 0x14	; 20
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <power_down>
			 radio.powerUp();
     2f4:	86 e0       	ldi	r24, 0x06	; 6
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN4RF247powerUpEv>
	radio.begin();	 
	radio.openWritingPipe(pipes[1]);// transmitter address for pipe 1
	radio.setDataRate(RF24_250KBPS);
	//radio.setRetries(12,15);
	radio.stopListening();//make radio  transmitter
	while (1)
     2fc:	e7 cf       	rjmp	.-50     	; 0x2cc <main+0x3e>

000002fe <_GLOBAL__sub_I_radio>:
 * Author : sachin mahadevjadhav
 */ 
#include <avr/io.h>
#include "RF24.h"
void getdata();
RF24 radio(9, 10); // CE, CSN
     2fe:	4a e0       	ldi	r20, 0x0A	; 10
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	69 e0       	ldi	r22, 0x09	; 9
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	86 e0       	ldi	r24, 0x06	; 6
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 39 03 	call	0x672	; 0x672 <_ZN4RF24C1Ejj>
     30e:	08 95       	ret

00000310 <_ZN4RF243csnEb>:

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
}
     310:	4f 92       	push	r4
     312:	5f 92       	push	r5
     314:	6f 92       	push	r6
     316:	7f 92       	push	r7
     318:	8f 92       	push	r8
     31a:	9f 92       	push	r9
     31c:	af 92       	push	r10
     31e:	bf 92       	push	r11
     320:	cf 92       	push	r12
     322:	df 92       	push	r13
     324:	ef 92       	push	r14
     326:	ff 92       	push	r15
     328:	1f 93       	push	r17
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	ec 01       	movw	r28, r24
     330:	8a 81       	ldd	r24, Y+2	; 0x02
     332:	9b 81       	ldd	r25, Y+3	; 0x03
     334:	0e 94 9b 00 	call	0x136	; 0x136 <Write_Digital>
     338:	6c 89       	ldd	r22, Y+20	; 0x14
     33a:	7d 89       	ldd	r23, Y+21	; 0x15
     33c:	8e 89       	ldd	r24, Y+22	; 0x16
     33e:	9f 89       	ldd	r25, Y+23	; 0x17
     340:	0e 94 48 07 	call	0xe90	; 0xe90 <__floatunsisf>
     344:	6b 01       	movw	r12, r22
     346:	7c 01       	movw	r14, r24
     348:	2b ea       	ldi	r18, 0xAB	; 171
     34a:	3a ea       	ldi	r19, 0xAA	; 170
     34c:	4a e2       	ldi	r20, 0x2A	; 42
     34e:	50 e4       	ldi	r21, 0x40	; 64
     350:	0e 94 ff 07 	call	0xffe	; 0xffe <__mulsf3>
     354:	4b 01       	movw	r8, r22
     356:	5c 01       	movw	r10, r24
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	40 e8       	ldi	r20, 0x80	; 128
     35e:	5f e3       	ldi	r21, 0x3F	; 63
     360:	0e 94 a2 06 	call	0xd44	; 0xd44 <__cmpsf2>
     364:	88 23       	and	r24, r24
     366:	0c f4       	brge	.+2      	; 0x36a <_ZN4RF243csnEb+0x5a>
     368:	6e c0       	rjmp	.+220    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     36a:	a7 01       	movw	r20, r14
     36c:	96 01       	movw	r18, r12
     36e:	c7 01       	movw	r24, r14
     370:	b6 01       	movw	r22, r12
     372:	0e 94 36 06 	call	0xc6c	; 0xc6c <__addsf3>
     376:	2b 01       	movw	r4, r22
     378:	3c 01       	movw	r6, r24
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	3f ef       	ldi	r19, 0xFF	; 255
     37e:	4f e7       	ldi	r20, 0x7F	; 127
     380:	57 e4       	ldi	r21, 0x47	; 71
     382:	0e 94 fa 07 	call	0xff4	; 0xff4 <__gesf2>
     386:	18 16       	cp	r1, r24
     388:	0c f0       	brlt	.+2      	; 0x38c <_ZN4RF243csnEb+0x7c>
     38a:	45 c0       	rjmp	.+138    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	4a e7       	ldi	r20, 0x7A	; 122
     392:	54 e4       	ldi	r21, 0x44	; 68
     394:	c7 01       	movw	r24, r14
     396:	b6 01       	movw	r22, r12
     398:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__divsf3>
     39c:	4b 01       	movw	r8, r22
     39e:	5c 01       	movw	r10, r24
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	4a ef       	ldi	r20, 0xFA	; 250
     3a6:	54 e4       	ldi	r21, 0x44	; 68
     3a8:	0e 94 ff 07 	call	0xffe	; 0xffe <__mulsf3>
     3ac:	6b 01       	movw	r12, r22
     3ae:	7c 01       	movw	r14, r24
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	40 e8       	ldi	r20, 0x80	; 128
     3b6:	5f e3       	ldi	r21, 0x3F	; 63
     3b8:	0e 94 a2 06 	call	0xd44	; 0xd44 <__cmpsf2>
     3bc:	88 23       	and	r24, r24
     3be:	2c f1       	brlt	.+74     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	3f ef       	ldi	r19, 0xFF	; 255
     3c4:	4f e7       	ldi	r20, 0x7F	; 127
     3c6:	57 e4       	ldi	r21, 0x47	; 71
     3c8:	c7 01       	movw	r24, r14
     3ca:	b6 01       	movw	r22, r12
     3cc:	0e 94 fa 07 	call	0xff4	; 0xff4 <__gesf2>
     3d0:	18 16       	cp	r1, r24
     3d2:	b4 f4       	brge	.+44     	; 0x400 <__LOCK_REGION_LENGTH__>
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	40 e2       	ldi	r20, 0x20	; 32
     3da:	51 e4       	ldi	r21, 0x41	; 65
     3dc:	c5 01       	movw	r24, r10
     3de:	b4 01       	movw	r22, r8
     3e0:	0e 94 ff 07 	call	0xffe	; 0xffe <__mulsf3>
     3e4:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     3e8:	61 15       	cp	r22, r1
     3ea:	71 05       	cpc	r23, r1
     3ec:	69 f1       	breq	.+90     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     3ee:	28 ec       	ldi	r18, 0xC8	; 200
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	c9 01       	movw	r24, r18
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <_ZN4RF243csnEb+0xe4>
     3f8:	61 50       	subi	r22, 0x01	; 1
     3fa:	71 09       	sbc	r23, r1
     3fc:	d1 f7       	brne	.-12     	; 0x3f2 <_ZN4RF243csnEb+0xe2>
     3fe:	24 c0       	rjmp	.+72     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     400:	c7 01       	movw	r24, r14
     402:	b6 01       	movw	r22, r12
     404:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	cb 01       	movw	r24, r22
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     414:	19 c0       	rjmp	.+50     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	4f e7       	ldi	r20, 0x7F	; 127
     41c:	53 e4       	ldi	r21, 0x43	; 67
     41e:	c5 01       	movw	r24, r10
     420:	b4 01       	movw	r22, r8
     422:	0e 94 fa 07 	call	0xff4	; 0xff4 <__gesf2>
     426:	18 16       	cp	r1, r24
     428:	44 f4       	brge	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     42a:	c3 01       	movw	r24, r6
     42c:	b2 01       	movw	r22, r4
     42e:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     432:	cb 01       	movw	r24, r22
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     438:	0a c0       	rjmp	.+20     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     43a:	c5 01       	movw	r24, r10
     43c:	b4 01       	movw	r22, r8
     43e:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     442:	16 2f       	mov	r17, r22
     444:	01 c0       	rjmp	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     446:	11 e0       	ldi	r17, 0x01	; 1
     448:	61 2f       	mov	r22, r17
     44a:	6a 95       	dec	r22
     44c:	f1 f7       	brne	.-4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	bf 90       	pop	r11
     45e:	af 90       	pop	r10
     460:	9f 90       	pop	r9
     462:	8f 90       	pop	r8
     464:	7f 90       	pop	r7
     466:	6f 90       	pop	r6
     468:	5f 90       	pop	r5
     46a:	4f 90       	pop	r4
     46c:	08 95       	ret

0000046e <_ZN4RF242ceEb>:
     46e:	fc 01       	movw	r30, r24
     470:	80 81       	ld	r24, Z
     472:	91 81       	ldd	r25, Z+1	; 0x01
     474:	22 81       	ldd	r18, Z+2	; 0x02
     476:	33 81       	ldd	r19, Z+3	; 0x03
     478:	82 17       	cp	r24, r18
     47a:	93 07       	cpc	r25, r19
     47c:	11 f0       	breq	.+4      	; 0x482 <_ZN4RF242ceEb+0x14>
     47e:	0e 94 9b 00 	call	0x136	; 0x136 <Write_Digital>
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <_ZN4RF242ceEb+0x18>
     48a:	08 95       	ret

0000048c <_ZN4RF2413read_registerEh>:
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	8c 01       	movw	r16, r24
     494:	c6 2f       	mov	r28, r22
     496:	80 e5       	ldi	r24, 0x50	; 80
     498:	8c bd       	out	0x2c, r24	; 44
     49a:	1d bc       	out	0x2d, r1	; 45
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	c8 01       	movw	r24, r16
     4a0:	0e 94 88 01 	call	0x310	; 0x310 <_ZN4RF243csnEb>
     4a4:	cf 71       	andi	r28, 0x1F	; 31
     4a6:	ce bd       	out	0x2e, r28	; 46
     4a8:	00 00       	nop
     4aa:	0d b4       	in	r0, 0x2d	; 45
     4ac:	07 fe       	sbrs	r0, 7
     4ae:	fd cf       	rjmp	.-6      	; 0x4aa <_ZN4RF2413read_registerEh+0x1e>
     4b0:	8e b5       	in	r24, 0x2e	; 46
     4b2:	8f ef       	ldi	r24, 0xFF	; 255
     4b4:	8e bd       	out	0x2e, r24	; 46
     4b6:	00 00       	nop
     4b8:	0d b4       	in	r0, 0x2d	; 45
     4ba:	07 fe       	sbrs	r0, 7
     4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <_ZN4RF2413read_registerEh+0x2c>
     4be:	ce b5       	in	r28, 0x2e	; 46
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	c8 01       	movw	r24, r16
     4c4:	0e 94 88 01 	call	0x310	; 0x310 <_ZN4RF243csnEb>
     4c8:	8c 2f       	mov	r24, r28
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	08 95       	ret

000004d2 <_ZN4RF2414write_registerEhPKhh>:
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	8c 01       	movw	r16, r24
     4e0:	c6 2f       	mov	r28, r22
     4e2:	e4 2e       	mov	r14, r20
     4e4:	f5 2e       	mov	r15, r21
     4e6:	d2 2f       	mov	r29, r18
     4e8:	80 e5       	ldi	r24, 0x50	; 80
     4ea:	8c bd       	out	0x2c, r24	; 44
     4ec:	1d bc       	out	0x2d, r1	; 45
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	c8 01       	movw	r24, r16
     4f2:	0e 94 88 01 	call	0x310	; 0x310 <_ZN4RF243csnEb>
     4f6:	cf 71       	andi	r28, 0x1F	; 31
     4f8:	c0 62       	ori	r28, 0x20	; 32
     4fa:	ce bd       	out	0x2e, r28	; 46
     4fc:	00 00       	nop
     4fe:	0d b4       	in	r0, 0x2d	; 45
     500:	07 fe       	sbrs	r0, 7
     502:	fd cf       	rjmp	.-6      	; 0x4fe <_ZN4RF2414write_registerEhPKhh+0x2c>
     504:	ce b5       	in	r28, 0x2e	; 46
     506:	8f ef       	ldi	r24, 0xFF	; 255
     508:	8d 0f       	add	r24, r29
     50a:	dd 23       	and	r29, r29
     50c:	59 f0       	breq	.+22     	; 0x524 <_ZN4RF2414write_registerEhPKhh+0x52>
     50e:	ee 2d       	mov	r30, r14
     510:	ff 2d       	mov	r31, r15
     512:	91 91       	ld	r25, Z+
     514:	9e bd       	out	0x2e, r25	; 46
     516:	00 00       	nop
     518:	0d b4       	in	r0, 0x2d	; 45
     51a:	07 fe       	sbrs	r0, 7
     51c:	fd cf       	rjmp	.-6      	; 0x518 <_ZN4RF2414write_registerEhPKhh+0x46>
     51e:	9e b5       	in	r25, 0x2e	; 46
     520:	81 50       	subi	r24, 0x01	; 1
     522:	b8 f7       	brcc	.-18     	; 0x512 <_ZN4RF2414write_registerEhPKhh+0x40>
     524:	61 e0       	ldi	r22, 0x01	; 1
     526:	c8 01       	movw	r24, r16
     528:	0e 94 88 01 	call	0x310	; 0x310 <_ZN4RF243csnEb>
     52c:	8c 2f       	mov	r24, r28
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
     536:	ff 90       	pop	r15
     538:	ef 90       	pop	r14
     53a:	08 95       	ret

0000053c <_ZN4RF2414write_registerEhh>:
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	8c 01       	movw	r16, r24
     546:	c6 2f       	mov	r28, r22
     548:	d4 2f       	mov	r29, r20
     54a:	80 e5       	ldi	r24, 0x50	; 80
     54c:	8c bd       	out	0x2c, r24	; 44
     54e:	1d bc       	out	0x2d, r1	; 45
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	c8 01       	movw	r24, r16
     554:	0e 94 88 01 	call	0x310	; 0x310 <_ZN4RF243csnEb>
     558:	cf 71       	andi	r28, 0x1F	; 31
     55a:	c0 62       	ori	r28, 0x20	; 32
     55c:	ce bd       	out	0x2e, r28	; 46
     55e:	00 00       	nop
     560:	0d b4       	in	r0, 0x2d	; 45
     562:	07 fe       	sbrs	r0, 7
     564:	fd cf       	rjmp	.-6      	; 0x560 <_ZN4RF2414write_registerEhh+0x24>
     566:	ce b5       	in	r28, 0x2e	; 46
     568:	de bd       	out	0x2e, r29	; 46
     56a:	00 00       	nop
     56c:	0d b4       	in	r0, 0x2d	; 45
     56e:	07 fe       	sbrs	r0, 7
     570:	fd cf       	rjmp	.-6      	; 0x56c <_ZN4RF2414write_registerEhh+0x30>
     572:	8e b5       	in	r24, 0x2e	; 46
     574:	61 e0       	ldi	r22, 0x01	; 1
     576:	c8 01       	movw	r24, r16
     578:	0e 94 88 01 	call	0x310	; 0x310 <_ZN4RF243csnEb>
     57c:	8c 2f       	mov	r24, r28
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	08 95       	ret

00000588 <_ZN4RF2413write_payloadEPKvhh>:
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	ec 01       	movw	r28, r24
     598:	d6 2e       	mov	r13, r22
     59a:	e7 2e       	mov	r14, r23
     59c:	f2 2e       	mov	r15, r18
     59e:	8f 81       	ldd	r24, Y+7	; 0x07
     5a0:	08 2f       	mov	r16, r24
     5a2:	48 17       	cp	r20, r24
     5a4:	08 f4       	brcc	.+2      	; 0x5a8 <_ZN4RF2413write_payloadEPKvhh+0x20>
     5a6:	04 2f       	mov	r16, r20
     5a8:	98 85       	ldd	r25, Y+8	; 0x08
     5aa:	91 11       	cpse	r25, r1
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <_ZN4RF2413write_payloadEPKvhh+0x2c>
     5ae:	18 2f       	mov	r17, r24
     5b0:	10 1b       	sub	r17, r16
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <_ZN4RF2413write_payloadEPKvhh+0x2e>
     5b4:	10 e0       	ldi	r17, 0x00	; 0
     5b6:	80 e5       	ldi	r24, 0x50	; 80
     5b8:	8c bd       	out	0x2c, r24	; 44
     5ba:	1d bc       	out	0x2d, r1	; 45
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	ce 01       	movw	r24, r28
     5c0:	0e 94 88 01 	call	0x310	; 0x310 <_ZN4RF243csnEb>
     5c4:	fe bc       	out	0x2e, r15	; 46
     5c6:	00 00       	nop
     5c8:	0d b4       	in	r0, 0x2d	; 45
     5ca:	07 fe       	sbrs	r0, 7
     5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <_ZN4RF2413write_payloadEPKvhh+0x40>
     5ce:	fe b4       	in	r15, 0x2e	; 46
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	80 0f       	add	r24, r16
     5d4:	01 11       	cpse	r16, r1
     5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <_ZN4RF2413write_payloadEPKvhh+0x5a>
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	81 0f       	add	r24, r17
     5dc:	11 11       	cpse	r17, r1
     5de:	0d c0       	rjmp	.+26     	; 0x5fa <_ZN4RF2413write_payloadEPKvhh+0x72>
     5e0:	14 c0       	rjmp	.+40     	; 0x60a <_ZN4RF2413write_payloadEPKvhh+0x82>
     5e2:	ed 2d       	mov	r30, r13
     5e4:	fe 2d       	mov	r31, r14
     5e6:	91 91       	ld	r25, Z+
     5e8:	9e bd       	out	0x2e, r25	; 46
     5ea:	00 00       	nop
     5ec:	0d b4       	in	r0, 0x2d	; 45
     5ee:	07 fe       	sbrs	r0, 7
     5f0:	fd cf       	rjmp	.-6      	; 0x5ec <_ZN4RF2413write_payloadEPKvhh+0x64>
     5f2:	9e b5       	in	r25, 0x2e	; 46
     5f4:	81 50       	subi	r24, 0x01	; 1
     5f6:	b8 f7       	brcc	.-18     	; 0x5e6 <_ZN4RF2413write_payloadEPKvhh+0x5e>
     5f8:	ef cf       	rjmp	.-34     	; 0x5d8 <_ZN4RF2413write_payloadEPKvhh+0x50>
     5fa:	1e bc       	out	0x2e, r1	; 46
     5fc:	00 00       	nop
     5fe:	0d b4       	in	r0, 0x2d	; 45
     600:	07 fe       	sbrs	r0, 7
     602:	fd cf       	rjmp	.-6      	; 0x5fe <_ZN4RF2413write_payloadEPKvhh+0x76>
     604:	9e b5       	in	r25, 0x2e	; 46
     606:	81 50       	subi	r24, 0x01	; 1
     608:	c0 f7       	brcc	.-16     	; 0x5fa <_ZN4RF2413write_payloadEPKvhh+0x72>
     60a:	61 e0       	ldi	r22, 0x01	; 1
     60c:	ce 01       	movw	r24, r28
     60e:	0e 94 88 01 	call	0x310	; 0x310 <_ZN4RF243csnEb>
     612:	8f 2d       	mov	r24, r15
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	08 95       	ret

00000624 <_ZN4RF248spiTransEh>:
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	ec 01       	movw	r28, r24
     62c:	16 2f       	mov	r17, r22
     62e:	80 e5       	ldi	r24, 0x50	; 80
     630:	8c bd       	out	0x2c, r24	; 44
     632:	1d bc       	out	0x2d, r1	; 45
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	ce 01       	movw	r24, r28
     638:	0e 94 88 01 	call	0x310	; 0x310 <_ZN4RF243csnEb>
     63c:	1e bd       	out	0x2e, r17	; 46
     63e:	00 00       	nop
     640:	0d b4       	in	r0, 0x2d	; 45
     642:	07 fe       	sbrs	r0, 7
     644:	fd cf       	rjmp	.-6      	; 0x640 <_ZN4RF248spiTransEh+0x1c>
     646:	1e b5       	in	r17, 0x2e	; 46
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	ce 01       	movw	r24, r28
     64c:	0e 94 88 01 	call	0x310	; 0x310 <_ZN4RF243csnEb>
     650:	81 2f       	mov	r24, r17
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	08 95       	ret

0000065a <_ZN4RF248flush_rxEv>:
     65a:	62 ee       	ldi	r22, 0xE2	; 226
     65c:	0e 94 12 03 	call	0x624	; 0x624 <_ZN4RF248spiTransEh>
     660:	08 95       	ret

00000662 <_ZN4RF248flush_txEv>:
     662:	61 ee       	ldi	r22, 0xE1	; 225
     664:	0e 94 12 03 	call	0x624	; 0x624 <_ZN4RF248spiTransEh>
     668:	08 95       	ret

0000066a <_ZN4RF2410get_statusEv>:
     66a:	6f ef       	ldi	r22, 0xFF	; 255
     66c:	0e 94 12 03 	call	0x624	; 0x624 <_ZN4RF248spiTransEh>
     670:	08 95       	ret

00000672 <_ZN4RF24C1Ejj>:
     672:	fc 01       	movw	r30, r24
     674:	71 83       	std	Z+1, r23	; 0x01
     676:	60 83       	st	Z, r22
     678:	53 83       	std	Z+3, r21	; 0x03
     67a:	42 83       	std	Z+2, r20	; 0x02
     67c:	16 82       	std	Z+6, r1	; 0x06
     67e:	80 e2       	ldi	r24, 0x20	; 32
     680:	87 83       	std	Z+7, r24	; 0x07
     682:	10 86       	std	Z+8, r1	; 0x08
     684:	85 e0       	ldi	r24, 0x05	; 5
     686:	86 87       	std	Z+14, r24	; 0x0e
     688:	85 e0       	ldi	r24, 0x05	; 5
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	a0 e0       	ldi	r26, 0x00	; 0
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	84 8b       	std	Z+20, r24	; 0x14
     692:	95 8b       	std	Z+21, r25	; 0x15
     694:	a6 8b       	std	Z+22, r26	; 0x16
     696:	b7 8b       	std	Z+23, r27	; 0x17
     698:	11 86       	std	Z+9, r1	; 0x09
     69a:	08 95       	ret

0000069c <_ZN4RF2410setChannelEh>:
     69c:	6d 37       	cpi	r22, 0x7D	; 125
     69e:	10 f4       	brcc	.+4      	; 0x6a4 <_ZN4RF2410setChannelEh+0x8>
     6a0:	46 2f       	mov	r20, r22
     6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <_ZN4RF2410setChannelEh+0xa>
     6a4:	4d e7       	ldi	r20, 0x7D	; 125
     6a6:	65 e0       	ldi	r22, 0x05	; 5
     6a8:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>
     6ac:	08 95       	ret

000006ae <_ZN4RF2413stopListeningEv>:
     6ae:	4f 92       	push	r4
     6b0:	5f 92       	push	r5
     6b2:	6f 92       	push	r6
     6b4:	7f 92       	push	r7
     6b6:	8f 92       	push	r8
     6b8:	9f 92       	push	r9
     6ba:	af 92       	push	r10
     6bc:	bf 92       	push	r11
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	ec 01       	movw	r28, r24
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	0e 94 37 02 	call	0x46e	; 0x46e <_ZN4RF242ceEb>
     6d6:	68 89       	ldd	r22, Y+16	; 0x10
     6d8:	79 89       	ldd	r23, Y+17	; 0x11
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	9b 89       	ldd	r25, Y+19	; 0x13
     6de:	0e 94 48 07 	call	0xe90	; 0xe90 <__floatunsisf>
     6e2:	6b 01       	movw	r12, r22
     6e4:	7c 01       	movw	r14, r24
     6e6:	2b ea       	ldi	r18, 0xAB	; 171
     6e8:	3a ea       	ldi	r19, 0xAA	; 170
     6ea:	4a e2       	ldi	r20, 0x2A	; 42
     6ec:	50 e4       	ldi	r21, 0x40	; 64
     6ee:	0e 94 ff 07 	call	0xffe	; 0xffe <__mulsf3>
     6f2:	4b 01       	movw	r8, r22
     6f4:	5c 01       	movw	r10, r24
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e8       	ldi	r20, 0x80	; 128
     6fc:	5f e3       	ldi	r21, 0x3F	; 63
     6fe:	0e 94 a2 06 	call	0xd44	; 0xd44 <__cmpsf2>
     702:	88 23       	and	r24, r24
     704:	0c f4       	brge	.+2      	; 0x708 <_ZN4RF2413stopListeningEv+0x5a>
     706:	6e c0       	rjmp	.+220    	; 0x7e4 <_ZN4RF2413stopListeningEv+0x136>
     708:	a7 01       	movw	r20, r14
     70a:	96 01       	movw	r18, r12
     70c:	c7 01       	movw	r24, r14
     70e:	b6 01       	movw	r22, r12
     710:	0e 94 36 06 	call	0xc6c	; 0xc6c <__addsf3>
     714:	2b 01       	movw	r4, r22
     716:	3c 01       	movw	r6, r24
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	3f ef       	ldi	r19, 0xFF	; 255
     71c:	4f e7       	ldi	r20, 0x7F	; 127
     71e:	57 e4       	ldi	r21, 0x47	; 71
     720:	0e 94 fa 07 	call	0xff4	; 0xff4 <__gesf2>
     724:	18 16       	cp	r1, r24
     726:	0c f0       	brlt	.+2      	; 0x72a <_ZN4RF2413stopListeningEv+0x7c>
     728:	45 c0       	rjmp	.+138    	; 0x7b4 <_ZN4RF2413stopListeningEv+0x106>
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	4a e7       	ldi	r20, 0x7A	; 122
     730:	54 e4       	ldi	r21, 0x44	; 68
     732:	c7 01       	movw	r24, r14
     734:	b6 01       	movw	r22, r12
     736:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__divsf3>
     73a:	4b 01       	movw	r8, r22
     73c:	5c 01       	movw	r10, r24
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	4a ef       	ldi	r20, 0xFA	; 250
     744:	54 e4       	ldi	r21, 0x44	; 68
     746:	0e 94 ff 07 	call	0xffe	; 0xffe <__mulsf3>
     74a:	6b 01       	movw	r12, r22
     74c:	7c 01       	movw	r14, r24
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e8       	ldi	r20, 0x80	; 128
     754:	5f e3       	ldi	r21, 0x3F	; 63
     756:	0e 94 a2 06 	call	0xd44	; 0xd44 <__cmpsf2>
     75a:	88 23       	and	r24, r24
     75c:	2c f1       	brlt	.+74     	; 0x7a8 <_ZN4RF2413stopListeningEv+0xfa>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	3f ef       	ldi	r19, 0xFF	; 255
     762:	4f e7       	ldi	r20, 0x7F	; 127
     764:	57 e4       	ldi	r21, 0x47	; 71
     766:	c7 01       	movw	r24, r14
     768:	b6 01       	movw	r22, r12
     76a:	0e 94 fa 07 	call	0xff4	; 0xff4 <__gesf2>
     76e:	18 16       	cp	r1, r24
     770:	b4 f4       	brge	.+44     	; 0x79e <_ZN4RF2413stopListeningEv+0xf0>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	c5 01       	movw	r24, r10
     77c:	b4 01       	movw	r22, r8
     77e:	0e 94 ff 07 	call	0xffe	; 0xffe <__mulsf3>
     782:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     786:	61 15       	cp	r22, r1
     788:	71 05       	cpc	r23, r1
     78a:	69 f1       	breq	.+90     	; 0x7e6 <_ZN4RF2413stopListeningEv+0x138>
     78c:	28 ec       	ldi	r18, 0xC8	; 200
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	c9 01       	movw	r24, r18
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <_ZN4RF2413stopListeningEv+0xe4>
     796:	61 50       	subi	r22, 0x01	; 1
     798:	71 09       	sbc	r23, r1
     79a:	d1 f7       	brne	.-12     	; 0x790 <_ZN4RF2413stopListeningEv+0xe2>
     79c:	24 c0       	rjmp	.+72     	; 0x7e6 <_ZN4RF2413stopListeningEv+0x138>
     79e:	c7 01       	movw	r24, r14
     7a0:	b6 01       	movw	r22, r12
     7a2:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <_ZN4RF2413stopListeningEv+0xfe>
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	cb 01       	movw	r24, r22
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <_ZN4RF2413stopListeningEv+0x100>
     7b2:	19 c0       	rjmp	.+50     	; 0x7e6 <_ZN4RF2413stopListeningEv+0x138>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	4f e7       	ldi	r20, 0x7F	; 127
     7ba:	53 e4       	ldi	r21, 0x43	; 67
     7bc:	c5 01       	movw	r24, r10
     7be:	b4 01       	movw	r22, r8
     7c0:	0e 94 fa 07 	call	0xff4	; 0xff4 <__gesf2>
     7c4:	18 16       	cp	r1, r24
     7c6:	44 f4       	brge	.+16     	; 0x7d8 <_ZN4RF2413stopListeningEv+0x12a>
     7c8:	c3 01       	movw	r24, r6
     7ca:	b2 01       	movw	r22, r4
     7cc:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     7d0:	cb 01       	movw	r24, r22
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <_ZN4RF2413stopListeningEv+0x124>
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <_ZN4RF2413stopListeningEv+0x13c>
     7d8:	c5 01       	movw	r24, r10
     7da:	b4 01       	movw	r22, r8
     7dc:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     7e0:	16 2f       	mov	r17, r22
     7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <_ZN4RF2413stopListeningEv+0x138>
     7e4:	11 e0       	ldi	r17, 0x01	; 1
     7e6:	1a 95       	dec	r17
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <_ZN4RF2413stopListeningEv+0x138>
     7ea:	6d e1       	ldi	r22, 0x1D	; 29
     7ec:	ce 01       	movw	r24, r28
     7ee:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN4RF2413read_registerEh>
     7f2:	81 ff       	sbrs	r24, 1
     7f4:	8d c0       	rjmp	.+282    	; 0x910 <__stack+0x11>
     7f6:	68 89       	ldd	r22, Y+16	; 0x10
     7f8:	79 89       	ldd	r23, Y+17	; 0x11
     7fa:	8a 89       	ldd	r24, Y+18	; 0x12
     7fc:	9b 89       	ldd	r25, Y+19	; 0x13
     7fe:	0e 94 48 07 	call	0xe90	; 0xe90 <__floatunsisf>
     802:	6b 01       	movw	r12, r22
     804:	7c 01       	movw	r14, r24
     806:	2b ea       	ldi	r18, 0xAB	; 171
     808:	3a ea       	ldi	r19, 0xAA	; 170
     80a:	4a e2       	ldi	r20, 0x2A	; 42
     80c:	50 e4       	ldi	r21, 0x40	; 64
     80e:	0e 94 ff 07 	call	0xffe	; 0xffe <__mulsf3>
     812:	4b 01       	movw	r8, r22
     814:	5c 01       	movw	r10, r24
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e8       	ldi	r20, 0x80	; 128
     81c:	5f e3       	ldi	r21, 0x3F	; 63
     81e:	0e 94 a2 06 	call	0xd44	; 0xd44 <__cmpsf2>
     822:	88 23       	and	r24, r24
     824:	0c f4       	brge	.+2      	; 0x828 <_ZN4RF2413stopListeningEv+0x17a>
     826:	6e c0       	rjmp	.+220    	; 0x904 <__stack+0x5>
     828:	a7 01       	movw	r20, r14
     82a:	96 01       	movw	r18, r12
     82c:	c7 01       	movw	r24, r14
     82e:	b6 01       	movw	r22, r12
     830:	0e 94 36 06 	call	0xc6c	; 0xc6c <__addsf3>
     834:	2b 01       	movw	r4, r22
     836:	3c 01       	movw	r6, r24
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	3f ef       	ldi	r19, 0xFF	; 255
     83c:	4f e7       	ldi	r20, 0x7F	; 127
     83e:	57 e4       	ldi	r21, 0x47	; 71
     840:	0e 94 fa 07 	call	0xff4	; 0xff4 <__gesf2>
     844:	18 16       	cp	r1, r24
     846:	0c f0       	brlt	.+2      	; 0x84a <_ZN4RF2413stopListeningEv+0x19c>
     848:	45 c0       	rjmp	.+138    	; 0x8d4 <_ZN4RF2413stopListeningEv+0x226>
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	4a e7       	ldi	r20, 0x7A	; 122
     850:	54 e4       	ldi	r21, 0x44	; 68
     852:	c7 01       	movw	r24, r14
     854:	b6 01       	movw	r22, r12
     856:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__divsf3>
     85a:	4b 01       	movw	r8, r22
     85c:	5c 01       	movw	r10, r24
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	4a ef       	ldi	r20, 0xFA	; 250
     864:	54 e4       	ldi	r21, 0x44	; 68
     866:	0e 94 ff 07 	call	0xffe	; 0xffe <__mulsf3>
     86a:	6b 01       	movw	r12, r22
     86c:	7c 01       	movw	r14, r24
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e8       	ldi	r20, 0x80	; 128
     874:	5f e3       	ldi	r21, 0x3F	; 63
     876:	0e 94 a2 06 	call	0xd44	; 0xd44 <__cmpsf2>
     87a:	88 23       	and	r24, r24
     87c:	2c f1       	brlt	.+74     	; 0x8c8 <_ZN4RF2413stopListeningEv+0x21a>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	3f ef       	ldi	r19, 0xFF	; 255
     882:	4f e7       	ldi	r20, 0x7F	; 127
     884:	57 e4       	ldi	r21, 0x47	; 71
     886:	c7 01       	movw	r24, r14
     888:	b6 01       	movw	r22, r12
     88a:	0e 94 fa 07 	call	0xff4	; 0xff4 <__gesf2>
     88e:	18 16       	cp	r1, r24
     890:	b4 f4       	brge	.+44     	; 0x8be <_ZN4RF2413stopListeningEv+0x210>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e2       	ldi	r20, 0x20	; 32
     898:	51 e4       	ldi	r21, 0x41	; 65
     89a:	c5 01       	movw	r24, r10
     89c:	b4 01       	movw	r22, r8
     89e:	0e 94 ff 07 	call	0xffe	; 0xffe <__mulsf3>
     8a2:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     8a6:	61 15       	cp	r22, r1
     8a8:	71 05       	cpc	r23, r1
     8aa:	69 f1       	breq	.+90     	; 0x906 <__stack+0x7>
     8ac:	28 ec       	ldi	r18, 0xC8	; 200
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	c9 01       	movw	r24, r18
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <_ZN4RF2413stopListeningEv+0x204>
     8b6:	61 50       	subi	r22, 0x01	; 1
     8b8:	71 09       	sbc	r23, r1
     8ba:	d1 f7       	brne	.-12     	; 0x8b0 <_ZN4RF2413stopListeningEv+0x202>
     8bc:	24 c0       	rjmp	.+72     	; 0x906 <__stack+0x7>
     8be:	c7 01       	movw	r24, r14
     8c0:	b6 01       	movw	r22, r12
     8c2:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <_ZN4RF2413stopListeningEv+0x21e>
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	cb 01       	movw	r24, r22
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <_ZN4RF2413stopListeningEv+0x220>
     8d2:	19 c0       	rjmp	.+50     	; 0x906 <__stack+0x7>
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	4f e7       	ldi	r20, 0x7F	; 127
     8da:	53 e4       	ldi	r21, 0x43	; 67
     8dc:	c5 01       	movw	r24, r10
     8de:	b4 01       	movw	r22, r8
     8e0:	0e 94 fa 07 	call	0xff4	; 0xff4 <__gesf2>
     8e4:	18 16       	cp	r1, r24
     8e6:	44 f4       	brge	.+16     	; 0x8f8 <_ZN4RF2413stopListeningEv+0x24a>
     8e8:	c3 01       	movw	r24, r6
     8ea:	b2 01       	movw	r22, r4
     8ec:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     8f0:	cb 01       	movw	r24, r22
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <_ZN4RF2413stopListeningEv+0x244>
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__stack+0xb>
     8f8:	c5 01       	movw	r24, r10
     8fa:	b4 01       	movw	r22, r8
     8fc:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixunssfsi>
     900:	06 2f       	mov	r16, r22
     902:	01 c0       	rjmp	.+2      	; 0x906 <__stack+0x7>
     904:	01 e0       	ldi	r16, 0x01	; 1
     906:	0a 95       	dec	r16
     908:	f1 f7       	brne	.-4      	; 0x906 <__stack+0x7>
     90a:	ce 01       	movw	r24, r28
     90c:	0e 94 31 03 	call	0x662	; 0x662 <_ZN4RF248flush_txEv>
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	ce 01       	movw	r24, r28
     914:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN4RF2413read_registerEh>
     918:	48 2f       	mov	r20, r24
     91a:	4e 7f       	andi	r20, 0xFE	; 254
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	ce 01       	movw	r24, r28
     920:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>
     924:	62 e0       	ldi	r22, 0x02	; 2
     926:	ce 01       	movw	r24, r28
     928:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN4RF2413read_registerEh>
     92c:	48 2f       	mov	r20, r24
     92e:	41 60       	ori	r20, 0x01	; 1
     930:	62 e0       	ldi	r22, 0x02	; 2
     932:	ce 01       	movw	r24, r28
     934:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	af 90       	pop	r10
     94c:	9f 90       	pop	r9
     94e:	8f 90       	pop	r8
     950:	7f 90       	pop	r7
     952:	6f 90       	pop	r6
     954:	5f 90       	pop	r5
     956:	4f 90       	pop	r4
     958:	08 95       	ret

0000095a <_ZN4RF249powerDownEv>:
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	0e 94 37 02 	call	0x46e	; 0x46e <_ZN4RF242ceEb>
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	ce 01       	movw	r24, r28
     96a:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN4RF2413read_registerEh>
     96e:	48 2f       	mov	r20, r24
     970:	4d 7f       	andi	r20, 0xFD	; 253
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	ce 01       	movw	r24, r28
     976:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <_ZN4RF247powerUpEv>:
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN4RF2413read_registerEh>
     98c:	81 fd       	sbrc	r24, 1
     98e:	0a c0       	rjmp	.+20     	; 0x9a4 <_ZN4RF247powerUpEv+0x24>
     990:	48 2f       	mov	r20, r24
     992:	42 60       	ori	r20, 0x02	; 2
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	ce 01       	movw	r24, r28
     998:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>
     99c:	80 e1       	ldi	r24, 0x10	; 16
     99e:	97 e2       	ldi	r25, 0x27	; 39
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	f1 f7       	brne	.-4      	; 0x9a0 <_ZN4RF247powerUpEv+0x20>
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <_ZN4RF2414startFastWriteEPKvhbb>:
     9aa:	0f 93       	push	r16
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
     9b2:	21 11       	cpse	r18, r1
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <_ZN4RF2414startFastWriteEPKvhbb+0x10>
     9b6:	20 ea       	ldi	r18, 0xA0	; 160
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <_ZN4RF2414startFastWriteEPKvhbb+0x12>
     9ba:	20 eb       	ldi	r18, 0xB0	; 176
     9bc:	ce 01       	movw	r24, r28
     9be:	0e 94 c4 02 	call	0x588	; 0x588 <_ZN4RF2413write_payloadEPKvhh>
     9c2:	00 23       	and	r16, r16
     9c4:	21 f0       	breq	.+8      	; 0x9ce <_ZN4RF2414startFastWriteEPKvhbb+0x24>
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	ce 01       	movw	r24, r28
     9ca:	0e 94 37 02 	call	0x46e	; 0x46e <_ZN4RF242ceEb>
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	0f 91       	pop	r16
     9d4:	08 95       	ret

000009d6 <_ZN4RF245writeEPKvhb>:
     9d6:	0f 93       	push	r16
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	ec 01       	movw	r28, r24
     9de:	01 e0       	ldi	r16, 0x01	; 1
     9e0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_ZN4RF2414startFastWriteEPKvhbb>
     9e4:	ce 01       	movw	r24, r28
     9e6:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN4RF2410get_statusEv>
     9ea:	80 73       	andi	r24, 0x30	; 48
     9ec:	d9 f3       	breq	.-10     	; 0x9e4 <_ZN4RF245writeEPKvhb+0xe>
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	ce 01       	movw	r24, r28
     9f2:	0e 94 37 02 	call	0x46e	; 0x46e <_ZN4RF242ceEb>
     9f6:	40 e7       	ldi	r20, 0x70	; 112
     9f8:	67 e0       	ldi	r22, 0x07	; 7
     9fa:	ce 01       	movw	r24, r28
     9fc:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>
     a00:	84 ff       	sbrs	r24, 4
     a02:	05 c0       	rjmp	.+10     	; 0xa0e <_ZN4RF245writeEPKvhb+0x38>
     a04:	ce 01       	movw	r24, r28
     a06:	0e 94 31 03 	call	0x662	; 0x662 <_ZN4RF248flush_txEv>
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	01 c0       	rjmp	.+2      	; 0xa10 <_ZN4RF245writeEPKvhb+0x3a>
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	0f 91       	pop	r16
     a16:	08 95       	ret

00000a18 <_ZN4RF245writeEPKvh>:
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN4RF245writeEPKvhb>
     a1e:	08 95       	ret

00000a20 <_ZN4RF2415openWritingPipeEy>:
     a20:	ef 92       	push	r14
     a22:	ff 92       	push	r15
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
     a30:	28 97       	sbiw	r28, 0x08	; 8
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	de bf       	out	0x3e, r29	; 62
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	cd bf       	out	0x3d, r28	; 61
     a3c:	7c 01       	movw	r14, r24
     a3e:	09 83       	std	Y+1, r16	; 0x01
     a40:	1a 83       	std	Y+2, r17	; 0x02
     a42:	2b 83       	std	Y+3, r18	; 0x03
     a44:	3c 83       	std	Y+4, r19	; 0x04
     a46:	4d 83       	std	Y+5, r20	; 0x05
     a48:	5e 83       	std	Y+6, r21	; 0x06
     a4a:	6f 83       	std	Y+7, r22	; 0x07
     a4c:	78 87       	std	Y+8, r23	; 0x08
     a4e:	fc 01       	movw	r30, r24
     a50:	26 85       	ldd	r18, Z+14	; 0x0e
     a52:	ae 01       	movw	r20, r28
     a54:	4f 5f       	subi	r20, 0xFF	; 255
     a56:	5f 4f       	sbci	r21, 0xFF	; 255
     a58:	6a e0       	ldi	r22, 0x0A	; 10
     a5a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <_ZN4RF2414write_registerEhPKhh>
     a5e:	f7 01       	movw	r30, r14
     a60:	26 85       	ldd	r18, Z+14	; 0x0e
     a62:	ae 01       	movw	r20, r28
     a64:	4f 5f       	subi	r20, 0xFF	; 255
     a66:	5f 4f       	sbci	r21, 0xFF	; 255
     a68:	60 e1       	ldi	r22, 0x10	; 16
     a6a:	c7 01       	movw	r24, r14
     a6c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <_ZN4RF2414write_registerEhPKhh>
     a70:	f7 01       	movw	r30, r14
     a72:	47 81       	ldd	r20, Z+7	; 0x07
     a74:	61 e1       	ldi	r22, 0x11	; 17
     a76:	c7 01       	movw	r24, r14
     a78:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>
     a7c:	28 96       	adiw	r28, 0x08	; 8
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	08 95       	ret

00000a96 <_ZN4RF2415toggle_featuresEv>:
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	ec 01       	movw	r28, r24
     a9e:	10 e5       	ldi	r17, 0x50	; 80
     aa0:	1c bd       	out	0x2c, r17	; 44
     aa2:	1d bc       	out	0x2d, r1	; 45
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	0e 94 88 01 	call	0x310	; 0x310 <_ZN4RF243csnEb>
     aaa:	1e bd       	out	0x2e, r17	; 46
     aac:	00 00       	nop
     aae:	0d b4       	in	r0, 0x2d	; 45
     ab0:	07 fe       	sbrs	r0, 7
     ab2:	fd cf       	rjmp	.-6      	; 0xaae <_ZN4RF2415toggle_featuresEv+0x18>
     ab4:	8e b5       	in	r24, 0x2e	; 46
     ab6:	83 e7       	ldi	r24, 0x73	; 115
     ab8:	8e bd       	out	0x2e, r24	; 46
     aba:	00 00       	nop
     abc:	0d b4       	in	r0, 0x2d	; 45
     abe:	07 fe       	sbrs	r0, 7
     ac0:	fd cf       	rjmp	.-6      	; 0xabc <_ZN4RF2415toggle_featuresEv+0x26>
     ac2:	8e b5       	in	r24, 0x2e	; 46
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	ce 01       	movw	r24, r28
     ac8:	0e 94 88 01 	call	0x310	; 0x310 <_ZN4RF243csnEb>
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	08 95       	ret

00000ad4 <_ZN4RF2411setDataRateE15rf24_datarate_e>:

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	ec 01       	movw	r28, r24
     ade:	06 2f       	mov	r16, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     ae0:	66 e0       	ldi	r22, 0x06	; 6
     ae2:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     ae6:	18 2f       	mov	r17, r24
     ae8:	17 7d       	andi	r17, 0xD7	; 215
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
  //#endif
  if( speed == RF24_250KBPS )
     aea:	02 30       	cpi	r16, 0x02	; 2
     aec:	51 f4       	brne	.+20     	; 0xb02 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2e>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
     aee:	10 62       	ori	r17, 0x20	; 32
 /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=450;
  #else //16Mhz Arduino*/
	txDelay=155;
     af0:	8b e9       	ldi	r24, 0x9B	; 155
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	a0 e0       	ldi	r26, 0x00	; 0
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	88 8b       	std	Y+16, r24	; 0x10
     afa:	99 8b       	std	Y+17, r25	; 0x11
     afc:	aa 8b       	std	Y+18, r26	; 0x12
     afe:	bb 8b       	std	Y+19, r27	; 0x13
     b00:	14 c0       	rjmp	.+40     	; 0xb2a <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     b02:	01 30       	cpi	r16, 0x01	; 1
     b04:	49 f0       	breq	.+18     	; 0xb18 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
/*  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
     b06:	85 e5       	ldi	r24, 0x55	; 85
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	a0 e0       	ldi	r26, 0x00	; 0
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	88 8b       	std	Y+16, r24	; 0x10
     b10:	99 8b       	std	Y+17, r25	; 0x11
     b12:	aa 8b       	std	Y+18, r26	; 0x12
     b14:	bb 8b       	std	Y+19, r27	; 0x13
     b16:	09 c0       	rjmp	.+18     	; 0xb2a <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
     b18:	18 60       	ori	r17, 0x08	; 8
     /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txDelay=190;
      #else //16Mhz Arduino	*/  
	 txDelay=65;
     b1a:	81 e4       	ldi	r24, 0x41	; 65
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	88 8b       	std	Y+16, r24	; 0x10
     b24:	99 8b       	std	Y+17, r25	; 0x11
     b26:	aa 8b       	std	Y+18, r26	; 0x12
     b28:	bb 8b       	std	Y+19, r27	; 0x13
	  //#endif
    }
  }
  write_register(RF_SETUP,setup);
     b2a:	41 2f       	mov	r20, r17
     b2c:	66 e0       	ldi	r22, 0x06	; 6
     b2e:	ce 01       	movw	r24, r28
     b30:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     b34:	66 e0       	ldi	r22, 0x06	; 6
     b36:	ce 01       	movw	r24, r28
     b38:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN4RF2413read_registerEh>
  {
    result = true;
  }
  return result;
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	18 13       	cpse	r17, r24
     b40:	90 e0       	ldi	r25, 0x00	; 0
}
     b42:	89 2f       	mov	r24, r25
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	08 95       	ret

00000b4e <_ZN4RF245beginEv>:
}

/****************************************************************************/

bool RF24::begin(void)
{
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	ec 01       	movw	r28, r24
  uint8_t setup=0;

    if (ce_pin != csn_pin) Set_pin(ce_pin,OUT);  
     b56:	88 81       	ld	r24, Y
     b58:	99 81       	ldd	r25, Y+1	; 0x01
     b5a:	2a 81       	ldd	r18, Y+2	; 0x02
     b5c:	3b 81       	ldd	r19, Y+3	; 0x03
     b5e:	82 17       	cp	r24, r18
     b60:	93 07       	cpc	r25, r19
     b62:	21 f0       	breq	.+8      	; 0xb6c <_ZN4RF245beginEv+0x1e>
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
        Set_pin(csn_pin,OUT);
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	9b 81       	ldd	r25, Y+3	; 0x03
     b74:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
    _SPI.begin();
     b78:	0e 94 1c 06 	call	0xc38	; 0xc38 <_ZN8SPIClass5beginEv>
    ce(low);
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	ce 01       	movw	r24, r28
     b80:	0e 94 37 02 	call	0x46e	; 0x46e <_ZN4RF242ceEb>
  	csn(high);
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	ce 01       	movw	r24, r28
     b88:	0e 94 88 01 	call	0x310	; 0x310 <_ZN4RF243csnEb>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     b8c:	80 e1       	ldi	r24, 0x10	; 16
     b8e:	97 e2       	ldi	r25, 0x27	; 39
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	f1 f7       	brne	.-4      	; 0xb90 <_ZN4RF245beginEv+0x42>
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: _delay_ms is based on P-variant whereby non-P *may* require different timing.
  _delay_ms( 5 ) ;

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;
     b94:	4c e0       	ldi	r20, 0x0C	; 12
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	ce 01       	movw	r24, r28
     b9a:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     b9e:	4f e5       	ldi	r20, 0x5F	; 95
     ba0:	64 e0       	ldi	r22, 0x04	; 4
     ba2:	ce 01       	movw	r24, r28
     ba4:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
     ba8:	62 e0       	ldi	r22, 0x02	; 2
     baa:	ce 01       	movw	r24, r28
     bac:	0e 94 6a 05 	call	0xad4	; 0xad4 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     bb0:	88 23       	and	r24, r24
     bb2:	11 f0       	breq	.+4      	; 0xbb8 <_ZN4RF245beginEv+0x6a>
  {
    p_variant = true ;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8e 83       	std	Y+6, r24	; 0x06
  }
  setup = read_register(RF_SETUP);
     bb8:	66 e0       	ldi	r22, 0x06	; 6
     bba:	ce 01       	movw	r24, r28
     bbc:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN4RF2413read_registerEh>
     bc0:	18 2f       	mov	r17, r24
 if( setup == 0b00001110 )     // register default for nRF24L01P
     bc2:	8e 30       	cpi	r24, 0x0E	; 14
     bc4:	11 f4       	brne	.+4      	; 0xbca <_ZN4RF245beginEv+0x7c>
  {
    p_variant = true ;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	8e 83       	std	Y+6, r24	; 0x06
  }
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	ce 01       	movw	r24, r28
     bce:	0e 94 6a 05 	call	0xad4	; 0xad4 <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
     bd2:	ce 01       	movw	r24, r28
     bd4:	0e 94 4b 05 	call	0xa96	; 0xa96 <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
     bd8:	40 e0       	ldi	r20, 0x00	; 0
     bda:	6d e1       	ldi	r22, 0x1D	; 29
     bdc:	ce 01       	movw	r24, r28
     bde:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	6c e1       	ldi	r22, 0x1C	; 28
     be6:	ce 01       	movw	r24, r28
     be8:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>
  dynamic_payloads_enabled = false;
     bec:	18 86       	std	Y+8, r1	; 0x08

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     bee:	40 e7       	ldi	r20, 0x70	; 112
     bf0:	67 e0       	ldi	r22, 0x07	; 7
     bf2:	ce 01       	movw	r24, r28
     bf4:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
     bf8:	6c e4       	ldi	r22, 0x4C	; 76
     bfa:	ce 01       	movw	r24, r28
     bfc:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
     c00:	ce 01       	movw	r24, r28
     c02:	0e 94 2d 03 	call	0x65a	; 0x65a <_ZN4RF248flush_rxEv>
  flush_tx();
     c06:	ce 01       	movw	r24, r28
     c08:	0e 94 31 03 	call	0x662	; 0x662 <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
     c0c:	ce 01       	movw	r24, r28
     c0e:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	ce 01       	movw	r24, r28
     c16:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN4RF2413read_registerEh>
     c1a:	48 2f       	mov	r20, r24
     c1c:	4e 7f       	andi	r20, 0xFE	; 254
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	ce 01       	movw	r24, r28
     c22:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
     c26:	11 50       	subi	r17, 0x01	; 1
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	1e 3f       	cpi	r17, 0xFE	; 254
     c2c:	08 f0       	brcs	.+2      	; 0xc30 <_ZN4RF245beginEv+0xe2>
     c2e:	80 e0       	ldi	r24, 0x00	; 0
}
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	08 95       	ret

00000c38 <_ZN8SPIClass5beginEv>:
void SPIClass::begin()
{
 //  cli();//noInterrupts(); // Protect from a scheduler and prevent transactionBegin
 
    
    Set_pin(SS, OUT);
     c38:	61 e0       	ldi	r22, 0x01	; 1
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	8a e0       	ldi	r24, 0x0A	; 10
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUT.
    SPCR |= _BV(MSTR);
     c44:	8c b5       	in	r24, 0x2c	; 44
     c46:	80 61       	ori	r24, 0x10	; 16
     c48:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     c4a:	8c b5       	in	r24, 0x2c	; 44
     c4c:	80 64       	ori	r24, 0x40	; 64
     c4e:	8c bd       	out	0x2c, r24	; 44
    // Set direction register for SCK and MOSI pin.
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    Set_pin(SCK, OUT);
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	8d e0       	ldi	r24, 0x0D	; 13
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
    Set_pin(MOSI, OUT);
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	8b e0       	ldi	r24, 0x0B	; 11
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
     c68:	08 95       	ret

00000c6a <__subsf3>:
     c6a:	50 58       	subi	r21, 0x80	; 128

00000c6c <__addsf3>:
     c6c:	bb 27       	eor	r27, r27
     c6e:	aa 27       	eor	r26, r26
     c70:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__addsf3x>
     c74:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__fp_round>
     c78:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_pscA>
     c7c:	38 f0       	brcs	.+14     	; 0xc8c <__addsf3+0x20>
     c7e:	0e 94 b9 07 	call	0xf72	; 0xf72 <__fp_pscB>
     c82:	20 f0       	brcs	.+8      	; 0xc8c <__addsf3+0x20>
     c84:	39 f4       	brne	.+14     	; 0xc94 <__addsf3+0x28>
     c86:	9f 3f       	cpi	r25, 0xFF	; 255
     c88:	19 f4       	brne	.+6      	; 0xc90 <__addsf3+0x24>
     c8a:	26 f4       	brtc	.+8      	; 0xc94 <__addsf3+0x28>
     c8c:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__fp_nan>
     c90:	0e f4       	brtc	.+2      	; 0xc94 <__addsf3+0x28>
     c92:	e0 95       	com	r30
     c94:	e7 fb       	bst	r30, 7
     c96:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__fp_inf>

00000c9a <__addsf3x>:
     c9a:	e9 2f       	mov	r30, r25
     c9c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__fp_split3>
     ca0:	58 f3       	brcs	.-42     	; 0xc78 <__addsf3+0xc>
     ca2:	ba 17       	cp	r27, r26
     ca4:	62 07       	cpc	r22, r18
     ca6:	73 07       	cpc	r23, r19
     ca8:	84 07       	cpc	r24, r20
     caa:	95 07       	cpc	r25, r21
     cac:	20 f0       	brcs	.+8      	; 0xcb6 <__addsf3x+0x1c>
     cae:	79 f4       	brne	.+30     	; 0xcce <__addsf3x+0x34>
     cb0:	a6 f5       	brtc	.+104    	; 0xd1a <__addsf3x+0x80>
     cb2:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_zero>
     cb6:	0e f4       	brtc	.+2      	; 0xcba <__addsf3x+0x20>
     cb8:	e0 95       	com	r30
     cba:	0b 2e       	mov	r0, r27
     cbc:	ba 2f       	mov	r27, r26
     cbe:	a0 2d       	mov	r26, r0
     cc0:	0b 01       	movw	r0, r22
     cc2:	b9 01       	movw	r22, r18
     cc4:	90 01       	movw	r18, r0
     cc6:	0c 01       	movw	r0, r24
     cc8:	ca 01       	movw	r24, r20
     cca:	a0 01       	movw	r20, r0
     ccc:	11 24       	eor	r1, r1
     cce:	ff 27       	eor	r31, r31
     cd0:	59 1b       	sub	r21, r25
     cd2:	99 f0       	breq	.+38     	; 0xcfa <__addsf3x+0x60>
     cd4:	59 3f       	cpi	r21, 0xF9	; 249
     cd6:	50 f4       	brcc	.+20     	; 0xcec <__addsf3x+0x52>
     cd8:	50 3e       	cpi	r21, 0xE0	; 224
     cda:	68 f1       	brcs	.+90     	; 0xd36 <__addsf3x+0x9c>
     cdc:	1a 16       	cp	r1, r26
     cde:	f0 40       	sbci	r31, 0x00	; 0
     ce0:	a2 2f       	mov	r26, r18
     ce2:	23 2f       	mov	r18, r19
     ce4:	34 2f       	mov	r19, r20
     ce6:	44 27       	eor	r20, r20
     ce8:	58 5f       	subi	r21, 0xF8	; 248
     cea:	f3 cf       	rjmp	.-26     	; 0xcd2 <__addsf3x+0x38>
     cec:	46 95       	lsr	r20
     cee:	37 95       	ror	r19
     cf0:	27 95       	ror	r18
     cf2:	a7 95       	ror	r26
     cf4:	f0 40       	sbci	r31, 0x00	; 0
     cf6:	53 95       	inc	r21
     cf8:	c9 f7       	brne	.-14     	; 0xcec <__addsf3x+0x52>
     cfa:	7e f4       	brtc	.+30     	; 0xd1a <__addsf3x+0x80>
     cfc:	1f 16       	cp	r1, r31
     cfe:	ba 0b       	sbc	r27, r26
     d00:	62 0b       	sbc	r22, r18
     d02:	73 0b       	sbc	r23, r19
     d04:	84 0b       	sbc	r24, r20
     d06:	ba f0       	brmi	.+46     	; 0xd36 <__addsf3x+0x9c>
     d08:	91 50       	subi	r25, 0x01	; 1
     d0a:	a1 f0       	breq	.+40     	; 0xd34 <__addsf3x+0x9a>
     d0c:	ff 0f       	add	r31, r31
     d0e:	bb 1f       	adc	r27, r27
     d10:	66 1f       	adc	r22, r22
     d12:	77 1f       	adc	r23, r23
     d14:	88 1f       	adc	r24, r24
     d16:	c2 f7       	brpl	.-16     	; 0xd08 <__addsf3x+0x6e>
     d18:	0e c0       	rjmp	.+28     	; 0xd36 <__addsf3x+0x9c>
     d1a:	ba 0f       	add	r27, r26
     d1c:	62 1f       	adc	r22, r18
     d1e:	73 1f       	adc	r23, r19
     d20:	84 1f       	adc	r24, r20
     d22:	48 f4       	brcc	.+18     	; 0xd36 <__addsf3x+0x9c>
     d24:	87 95       	ror	r24
     d26:	77 95       	ror	r23
     d28:	67 95       	ror	r22
     d2a:	b7 95       	ror	r27
     d2c:	f7 95       	ror	r31
     d2e:	9e 3f       	cpi	r25, 0xFE	; 254
     d30:	08 f0       	brcs	.+2      	; 0xd34 <__addsf3x+0x9a>
     d32:	b0 cf       	rjmp	.-160    	; 0xc94 <__addsf3+0x28>
     d34:	93 95       	inc	r25
     d36:	88 0f       	add	r24, r24
     d38:	08 f0       	brcs	.+2      	; 0xd3c <__addsf3x+0xa2>
     d3a:	99 27       	eor	r25, r25
     d3c:	ee 0f       	add	r30, r30
     d3e:	97 95       	ror	r25
     d40:	87 95       	ror	r24
     d42:	08 95       	ret

00000d44 <__cmpsf2>:
     d44:	0e 94 85 07 	call	0xf0a	; 0xf0a <__fp_cmp>
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__cmpsf2+0x8>
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	08 95       	ret

00000d4e <__divsf3>:
     d4e:	0e 94 bb 06 	call	0xd76	; 0xd76 <__divsf3x>
     d52:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__fp_round>
     d56:	0e 94 b9 07 	call	0xf72	; 0xf72 <__fp_pscB>
     d5a:	58 f0       	brcs	.+22     	; 0xd72 <__divsf3+0x24>
     d5c:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_pscA>
     d60:	40 f0       	brcs	.+16     	; 0xd72 <__divsf3+0x24>
     d62:	29 f4       	brne	.+10     	; 0xd6e <__divsf3+0x20>
     d64:	5f 3f       	cpi	r21, 0xFF	; 255
     d66:	29 f0       	breq	.+10     	; 0xd72 <__divsf3+0x24>
     d68:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__fp_inf>
     d6c:	51 11       	cpse	r21, r1
     d6e:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_szero>
     d72:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__fp_nan>

00000d76 <__divsf3x>:
     d76:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__fp_split3>
     d7a:	68 f3       	brcs	.-38     	; 0xd56 <__divsf3+0x8>

00000d7c <__divsf3_pse>:
     d7c:	99 23       	and	r25, r25
     d7e:	b1 f3       	breq	.-20     	; 0xd6c <__divsf3+0x1e>
     d80:	55 23       	and	r21, r21
     d82:	91 f3       	breq	.-28     	; 0xd68 <__divsf3+0x1a>
     d84:	95 1b       	sub	r25, r21
     d86:	55 0b       	sbc	r21, r21
     d88:	bb 27       	eor	r27, r27
     d8a:	aa 27       	eor	r26, r26
     d8c:	62 17       	cp	r22, r18
     d8e:	73 07       	cpc	r23, r19
     d90:	84 07       	cpc	r24, r20
     d92:	38 f0       	brcs	.+14     	; 0xda2 <__divsf3_pse+0x26>
     d94:	9f 5f       	subi	r25, 0xFF	; 255
     d96:	5f 4f       	sbci	r21, 0xFF	; 255
     d98:	22 0f       	add	r18, r18
     d9a:	33 1f       	adc	r19, r19
     d9c:	44 1f       	adc	r20, r20
     d9e:	aa 1f       	adc	r26, r26
     da0:	a9 f3       	breq	.-22     	; 0xd8c <__divsf3_pse+0x10>
     da2:	35 d0       	rcall	.+106    	; 0xe0e <__divsf3_pse+0x92>
     da4:	0e 2e       	mov	r0, r30
     da6:	3a f0       	brmi	.+14     	; 0xdb6 <__divsf3_pse+0x3a>
     da8:	e0 e8       	ldi	r30, 0x80	; 128
     daa:	32 d0       	rcall	.+100    	; 0xe10 <__divsf3_pse+0x94>
     dac:	91 50       	subi	r25, 0x01	; 1
     dae:	50 40       	sbci	r21, 0x00	; 0
     db0:	e6 95       	lsr	r30
     db2:	00 1c       	adc	r0, r0
     db4:	ca f7       	brpl	.-14     	; 0xda8 <__divsf3_pse+0x2c>
     db6:	2b d0       	rcall	.+86     	; 0xe0e <__divsf3_pse+0x92>
     db8:	fe 2f       	mov	r31, r30
     dba:	29 d0       	rcall	.+82     	; 0xe0e <__divsf3_pse+0x92>
     dbc:	66 0f       	add	r22, r22
     dbe:	77 1f       	adc	r23, r23
     dc0:	88 1f       	adc	r24, r24
     dc2:	bb 1f       	adc	r27, r27
     dc4:	26 17       	cp	r18, r22
     dc6:	37 07       	cpc	r19, r23
     dc8:	48 07       	cpc	r20, r24
     dca:	ab 07       	cpc	r26, r27
     dcc:	b0 e8       	ldi	r27, 0x80	; 128
     dce:	09 f0       	breq	.+2      	; 0xdd2 <__divsf3_pse+0x56>
     dd0:	bb 0b       	sbc	r27, r27
     dd2:	80 2d       	mov	r24, r0
     dd4:	bf 01       	movw	r22, r30
     dd6:	ff 27       	eor	r31, r31
     dd8:	93 58       	subi	r25, 0x83	; 131
     dda:	5f 4f       	sbci	r21, 0xFF	; 255
     ddc:	3a f0       	brmi	.+14     	; 0xdec <__divsf3_pse+0x70>
     dde:	9e 3f       	cpi	r25, 0xFE	; 254
     de0:	51 05       	cpc	r21, r1
     de2:	78 f0       	brcs	.+30     	; 0xe02 <__divsf3_pse+0x86>
     de4:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__fp_inf>
     de8:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_szero>
     dec:	5f 3f       	cpi	r21, 0xFF	; 255
     dee:	e4 f3       	brlt	.-8      	; 0xde8 <__divsf3_pse+0x6c>
     df0:	98 3e       	cpi	r25, 0xE8	; 232
     df2:	d4 f3       	brlt	.-12     	; 0xde8 <__divsf3_pse+0x6c>
     df4:	86 95       	lsr	r24
     df6:	77 95       	ror	r23
     df8:	67 95       	ror	r22
     dfa:	b7 95       	ror	r27
     dfc:	f7 95       	ror	r31
     dfe:	9f 5f       	subi	r25, 0xFF	; 255
     e00:	c9 f7       	brne	.-14     	; 0xdf4 <__divsf3_pse+0x78>
     e02:	88 0f       	add	r24, r24
     e04:	91 1d       	adc	r25, r1
     e06:	96 95       	lsr	r25
     e08:	87 95       	ror	r24
     e0a:	97 f9       	bld	r25, 7
     e0c:	08 95       	ret
     e0e:	e1 e0       	ldi	r30, 0x01	; 1
     e10:	66 0f       	add	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	88 1f       	adc	r24, r24
     e16:	bb 1f       	adc	r27, r27
     e18:	62 17       	cp	r22, r18
     e1a:	73 07       	cpc	r23, r19
     e1c:	84 07       	cpc	r24, r20
     e1e:	ba 07       	cpc	r27, r26
     e20:	20 f0       	brcs	.+8      	; 0xe2a <__divsf3_pse+0xae>
     e22:	62 1b       	sub	r22, r18
     e24:	73 0b       	sbc	r23, r19
     e26:	84 0b       	sbc	r24, r20
     e28:	ba 0b       	sbc	r27, r26
     e2a:	ee 1f       	adc	r30, r30
     e2c:	88 f7       	brcc	.-30     	; 0xe10 <__divsf3_pse+0x94>
     e2e:	e0 95       	com	r30
     e30:	08 95       	ret

00000e32 <__fixunssfsi>:
     e32:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__fp_splitA>
     e36:	88 f0       	brcs	.+34     	; 0xe5a <__fixunssfsi+0x28>
     e38:	9f 57       	subi	r25, 0x7F	; 127
     e3a:	98 f0       	brcs	.+38     	; 0xe62 <__fixunssfsi+0x30>
     e3c:	b9 2f       	mov	r27, r25
     e3e:	99 27       	eor	r25, r25
     e40:	b7 51       	subi	r27, 0x17	; 23
     e42:	b0 f0       	brcs	.+44     	; 0xe70 <__fixunssfsi+0x3e>
     e44:	e1 f0       	breq	.+56     	; 0xe7e <__fixunssfsi+0x4c>
     e46:	66 0f       	add	r22, r22
     e48:	77 1f       	adc	r23, r23
     e4a:	88 1f       	adc	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	1a f0       	brmi	.+6      	; 0xe56 <__fixunssfsi+0x24>
     e50:	ba 95       	dec	r27
     e52:	c9 f7       	brne	.-14     	; 0xe46 <__fixunssfsi+0x14>
     e54:	14 c0       	rjmp	.+40     	; 0xe7e <__fixunssfsi+0x4c>
     e56:	b1 30       	cpi	r27, 0x01	; 1
     e58:	91 f0       	breq	.+36     	; 0xe7e <__fixunssfsi+0x4c>
     e5a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__fp_zero>
     e5e:	b1 e0       	ldi	r27, 0x01	; 1
     e60:	08 95       	ret
     e62:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__fp_zero>
     e66:	67 2f       	mov	r22, r23
     e68:	78 2f       	mov	r23, r24
     e6a:	88 27       	eor	r24, r24
     e6c:	b8 5f       	subi	r27, 0xF8	; 248
     e6e:	39 f0       	breq	.+14     	; 0xe7e <__fixunssfsi+0x4c>
     e70:	b9 3f       	cpi	r27, 0xF9	; 249
     e72:	cc f3       	brlt	.-14     	; 0xe66 <__fixunssfsi+0x34>
     e74:	86 95       	lsr	r24
     e76:	77 95       	ror	r23
     e78:	67 95       	ror	r22
     e7a:	b3 95       	inc	r27
     e7c:	d9 f7       	brne	.-10     	; 0xe74 <__fixunssfsi+0x42>
     e7e:	3e f4       	brtc	.+14     	; 0xe8e <__fixunssfsi+0x5c>
     e80:	90 95       	com	r25
     e82:	80 95       	com	r24
     e84:	70 95       	com	r23
     e86:	61 95       	neg	r22
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	8f 4f       	sbci	r24, 0xFF	; 255
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	08 95       	ret

00000e90 <__floatunsisf>:
     e90:	e8 94       	clt
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <__floatsisf+0x12>

00000e94 <__floatsisf>:
     e94:	97 fb       	bst	r25, 7
     e96:	3e f4       	brtc	.+14     	; 0xea6 <__floatsisf+0x12>
     e98:	90 95       	com	r25
     e9a:	80 95       	com	r24
     e9c:	70 95       	com	r23
     e9e:	61 95       	neg	r22
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	8f 4f       	sbci	r24, 0xFF	; 255
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	99 23       	and	r25, r25
     ea8:	a9 f0       	breq	.+42     	; 0xed4 <__floatsisf+0x40>
     eaa:	f9 2f       	mov	r31, r25
     eac:	96 e9       	ldi	r25, 0x96	; 150
     eae:	bb 27       	eor	r27, r27
     eb0:	93 95       	inc	r25
     eb2:	f6 95       	lsr	r31
     eb4:	87 95       	ror	r24
     eb6:	77 95       	ror	r23
     eb8:	67 95       	ror	r22
     eba:	b7 95       	ror	r27
     ebc:	f1 11       	cpse	r31, r1
     ebe:	f8 cf       	rjmp	.-16     	; 0xeb0 <__floatsisf+0x1c>
     ec0:	fa f4       	brpl	.+62     	; 0xf00 <__floatsisf+0x6c>
     ec2:	bb 0f       	add	r27, r27
     ec4:	11 f4       	brne	.+4      	; 0xeca <__floatsisf+0x36>
     ec6:	60 ff       	sbrs	r22, 0
     ec8:	1b c0       	rjmp	.+54     	; 0xf00 <__floatsisf+0x6c>
     eca:	6f 5f       	subi	r22, 0xFF	; 255
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	8f 4f       	sbci	r24, 0xFF	; 255
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	16 c0       	rjmp	.+44     	; 0xf00 <__floatsisf+0x6c>
     ed4:	88 23       	and	r24, r24
     ed6:	11 f0       	breq	.+4      	; 0xedc <__floatsisf+0x48>
     ed8:	96 e9       	ldi	r25, 0x96	; 150
     eda:	11 c0       	rjmp	.+34     	; 0xefe <__floatsisf+0x6a>
     edc:	77 23       	and	r23, r23
     ede:	21 f0       	breq	.+8      	; 0xee8 <__floatsisf+0x54>
     ee0:	9e e8       	ldi	r25, 0x8E	; 142
     ee2:	87 2f       	mov	r24, r23
     ee4:	76 2f       	mov	r23, r22
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <__floatsisf+0x5e>
     ee8:	66 23       	and	r22, r22
     eea:	71 f0       	breq	.+28     	; 0xf08 <__floatsisf+0x74>
     eec:	96 e8       	ldi	r25, 0x86	; 134
     eee:	86 2f       	mov	r24, r22
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	2a f0       	brmi	.+10     	; 0xf00 <__floatsisf+0x6c>
     ef6:	9a 95       	dec	r25
     ef8:	66 0f       	add	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	88 1f       	adc	r24, r24
     efe:	da f7       	brpl	.-10     	; 0xef6 <__floatsisf+0x62>
     f00:	88 0f       	add	r24, r24
     f02:	96 95       	lsr	r25
     f04:	87 95       	ror	r24
     f06:	97 f9       	bld	r25, 7
     f08:	08 95       	ret

00000f0a <__fp_cmp>:
     f0a:	99 0f       	add	r25, r25
     f0c:	00 08       	sbc	r0, r0
     f0e:	55 0f       	add	r21, r21
     f10:	aa 0b       	sbc	r26, r26
     f12:	e0 e8       	ldi	r30, 0x80	; 128
     f14:	fe ef       	ldi	r31, 0xFE	; 254
     f16:	16 16       	cp	r1, r22
     f18:	17 06       	cpc	r1, r23
     f1a:	e8 07       	cpc	r30, r24
     f1c:	f9 07       	cpc	r31, r25
     f1e:	c0 f0       	brcs	.+48     	; 0xf50 <__fp_cmp+0x46>
     f20:	12 16       	cp	r1, r18
     f22:	13 06       	cpc	r1, r19
     f24:	e4 07       	cpc	r30, r20
     f26:	f5 07       	cpc	r31, r21
     f28:	98 f0       	brcs	.+38     	; 0xf50 <__fp_cmp+0x46>
     f2a:	62 1b       	sub	r22, r18
     f2c:	73 0b       	sbc	r23, r19
     f2e:	84 0b       	sbc	r24, r20
     f30:	95 0b       	sbc	r25, r21
     f32:	39 f4       	brne	.+14     	; 0xf42 <__fp_cmp+0x38>
     f34:	0a 26       	eor	r0, r26
     f36:	61 f0       	breq	.+24     	; 0xf50 <__fp_cmp+0x46>
     f38:	23 2b       	or	r18, r19
     f3a:	24 2b       	or	r18, r20
     f3c:	25 2b       	or	r18, r21
     f3e:	21 f4       	brne	.+8      	; 0xf48 <__fp_cmp+0x3e>
     f40:	08 95       	ret
     f42:	0a 26       	eor	r0, r26
     f44:	09 f4       	brne	.+2      	; 0xf48 <__fp_cmp+0x3e>
     f46:	a1 40       	sbci	r26, 0x01	; 1
     f48:	a6 95       	lsr	r26
     f4a:	8f ef       	ldi	r24, 0xFF	; 255
     f4c:	81 1d       	adc	r24, r1
     f4e:	81 1d       	adc	r24, r1
     f50:	08 95       	ret

00000f52 <__fp_inf>:
     f52:	97 f9       	bld	r25, 7
     f54:	9f 67       	ori	r25, 0x7F	; 127
     f56:	80 e8       	ldi	r24, 0x80	; 128
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	08 95       	ret

00000f5e <__fp_nan>:
     f5e:	9f ef       	ldi	r25, 0xFF	; 255
     f60:	80 ec       	ldi	r24, 0xC0	; 192
     f62:	08 95       	ret

00000f64 <__fp_pscA>:
     f64:	00 24       	eor	r0, r0
     f66:	0a 94       	dec	r0
     f68:	16 16       	cp	r1, r22
     f6a:	17 06       	cpc	r1, r23
     f6c:	18 06       	cpc	r1, r24
     f6e:	09 06       	cpc	r0, r25
     f70:	08 95       	ret

00000f72 <__fp_pscB>:
     f72:	00 24       	eor	r0, r0
     f74:	0a 94       	dec	r0
     f76:	12 16       	cp	r1, r18
     f78:	13 06       	cpc	r1, r19
     f7a:	14 06       	cpc	r1, r20
     f7c:	05 06       	cpc	r0, r21
     f7e:	08 95       	ret

00000f80 <__fp_round>:
     f80:	09 2e       	mov	r0, r25
     f82:	03 94       	inc	r0
     f84:	00 0c       	add	r0, r0
     f86:	11 f4       	brne	.+4      	; 0xf8c <__fp_round+0xc>
     f88:	88 23       	and	r24, r24
     f8a:	52 f0       	brmi	.+20     	; 0xfa0 <__fp_round+0x20>
     f8c:	bb 0f       	add	r27, r27
     f8e:	40 f4       	brcc	.+16     	; 0xfa0 <__fp_round+0x20>
     f90:	bf 2b       	or	r27, r31
     f92:	11 f4       	brne	.+4      	; 0xf98 <__fp_round+0x18>
     f94:	60 ff       	sbrs	r22, 0
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <__fp_round+0x20>
     f98:	6f 5f       	subi	r22, 0xFF	; 255
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	8f 4f       	sbci	r24, 0xFF	; 255
     f9e:	9f 4f       	sbci	r25, 0xFF	; 255
     fa0:	08 95       	ret

00000fa2 <__fp_split3>:
     fa2:	57 fd       	sbrc	r21, 7
     fa4:	90 58       	subi	r25, 0x80	; 128
     fa6:	44 0f       	add	r20, r20
     fa8:	55 1f       	adc	r21, r21
     faa:	59 f0       	breq	.+22     	; 0xfc2 <__fp_splitA+0x10>
     fac:	5f 3f       	cpi	r21, 0xFF	; 255
     fae:	71 f0       	breq	.+28     	; 0xfcc <__fp_splitA+0x1a>
     fb0:	47 95       	ror	r20

00000fb2 <__fp_splitA>:
     fb2:	88 0f       	add	r24, r24
     fb4:	97 fb       	bst	r25, 7
     fb6:	99 1f       	adc	r25, r25
     fb8:	61 f0       	breq	.+24     	; 0xfd2 <__fp_splitA+0x20>
     fba:	9f 3f       	cpi	r25, 0xFF	; 255
     fbc:	79 f0       	breq	.+30     	; 0xfdc <__fp_splitA+0x2a>
     fbe:	87 95       	ror	r24
     fc0:	08 95       	ret
     fc2:	12 16       	cp	r1, r18
     fc4:	13 06       	cpc	r1, r19
     fc6:	14 06       	cpc	r1, r20
     fc8:	55 1f       	adc	r21, r21
     fca:	f2 cf       	rjmp	.-28     	; 0xfb0 <__fp_split3+0xe>
     fcc:	46 95       	lsr	r20
     fce:	f1 df       	rcall	.-30     	; 0xfb2 <__fp_splitA>
     fd0:	08 c0       	rjmp	.+16     	; 0xfe2 <__fp_splitA+0x30>
     fd2:	16 16       	cp	r1, r22
     fd4:	17 06       	cpc	r1, r23
     fd6:	18 06       	cpc	r1, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	f1 cf       	rjmp	.-30     	; 0xfbe <__fp_splitA+0xc>
     fdc:	86 95       	lsr	r24
     fde:	71 05       	cpc	r23, r1
     fe0:	61 05       	cpc	r22, r1
     fe2:	08 94       	sec
     fe4:	08 95       	ret

00000fe6 <__fp_zero>:
     fe6:	e8 94       	clt

00000fe8 <__fp_szero>:
     fe8:	bb 27       	eor	r27, r27
     fea:	66 27       	eor	r22, r22
     fec:	77 27       	eor	r23, r23
     fee:	cb 01       	movw	r24, r22
     ff0:	97 f9       	bld	r25, 7
     ff2:	08 95       	ret

00000ff4 <__gesf2>:
     ff4:	0e 94 85 07 	call	0xf0a	; 0xf0a <__fp_cmp>
     ff8:	08 f4       	brcc	.+2      	; 0xffc <__gesf2+0x8>
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	08 95       	ret

00000ffe <__mulsf3>:
     ffe:	0e 94 12 08 	call	0x1024	; 0x1024 <__mulsf3x>
    1002:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__fp_round>
    1006:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fp_pscA>
    100a:	38 f0       	brcs	.+14     	; 0x101a <__mulsf3+0x1c>
    100c:	0e 94 b9 07 	call	0xf72	; 0xf72 <__fp_pscB>
    1010:	20 f0       	brcs	.+8      	; 0x101a <__mulsf3+0x1c>
    1012:	95 23       	and	r25, r21
    1014:	11 f0       	breq	.+4      	; 0x101a <__mulsf3+0x1c>
    1016:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__fp_inf>
    101a:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__fp_nan>
    101e:	11 24       	eor	r1, r1
    1020:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_szero>

00001024 <__mulsf3x>:
    1024:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__fp_split3>
    1028:	70 f3       	brcs	.-36     	; 0x1006 <__mulsf3+0x8>

0000102a <__mulsf3_pse>:
    102a:	95 9f       	mul	r25, r21
    102c:	c1 f3       	breq	.-16     	; 0x101e <__mulsf3+0x20>
    102e:	95 0f       	add	r25, r21
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	55 1f       	adc	r21, r21
    1034:	62 9f       	mul	r22, r18
    1036:	f0 01       	movw	r30, r0
    1038:	72 9f       	mul	r23, r18
    103a:	bb 27       	eor	r27, r27
    103c:	f0 0d       	add	r31, r0
    103e:	b1 1d       	adc	r27, r1
    1040:	63 9f       	mul	r22, r19
    1042:	aa 27       	eor	r26, r26
    1044:	f0 0d       	add	r31, r0
    1046:	b1 1d       	adc	r27, r1
    1048:	aa 1f       	adc	r26, r26
    104a:	64 9f       	mul	r22, r20
    104c:	66 27       	eor	r22, r22
    104e:	b0 0d       	add	r27, r0
    1050:	a1 1d       	adc	r26, r1
    1052:	66 1f       	adc	r22, r22
    1054:	82 9f       	mul	r24, r18
    1056:	22 27       	eor	r18, r18
    1058:	b0 0d       	add	r27, r0
    105a:	a1 1d       	adc	r26, r1
    105c:	62 1f       	adc	r22, r18
    105e:	73 9f       	mul	r23, r19
    1060:	b0 0d       	add	r27, r0
    1062:	a1 1d       	adc	r26, r1
    1064:	62 1f       	adc	r22, r18
    1066:	83 9f       	mul	r24, r19
    1068:	a0 0d       	add	r26, r0
    106a:	61 1d       	adc	r22, r1
    106c:	22 1f       	adc	r18, r18
    106e:	74 9f       	mul	r23, r20
    1070:	33 27       	eor	r19, r19
    1072:	a0 0d       	add	r26, r0
    1074:	61 1d       	adc	r22, r1
    1076:	23 1f       	adc	r18, r19
    1078:	84 9f       	mul	r24, r20
    107a:	60 0d       	add	r22, r0
    107c:	21 1d       	adc	r18, r1
    107e:	82 2f       	mov	r24, r18
    1080:	76 2f       	mov	r23, r22
    1082:	6a 2f       	mov	r22, r26
    1084:	11 24       	eor	r1, r1
    1086:	9f 57       	subi	r25, 0x7F	; 127
    1088:	50 40       	sbci	r21, 0x00	; 0
    108a:	9a f0       	brmi	.+38     	; 0x10b2 <__mulsf3_pse+0x88>
    108c:	f1 f0       	breq	.+60     	; 0x10ca <__mulsf3_pse+0xa0>
    108e:	88 23       	and	r24, r24
    1090:	4a f0       	brmi	.+18     	; 0x10a4 <__mulsf3_pse+0x7a>
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	bb 1f       	adc	r27, r27
    1098:	66 1f       	adc	r22, r22
    109a:	77 1f       	adc	r23, r23
    109c:	88 1f       	adc	r24, r24
    109e:	91 50       	subi	r25, 0x01	; 1
    10a0:	50 40       	sbci	r21, 0x00	; 0
    10a2:	a9 f7       	brne	.-22     	; 0x108e <__mulsf3_pse+0x64>
    10a4:	9e 3f       	cpi	r25, 0xFE	; 254
    10a6:	51 05       	cpc	r21, r1
    10a8:	80 f0       	brcs	.+32     	; 0x10ca <__mulsf3_pse+0xa0>
    10aa:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__fp_inf>
    10ae:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__fp_szero>
    10b2:	5f 3f       	cpi	r21, 0xFF	; 255
    10b4:	e4 f3       	brlt	.-8      	; 0x10ae <__mulsf3_pse+0x84>
    10b6:	98 3e       	cpi	r25, 0xE8	; 232
    10b8:	d4 f3       	brlt	.-12     	; 0x10ae <__mulsf3_pse+0x84>
    10ba:	86 95       	lsr	r24
    10bc:	77 95       	ror	r23
    10be:	67 95       	ror	r22
    10c0:	b7 95       	ror	r27
    10c2:	f7 95       	ror	r31
    10c4:	e7 95       	ror	r30
    10c6:	9f 5f       	subi	r25, 0xFF	; 255
    10c8:	c1 f7       	brne	.-16     	; 0x10ba <__mulsf3_pse+0x90>
    10ca:	fe 2b       	or	r31, r30
    10cc:	88 0f       	add	r24, r24
    10ce:	91 1d       	adc	r25, r1
    10d0:	96 95       	lsr	r25
    10d2:	87 95       	ror	r24
    10d4:	97 f9       	bld	r25, 7
    10d6:	08 95       	ret

000010d8 <__tablejump2__>:
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	05 90       	lpm	r0, Z+
    10de:	f4 91       	lpm	r31, Z
    10e0:	e0 2d       	mov	r30, r0
    10e2:	09 94       	ijmp

000010e4 <_exit>:
    10e4:	f8 94       	cli

000010e6 <__stop_program>:
    10e6:	ff cf       	rjmp	.-2      	; 0x10e6 <__stop_program>
