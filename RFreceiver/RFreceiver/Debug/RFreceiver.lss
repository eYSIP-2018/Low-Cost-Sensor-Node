
RFreceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001186  0000121a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001186  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080011c  0080011c  00001236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005c38  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb3  00000000  00000000  000071f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bd7  00000000  00000000  000081ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ae4  00000000  00000000  00009d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001416  00000000  00000000  0000a868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040b1  00000000  00000000  0000bc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000fd2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_6>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_14>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	85 02       	muls	r24, r21

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e6 e8       	ldi	r30, 0x86	; 134
      7e:	f1 e1       	ldi	r31, 0x11	; 17
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	ac 31       	cpi	r26, 0x1C	; 28
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	ac e1       	ldi	r26, 0x1C	; 28
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a6 33       	cpi	r26, 0x36	; 54
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 b2 08 	call	0x1164	; 0x1164 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 12 02 	call	0x424	; 0x424 <main>
      b6:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <UART_Init>:
		// disable Brounout detection (BOD)
		MCUCR|=(3<<5);
		MCUCR = (MCUCR &~(1<<5)) | (1<<6);
		__asm__ __volatile__("sleep");// executes A sleep instruction
	}
}
      be:	e1 ec       	ldi	r30, 0xC1	; 193
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	10 82       	st	Z, r1
      c4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      c8:	a2 ec       	ldi	r26, 0xC2	; 194
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	8c 91       	ld	r24, X
      ce:	8e 60       	ori	r24, 0x0E	; 14
      d0:	8c 93       	st	X, r24
      d2:	83 e3       	ldi	r24, 0x33	; 51
      d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      dc:	80 81       	ld	r24, Z
      de:	88 61       	ori	r24, 0x18	; 24
      e0:	80 83       	st	Z, r24
      e2:	08 95       	ret

000000e4 <UART_Transmit>:
      e4:	90 e4       	ldi	r25, 0x40	; 64
      e6:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      ea:	e0 ec       	ldi	r30, 0xC0	; 192
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	90 81       	ld	r25, Z
      f0:	95 ff       	sbrs	r25, 5
      f2:	fd cf       	rjmp	.-6      	; 0xee <UART_Transmit+0xa>
      f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      f8:	e0 ec       	ldi	r30, 0xC0	; 192
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	86 ff       	sbrs	r24, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <UART_Transmit+0x18>
     102:	08 95       	ret

00000104 <UART_TransmitByte>:
     104:	90 e4       	ldi	r25, 0x40	; 64
     106:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     10a:	e0 ec       	ldi	r30, 0xC0	; 192
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	90 81       	ld	r25, Z
     110:	95 ff       	sbrs	r25, 5
     112:	fd cf       	rjmp	.-6      	; 0x10e <UART_TransmitByte+0xa>
     114:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     118:	e0 ec       	ldi	r30, 0xC0	; 192
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	80 81       	ld	r24, Z
     11e:	86 ff       	sbrs	r24, 6
     120:	fd cf       	rjmp	.-6      	; 0x11c <UART_TransmitByte+0x18>
     122:	08 95       	ret

00000124 <UART_Printf>:
     124:	0f 93       	push	r16
     126:	1f 93       	push	r17
     128:	cf 93       	push	r28
     12a:	fc 01       	movw	r30, r24
     12c:	80 81       	ld	r24, Z
     12e:	88 23       	and	r24, r24
     130:	59 f0       	breq	.+22     	; 0x148 <UART_Printf+0x24>
     132:	8f 01       	movw	r16, r30
     134:	c0 e0       	ldi	r28, 0x00	; 0
     136:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     13a:	cf 5f       	subi	r28, 0xFF	; 255
     13c:	f8 01       	movw	r30, r16
     13e:	ec 0f       	add	r30, r28
     140:	f1 1d       	adc	r31, r1
     142:	80 81       	ld	r24, Z
     144:	81 11       	cpse	r24, r1
     146:	f7 cf       	rjmp	.-18     	; 0x136 <UART_Printf+0x12>
     148:	cf 91       	pop	r28
     14a:	1f 91       	pop	r17
     14c:	0f 91       	pop	r16
     14e:	08 95       	ret

00000150 <UART_Print_Num>:
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	8c 01       	movw	r16, r24
     15a:	9c 01       	movw	r18, r24
     15c:	32 95       	swap	r19
     15e:	22 95       	swap	r18
     160:	2f 70       	andi	r18, 0x0F	; 15
     162:	23 27       	eor	r18, r19
     164:	3f 70       	andi	r19, 0x0F	; 15
     166:	23 27       	eor	r18, r19
     168:	a7 e4       	ldi	r26, 0x47	; 71
     16a:	b3 e0       	ldi	r27, 0x03	; 3
     16c:	0e 94 a3 08 	call	0x1146	; 0x1146 <__umulhisi3>
     170:	96 95       	lsr	r25
     172:	87 95       	ror	r24
     174:	96 95       	lsr	r25
     176:	87 95       	ror	r24
     178:	96 95       	lsr	r25
     17a:	87 95       	ror	r24
     17c:	80 5d       	subi	r24, 0xD0	; 208
     17e:	80 33       	cpi	r24, 0x30	; 48
     180:	11 f0       	breq	.+4      	; 0x186 <UART_Print_Num+0x36>
     182:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     186:	98 01       	movw	r18, r16
     188:	32 95       	swap	r19
     18a:	22 95       	swap	r18
     18c:	2f 70       	andi	r18, 0x0F	; 15
     18e:	23 27       	eor	r18, r19
     190:	3f 70       	andi	r19, 0x0F	; 15
     192:	23 27       	eor	r18, r19
     194:	a7 e4       	ldi	r26, 0x47	; 71
     196:	b3 e0       	ldi	r27, 0x03	; 3
     198:	0e 94 a3 08 	call	0x1146	; 0x1146 <__umulhisi3>
     19c:	ec 01       	movw	r28, r24
     19e:	d6 95       	lsr	r29
     1a0:	c7 95       	ror	r28
     1a2:	d6 95       	lsr	r29
     1a4:	c7 95       	ror	r28
     1a6:	d6 95       	lsr	r29
     1a8:	c7 95       	ror	r28
     1aa:	20 e1       	ldi	r18, 0x10	; 16
     1ac:	37 e2       	ldi	r19, 0x27	; 39
     1ae:	c2 9f       	mul	r28, r18
     1b0:	c0 01       	movw	r24, r0
     1b2:	c3 9f       	mul	r28, r19
     1b4:	90 0d       	add	r25, r0
     1b6:	d2 9f       	mul	r29, r18
     1b8:	90 0d       	add	r25, r0
     1ba:	11 24       	eor	r1, r1
     1bc:	e8 01       	movw	r28, r16
     1be:	c8 1b       	sub	r28, r24
     1c0:	d9 0b       	sbc	r29, r25
     1c2:	9e 01       	movw	r18, r28
     1c4:	36 95       	lsr	r19
     1c6:	27 95       	ror	r18
     1c8:	36 95       	lsr	r19
     1ca:	27 95       	ror	r18
     1cc:	36 95       	lsr	r19
     1ce:	27 95       	ror	r18
     1d0:	a5 ec       	ldi	r26, 0xC5	; 197
     1d2:	b0 e2       	ldi	r27, 0x20	; 32
     1d4:	0e 94 a3 08 	call	0x1146	; 0x1146 <__umulhisi3>
     1d8:	92 95       	swap	r25
     1da:	82 95       	swap	r24
     1dc:	8f 70       	andi	r24, 0x0F	; 15
     1de:	89 27       	eor	r24, r25
     1e0:	9f 70       	andi	r25, 0x0F	; 15
     1e2:	89 27       	eor	r24, r25
     1e4:	80 5d       	subi	r24, 0xD0	; 208
     1e6:	80 33       	cpi	r24, 0x30	; 48
     1e8:	11 f0       	breq	.+4      	; 0x1ee <UART_Print_Num+0x9e>
     1ea:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     1ee:	9e 01       	movw	r18, r28
     1f0:	36 95       	lsr	r19
     1f2:	27 95       	ror	r18
     1f4:	36 95       	lsr	r19
     1f6:	27 95       	ror	r18
     1f8:	36 95       	lsr	r19
     1fa:	27 95       	ror	r18
     1fc:	a5 ec       	ldi	r26, 0xC5	; 197
     1fe:	b0 e2       	ldi	r27, 0x20	; 32
     200:	0e 94 a3 08 	call	0x1146	; 0x1146 <__umulhisi3>
     204:	8c 01       	movw	r16, r24
     206:	12 95       	swap	r17
     208:	02 95       	swap	r16
     20a:	0f 70       	andi	r16, 0x0F	; 15
     20c:	01 27       	eor	r16, r17
     20e:	1f 70       	andi	r17, 0x0F	; 15
     210:	01 27       	eor	r16, r17
     212:	28 ee       	ldi	r18, 0xE8	; 232
     214:	33 e0       	ldi	r19, 0x03	; 3
     216:	02 9f       	mul	r16, r18
     218:	c0 01       	movw	r24, r0
     21a:	03 9f       	mul	r16, r19
     21c:	90 0d       	add	r25, r0
     21e:	12 9f       	mul	r17, r18
     220:	90 0d       	add	r25, r0
     222:	11 24       	eor	r1, r1
     224:	8e 01       	movw	r16, r28
     226:	08 1b       	sub	r16, r24
     228:	19 0b       	sbc	r17, r25
     22a:	98 01       	movw	r18, r16
     22c:	36 95       	lsr	r19
     22e:	27 95       	ror	r18
     230:	36 95       	lsr	r19
     232:	27 95       	ror	r18
     234:	ab e7       	ldi	r26, 0x7B	; 123
     236:	b4 e1       	ldi	r27, 0x14	; 20
     238:	0e 94 a3 08 	call	0x1146	; 0x1146 <__umulhisi3>
     23c:	96 95       	lsr	r25
     23e:	87 95       	ror	r24
     240:	80 5d       	subi	r24, 0xD0	; 208
     242:	80 33       	cpi	r24, 0x30	; 48
     244:	11 f0       	breq	.+4      	; 0x24a <UART_Print_Num+0xfa>
     246:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     24a:	98 01       	movw	r18, r16
     24c:	36 95       	lsr	r19
     24e:	27 95       	ror	r18
     250:	36 95       	lsr	r19
     252:	27 95       	ror	r18
     254:	ab e7       	ldi	r26, 0x7B	; 123
     256:	b4 e1       	ldi	r27, 0x14	; 20
     258:	0e 94 a3 08 	call	0x1146	; 0x1146 <__umulhisi3>
     25c:	ec 01       	movw	r28, r24
     25e:	d6 95       	lsr	r29
     260:	c7 95       	ror	r28
     262:	24 e6       	ldi	r18, 0x64	; 100
     264:	2c 9f       	mul	r18, r28
     266:	c0 01       	movw	r24, r0
     268:	2d 9f       	mul	r18, r29
     26a:	90 0d       	add	r25, r0
     26c:	11 24       	eor	r1, r1
     26e:	e8 01       	movw	r28, r16
     270:	c8 1b       	sub	r28, r24
     272:	d9 0b       	sbc	r29, r25
     274:	9e 01       	movw	r18, r28
     276:	ad ec       	ldi	r26, 0xCD	; 205
     278:	bc ec       	ldi	r27, 0xCC	; 204
     27a:	0e 94 a3 08 	call	0x1146	; 0x1146 <__umulhisi3>
     27e:	96 95       	lsr	r25
     280:	87 95       	ror	r24
     282:	96 95       	lsr	r25
     284:	87 95       	ror	r24
     286:	96 95       	lsr	r25
     288:	87 95       	ror	r24
     28a:	80 5d       	subi	r24, 0xD0	; 208
     28c:	80 33       	cpi	r24, 0x30	; 48
     28e:	11 f0       	breq	.+4      	; 0x294 <UART_Print_Num+0x144>
     290:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     294:	9e 01       	movw	r18, r28
     296:	ad ec       	ldi	r26, 0xCD	; 205
     298:	bc ec       	ldi	r27, 0xCC	; 204
     29a:	0e 94 a3 08 	call	0x1146	; 0x1146 <__umulhisi3>
     29e:	96 95       	lsr	r25
     2a0:	87 95       	ror	r24
     2a2:	96 95       	lsr	r25
     2a4:	87 95       	ror	r24
     2a6:	96 95       	lsr	r25
     2a8:	87 95       	ror	r24
     2aa:	9c 01       	movw	r18, r24
     2ac:	22 0f       	add	r18, r18
     2ae:	33 1f       	adc	r19, r19
     2b0:	88 0f       	add	r24, r24
     2b2:	99 1f       	adc	r25, r25
     2b4:	88 0f       	add	r24, r24
     2b6:	99 1f       	adc	r25, r25
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	82 0f       	add	r24, r18
     2be:	93 1f       	adc	r25, r19
     2c0:	9e 01       	movw	r18, r28
     2c2:	28 1b       	sub	r18, r24
     2c4:	39 0b       	sbc	r19, r25
     2c6:	c9 01       	movw	r24, r18
     2c8:	80 5d       	subi	r24, 0xD0	; 208
     2ca:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2ce:	8a e0       	ldi	r24, 0x0A	; 10
     2d0:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	08 95       	ret

000002de <UART_Print_Byte>:
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	8c 01       	movw	r16, r24
     2e6:	fc 01       	movw	r30, r24
     2e8:	80 81       	ld	r24, Z
     2ea:	88 23       	and	r24, r24
     2ec:	51 f0       	breq	.+20     	; 0x302 <UART_Print_Byte+0x24>
     2ee:	c0 e0       	ldi	r28, 0x00	; 0
     2f0:	0e 94 82 00 	call	0x104	; 0x104 <UART_TransmitByte>
     2f4:	cf 5f       	subi	r28, 0xFF	; 255
     2f6:	f8 01       	movw	r30, r16
     2f8:	ec 0f       	add	r30, r28
     2fa:	f1 1d       	adc	r31, r1
     2fc:	80 81       	ld	r24, Z
     2fe:	81 11       	cpse	r24, r1
     300:	f7 cf       	rjmp	.-18     	; 0x2f0 <UART_Print_Byte+0x12>
     302:	8a e0       	ldi	r24, 0x0A	; 10
     304:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	08 95       	ret

00000310 <Set_pin>:
     310:	61 30       	cpi	r22, 0x01	; 1
     312:	71 05       	cpc	r23, r1
     314:	f1 f4       	brne	.+60     	; 0x352 <Set_pin+0x42>
     316:	88 30       	cpi	r24, 0x08	; 8
     318:	91 05       	cpc	r25, r1
     31a:	70 f0       	brcs	.+28     	; 0x338 <Set_pin+0x28>
     31c:	44 b1       	in	r20, 0x04	; 4
     31e:	08 97       	sbiw	r24, 0x08	; 8
     320:	21 e0       	ldi	r18, 0x01	; 1
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	b9 01       	movw	r22, r18
     326:	02 c0       	rjmp	.+4      	; 0x32c <Set_pin+0x1c>
     328:	66 0f       	add	r22, r22
     32a:	77 1f       	adc	r23, r23
     32c:	8a 95       	dec	r24
     32e:	e2 f7       	brpl	.-8      	; 0x328 <Set_pin+0x18>
     330:	cb 01       	movw	r24, r22
     332:	84 2b       	or	r24, r20
     334:	84 b9       	out	0x04, r24	; 4
     336:	08 95       	ret
     338:	4a b1       	in	r20, 0x0a	; 10
     33a:	21 e0       	ldi	r18, 0x01	; 1
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	b9 01       	movw	r22, r18
     340:	02 c0       	rjmp	.+4      	; 0x346 <Set_pin+0x36>
     342:	66 0f       	add	r22, r22
     344:	77 1f       	adc	r23, r23
     346:	8a 95       	dec	r24
     348:	e2 f7       	brpl	.-8      	; 0x342 <Set_pin+0x32>
     34a:	cb 01       	movw	r24, r22
     34c:	84 2b       	or	r24, r20
     34e:	8a b9       	out	0x0a, r24	; 10
     350:	08 95       	ret
     352:	08 97       	sbiw	r24, 0x08	; 8
     354:	18 f0       	brcs	.+6      	; 0x35c <Set_pin+0x4c>
     356:	84 b1       	in	r24, 0x04	; 4
     358:	84 b9       	out	0x04, r24	; 4
     35a:	08 95       	ret
     35c:	8a b1       	in	r24, 0x0a	; 10
     35e:	8a b9       	out	0x0a, r24	; 10
     360:	08 95       	ret

00000362 <Write_Digital>:
     362:	66 23       	and	r22, r22
     364:	f1 f0       	breq	.+60     	; 0x3a2 <Write_Digital+0x40>
     366:	88 30       	cpi	r24, 0x08	; 8
     368:	91 05       	cpc	r25, r1
     36a:	70 f0       	brcs	.+28     	; 0x388 <Write_Digital+0x26>
     36c:	45 b1       	in	r20, 0x05	; 5
     36e:	08 97       	sbiw	r24, 0x08	; 8
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	b9 01       	movw	r22, r18
     376:	02 c0       	rjmp	.+4      	; 0x37c <Write_Digital+0x1a>
     378:	66 0f       	add	r22, r22
     37a:	77 1f       	adc	r23, r23
     37c:	8a 95       	dec	r24
     37e:	e2 f7       	brpl	.-8      	; 0x378 <Write_Digital+0x16>
     380:	cb 01       	movw	r24, r22
     382:	84 2b       	or	r24, r20
     384:	85 b9       	out	0x05, r24	; 5
     386:	08 95       	ret
     388:	4b b1       	in	r20, 0x0b	; 11
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	b9 01       	movw	r22, r18
     390:	02 c0       	rjmp	.+4      	; 0x396 <Write_Digital+0x34>
     392:	66 0f       	add	r22, r22
     394:	77 1f       	adc	r23, r23
     396:	8a 95       	dec	r24
     398:	e2 f7       	brpl	.-8      	; 0x392 <Write_Digital+0x30>
     39a:	cb 01       	movw	r24, r22
     39c:	84 2b       	or	r24, r20
     39e:	8b b9       	out	0x0b, r24	; 11
     3a0:	08 95       	ret
     3a2:	88 30       	cpi	r24, 0x08	; 8
     3a4:	91 05       	cpc	r25, r1
     3a6:	78 f0       	brcs	.+30     	; 0x3c6 <Write_Digital+0x64>
     3a8:	45 b1       	in	r20, 0x05	; 5
     3aa:	08 97       	sbiw	r24, 0x08	; 8
     3ac:	21 e0       	ldi	r18, 0x01	; 1
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	b9 01       	movw	r22, r18
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <Write_Digital+0x56>
     3b4:	66 0f       	add	r22, r22
     3b6:	77 1f       	adc	r23, r23
     3b8:	8a 95       	dec	r24
     3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <Write_Digital+0x52>
     3bc:	cb 01       	movw	r24, r22
     3be:	80 95       	com	r24
     3c0:	84 23       	and	r24, r20
     3c2:	85 b9       	out	0x05, r24	; 5
     3c4:	08 95       	ret
     3c6:	4b b1       	in	r20, 0x0b	; 11
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	b9 01       	movw	r22, r18
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <Write_Digital+0x72>
     3d0:	66 0f       	add	r22, r22
     3d2:	77 1f       	adc	r23, r23
     3d4:	8a 95       	dec	r24
     3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <Write_Digital+0x6e>
     3d8:	cb 01       	movw	r24, r22
     3da:	80 95       	com	r24
     3dc:	84 23       	and	r24, r20
     3de:	8b b9       	out	0x0b, r24	; 11
     3e0:	08 95       	ret

000003e2 <__vector_14>:
     3e2:	1f 92       	push	r1
     3e4:	0f 92       	push	r0
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	0f 92       	push	r0
     3ea:	11 24       	eor	r1, r1
     3ec:	8f 93       	push	r24
     3ee:	9f 93       	push	r25
     3f0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     3f4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
     3fe:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
     402:	9f 91       	pop	r25
     404:	8f 91       	pop	r24
     406:	0f 90       	pop	r0
     408:	0f be       	out	0x3f, r0	; 63
     40a:	0f 90       	pop	r0
     40c:	1f 90       	pop	r1
     40e:	18 95       	reti

00000410 <__vector_6>:
////   ISR For WATCHDOG TIMER
ISR(WDT_vect)
{
     410:	1f 92       	push	r1
     412:	0f 92       	push	r0
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	0f 92       	push	r0
     418:	11 24       	eor	r1, r1
	
};
     41a:	0f 90       	pop	r0
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	0f 90       	pop	r0
     420:	1f 90       	pop	r1
     422:	18 95       	reti

00000424 <main>:
char data0[12] = ""; 
char data1[12] = "";
char data2[12] = "";
char data3[12] = "";
int main(void)
{ 
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	2c 97       	sbiw	r28, 0x0c	; 12
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
	/// initilazation setup function in arduino
	unsigned char status1;//to read a NRF24L01 particular register using SPI
	UART_Init(9600);	 
     438:	60 e8       	ldi	r22, 0x80	; 128
     43a:	75 e2       	ldi	r23, 0x25	; 37
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_Init>
	radio.begin();
     444:	8e e1       	ldi	r24, 0x1E	; 30
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN4RF245beginEv>
	radio.setDataRate(RF24_250KBPS);
     44c:	62 e0       	ldi	r22, 0x02	; 2
     44e:	8e e1       	ldi	r24, 0x1E	; 30
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	0e 94 a1 05 	call	0xb42	; 0xb42 <_ZN4RF2411setDataRateE15rf24_datarate_e>
	radio.setPALevel(RF24_PA_MAX);// 0dBm power level	
     456:	63 e0       	ldi	r22, 0x03	; 3
     458:	8e e1       	ldi	r24, 0x1E	; 30
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	0e 94 88 05 	call	0xb10	; 0xb10 <_ZN4RF2410setPALevelEh>
	//radio.openReadingPipe(0,pipes[0]);// receiver address must be same as transmitter
	radio.openReadingPipe(1,pipes[1]);// receiver address must be same as transmitter
     460:	0f 2e       	mov	r0, r31
     462:	f2 ee       	ldi	r31, 0xE2	; 226
     464:	ef 2e       	mov	r14, r31
     466:	f0 2d       	mov	r31, r0
     468:	0f 2e       	mov	r0, r31
     46a:	f0 ef       	ldi	r31, 0xF0	; 240
     46c:	ff 2e       	mov	r15, r31
     46e:	f0 2d       	mov	r31, r0
     470:	00 ef       	ldi	r16, 0xF0	; 240
     472:	10 ef       	ldi	r17, 0xF0	; 240
     474:	20 ef       	ldi	r18, 0xF0	; 240
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	61 e0       	ldi	r22, 0x01	; 1
     47e:	8e e1       	ldi	r24, 0x1E	; 30
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 a2 04 	call	0x944	; 0x944 <_ZN4RF2415openReadingPipeEhy>
	radio.openReadingPipe(2,pipes[2]);// receiver address must be same as transmitter 
     486:	0f 2e       	mov	r0, r31
     488:	f3 ee       	ldi	r31, 0xE3	; 227
     48a:	ef 2e       	mov	r14, r31
     48c:	f0 2d       	mov	r31, r0
     48e:	20 ef       	ldi	r18, 0xF0	; 240
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	62 e0       	ldi	r22, 0x02	; 2
     498:	8e e1       	ldi	r24, 0x1E	; 30
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	0e 94 a2 04 	call	0x944	; 0x944 <_ZN4RF2415openReadingPipeEhy>
	//radio.openReadingPipe(3,pipes[3]);// receiver address must be same as transmitter
	radio.startListening();// make radio Receiver
     4a0:	8e e1       	ldi	r24, 0x1E	; 30
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN4RF2414startListeningEv>
	// char data[] = "";
	while (1)
	{  
		 unsigned char pipenum=0;//to store number of particular pipe
		byte text[11] = "";// to store received data
     4a8:	0f 2e       	mov	r0, r31
     4aa:	f9 e0       	ldi	r31, 0x09	; 9
     4ac:	ff 2e       	mov	r15, r31
     4ae:	f0 2d       	mov	r31, r0
     4b0:	8e 01       	movw	r16, r28
     4b2:	0d 5f       	subi	r16, 0xFD	; 253
     4b4:	1f 4f       	sbci	r17, 0xFF	; 255
	//radio.openReadingPipe(3,pipes[3]);// receiver address must be same as transmitter
	radio.startListening();// make radio Receiver
	// char data[] = "";
	while (1)
	{  
		 unsigned char pipenum=0;//to store number of particular pipe
     4b6:	1c 86       	std	Y+12, r1	; 0x0c
		byte text[11] = "";// to store received data
     4b8:	1a 82       	std	Y+2, r1	; 0x02
     4ba:	19 82       	std	Y+1, r1	; 0x01
     4bc:	f8 01       	movw	r30, r16
     4be:	8f 2d       	mov	r24, r15
     4c0:	11 92       	st	Z+, r1
     4c2:	8a 95       	dec	r24
     4c4:	e9 f7       	brne	.-6      	; 0x4c0 <main+0x9c>
		 sei();//enable global interrupt
     4c6:	78 94       	sei
		 while (radio.available(&pipenum))
     4c8:	be 01       	movw	r22, r28
     4ca:	64 5f       	subi	r22, 0xF4	; 244
     4cc:	7f 4f       	sbci	r23, 0xFF	; 255
     4ce:	8e e1       	ldi	r24, 0x1E	; 30
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN4RF249availableEPh>
     4d6:	88 23       	and	r24, r24
     4d8:	71 f3       	breq	.-36     	; 0x4b6 <main+0x92>
		 {	
			
			radio.read(text, sizeof(text));
     4da:	4b e0       	ldi	r20, 0x0B	; 11
     4dc:	be 01       	movw	r22, r28
     4de:	6f 5f       	subi	r22, 0xFF	; 255
     4e0:	7f 4f       	sbci	r23, 0xFF	; 255
     4e2:	8e e1       	ldi	r24, 0x1E	; 30
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	0e 94 95 04 	call	0x92a	; 0x92a <_ZN4RF244readEPvh>
			text[9] = pipenum+0x30;
     4ea:	8c 85       	ldd	r24, Y+12	; 0x0c
     4ec:	80 5d       	subi	r24, 0xD0	; 208
     4ee:	8a 87       	std	Y+10, r24	; 0x0a
			UART_Printf("Pipe NUM:");
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 92 00 	call	0x124	; 0x124 <UART_Printf>
			UART_Print_Num(pipenum);
     4f8:	8c 85       	ldd	r24, Y+12	; 0x0c
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 a8 00 	call	0x150	; 0x150 <UART_Print_Num>
			UART_Print_Byte(text);
     500:	ce 01       	movw	r24, r28
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	0e 94 6f 01 	call	0x2de	; 0x2de <UART_Print_Byte>
	while (1)
	{  
		 unsigned char pipenum=0;//to store number of particular pipe
		byte text[11] = "";// to store received data
		 sei();//enable global interrupt
		 while (radio.available(&pipenum))
     508:	df cf       	rjmp	.-66     	; 0x4c8 <main+0xa4>

0000050a <_GLOBAL__sub_I_radio>:
 * Author : sachin mahadevjadhav
 */ 
#include <avr/io.h>
#include "RF24.h"

RF24 radio(9, 10); // CE, CSN
     50a:	4a e0       	ldi	r20, 0x0A	; 10
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	69 e0       	ldi	r22, 0x09	; 9
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	8e e1       	ldi	r24, 0x1E	; 30
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	0e 94 41 04 	call	0x882	; 0x882 <_ZN4RF24C1Ejj>
     51a:	08 95       	ret

0000051c <_ZN4RF243csnEb>:

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
}
     51c:	4f 92       	push	r4
     51e:	5f 92       	push	r5
     520:	6f 92       	push	r6
     522:	7f 92       	push	r7
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	ec 01       	movw	r28, r24
     53c:	8a 81       	ldd	r24, Y+2	; 0x02
     53e:	9b 81       	ldd	r25, Y+3	; 0x03
     540:	0e 94 b1 01 	call	0x362	; 0x362 <Write_Digital>
     544:	6c 89       	ldd	r22, Y+20	; 0x14
     546:	7d 89       	ldd	r23, Y+21	; 0x15
     548:	8e 89       	ldd	r24, Y+22	; 0x16
     54a:	9f 89       	ldd	r25, Y+23	; 0x17
     54c:	0e 94 7f 07 	call	0xefe	; 0xefe <__floatunsisf>
     550:	6b 01       	movw	r12, r22
     552:	7c 01       	movw	r14, r24
     554:	2b ea       	ldi	r18, 0xAB	; 171
     556:	3a ea       	ldi	r19, 0xAA	; 170
     558:	4a e2       	ldi	r20, 0x2A	; 42
     55a:	50 e4       	ldi	r21, 0x40	; 64
     55c:	0e 94 36 08 	call	0x106c	; 0x106c <__mulsf3>
     560:	4b 01       	movw	r8, r22
     562:	5c 01       	movw	r10, r24
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e8       	ldi	r20, 0x80	; 128
     56a:	5f e3       	ldi	r21, 0x3F	; 63
     56c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__cmpsf2>
     570:	88 23       	and	r24, r24
     572:	0c f4       	brge	.+2      	; 0x576 <_ZN4RF243csnEb+0x5a>
     574:	6e c0       	rjmp	.+220    	; 0x652 <_ZN4RF243csnEb+0x136>
     576:	a7 01       	movw	r20, r14
     578:	96 01       	movw	r18, r12
     57a:	c7 01       	movw	r24, r14
     57c:	b6 01       	movw	r22, r12
     57e:	0e 94 6d 06 	call	0xcda	; 0xcda <__addsf3>
     582:	2b 01       	movw	r4, r22
     584:	3c 01       	movw	r6, r24
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	3f ef       	ldi	r19, 0xFF	; 255
     58a:	4f e7       	ldi	r20, 0x7F	; 127
     58c:	57 e4       	ldi	r21, 0x47	; 71
     58e:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     592:	18 16       	cp	r1, r24
     594:	0c f0       	brlt	.+2      	; 0x598 <_ZN4RF243csnEb+0x7c>
     596:	45 c0       	rjmp	.+138    	; 0x622 <_ZN4RF243csnEb+0x106>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	4a e7       	ldi	r20, 0x7A	; 122
     59e:	54 e4       	ldi	r21, 0x44	; 68
     5a0:	c7 01       	movw	r24, r14
     5a2:	b6 01       	movw	r22, r12
     5a4:	0e 94 de 06 	call	0xdbc	; 0xdbc <__divsf3>
     5a8:	4b 01       	movw	r8, r22
     5aa:	5c 01       	movw	r10, r24
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	4a ef       	ldi	r20, 0xFA	; 250
     5b2:	54 e4       	ldi	r21, 0x44	; 68
     5b4:	0e 94 36 08 	call	0x106c	; 0x106c <__mulsf3>
     5b8:	6b 01       	movw	r12, r22
     5ba:	7c 01       	movw	r14, r24
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	40 e8       	ldi	r20, 0x80	; 128
     5c2:	5f e3       	ldi	r21, 0x3F	; 63
     5c4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__cmpsf2>
     5c8:	88 23       	and	r24, r24
     5ca:	2c f1       	brlt	.+74     	; 0x616 <_ZN4RF243csnEb+0xfa>
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	3f ef       	ldi	r19, 0xFF	; 255
     5d0:	4f e7       	ldi	r20, 0x7F	; 127
     5d2:	57 e4       	ldi	r21, 0x47	; 71
     5d4:	c7 01       	movw	r24, r14
     5d6:	b6 01       	movw	r22, r12
     5d8:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     5dc:	18 16       	cp	r1, r24
     5de:	b4 f4       	brge	.+44     	; 0x60c <_ZN4RF243csnEb+0xf0>
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e2       	ldi	r20, 0x20	; 32
     5e6:	51 e4       	ldi	r21, 0x41	; 65
     5e8:	c5 01       	movw	r24, r10
     5ea:	b4 01       	movw	r22, r8
     5ec:	0e 94 36 08 	call	0x106c	; 0x106c <__mulsf3>
     5f0:	0e 94 50 07 	call	0xea0	; 0xea0 <__fixunssfsi>
     5f4:	61 15       	cp	r22, r1
     5f6:	71 05       	cpc	r23, r1
     5f8:	69 f1       	breq	.+90     	; 0x654 <_ZN4RF243csnEb+0x138>
     5fa:	28 ec       	ldi	r18, 0xC8	; 200
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	c9 01       	movw	r24, r18
     600:	01 97       	sbiw	r24, 0x01	; 1
     602:	f1 f7       	brne	.-4      	; 0x600 <_ZN4RF243csnEb+0xe4>
     604:	61 50       	subi	r22, 0x01	; 1
     606:	71 09       	sbc	r23, r1
     608:	d1 f7       	brne	.-12     	; 0x5fe <_ZN4RF243csnEb+0xe2>
     60a:	24 c0       	rjmp	.+72     	; 0x654 <_ZN4RF243csnEb+0x138>
     60c:	c7 01       	movw	r24, r14
     60e:	b6 01       	movw	r22, r12
     610:	0e 94 50 07 	call	0xea0	; 0xea0 <__fixunssfsi>
     614:	02 c0       	rjmp	.+4      	; 0x61a <_ZN4RF243csnEb+0xfe>
     616:	61 e0       	ldi	r22, 0x01	; 1
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	cb 01       	movw	r24, r22
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <_ZN4RF243csnEb+0x100>
     620:	19 c0       	rjmp	.+50     	; 0x654 <_ZN4RF243csnEb+0x138>
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	4f e7       	ldi	r20, 0x7F	; 127
     628:	53 e4       	ldi	r21, 0x43	; 67
     62a:	c5 01       	movw	r24, r10
     62c:	b4 01       	movw	r22, r8
     62e:	0e 94 31 08 	call	0x1062	; 0x1062 <__gesf2>
     632:	18 16       	cp	r1, r24
     634:	44 f4       	brge	.+16     	; 0x646 <_ZN4RF243csnEb+0x12a>
     636:	c3 01       	movw	r24, r6
     638:	b2 01       	movw	r22, r4
     63a:	0e 94 50 07 	call	0xea0	; 0xea0 <__fixunssfsi>
     63e:	cb 01       	movw	r24, r22
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	f1 f7       	brne	.-4      	; 0x640 <_ZN4RF243csnEb+0x124>
     644:	0a c0       	rjmp	.+20     	; 0x65a <_ZN4RF243csnEb+0x13e>
     646:	c5 01       	movw	r24, r10
     648:	b4 01       	movw	r22, r8
     64a:	0e 94 50 07 	call	0xea0	; 0xea0 <__fixunssfsi>
     64e:	16 2f       	mov	r17, r22
     650:	01 c0       	rjmp	.+2      	; 0x654 <_ZN4RF243csnEb+0x138>
     652:	11 e0       	ldi	r17, 0x01	; 1
     654:	61 2f       	mov	r22, r17
     656:	6a 95       	dec	r22
     658:	f1 f7       	brne	.-4      	; 0x656 <_ZN4RF243csnEb+0x13a>
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	df 90       	pop	r13
     666:	cf 90       	pop	r12
     668:	bf 90       	pop	r11
     66a:	af 90       	pop	r10
     66c:	9f 90       	pop	r9
     66e:	8f 90       	pop	r8
     670:	7f 90       	pop	r7
     672:	6f 90       	pop	r6
     674:	5f 90       	pop	r5
     676:	4f 90       	pop	r4
     678:	08 95       	ret

0000067a <_ZN4RF242ceEb>:
     67a:	fc 01       	movw	r30, r24
     67c:	80 81       	ld	r24, Z
     67e:	91 81       	ldd	r25, Z+1	; 0x01
     680:	22 81       	ldd	r18, Z+2	; 0x02
     682:	33 81       	ldd	r19, Z+3	; 0x03
     684:	82 17       	cp	r24, r18
     686:	93 07       	cpc	r25, r19
     688:	11 f0       	breq	.+4      	; 0x68e <_ZN4RF242ceEb+0x14>
     68a:	0e 94 b1 01 	call	0x362	; 0x362 <Write_Digital>
     68e:	84 e0       	ldi	r24, 0x04	; 4
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	f1 f7       	brne	.-4      	; 0x692 <_ZN4RF242ceEb+0x18>
     696:	08 95       	ret

00000698 <_ZN4RF2413read_registerEh>:
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	8c 01       	movw	r16, r24
     6a0:	c6 2f       	mov	r28, r22
     6a2:	80 e5       	ldi	r24, 0x50	; 80
     6a4:	8c bd       	out	0x2c, r24	; 44
     6a6:	1d bc       	out	0x2d, r1	; 45
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	c8 01       	movw	r24, r16
     6ac:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN4RF243csnEb>
     6b0:	cf 71       	andi	r28, 0x1F	; 31
     6b2:	ce bd       	out	0x2e, r28	; 46
     6b4:	00 00       	nop
     6b6:	0d b4       	in	r0, 0x2d	; 45
     6b8:	07 fe       	sbrs	r0, 7
     6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <_ZN4RF2413read_registerEh+0x1e>
     6bc:	8e b5       	in	r24, 0x2e	; 46
     6be:	8f ef       	ldi	r24, 0xFF	; 255
     6c0:	8e bd       	out	0x2e, r24	; 46
     6c2:	00 00       	nop
     6c4:	0d b4       	in	r0, 0x2d	; 45
     6c6:	07 fe       	sbrs	r0, 7
     6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <_ZN4RF2413read_registerEh+0x2c>
     6ca:	ce b5       	in	r28, 0x2e	; 46
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	c8 01       	movw	r24, r16
     6d0:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN4RF243csnEb>
     6d4:	8c 2f       	mov	r24, r28
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	08 95       	ret

000006de <_ZN4RF2414write_registerEhPKhh>:
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	8c 01       	movw	r16, r24
     6ec:	c6 2f       	mov	r28, r22
     6ee:	e4 2e       	mov	r14, r20
     6f0:	f5 2e       	mov	r15, r21
     6f2:	d2 2f       	mov	r29, r18
     6f4:	80 e5       	ldi	r24, 0x50	; 80
     6f6:	8c bd       	out	0x2c, r24	; 44
     6f8:	1d bc       	out	0x2d, r1	; 45
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	c8 01       	movw	r24, r16
     6fe:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN4RF243csnEb>
     702:	cf 71       	andi	r28, 0x1F	; 31
     704:	c0 62       	ori	r28, 0x20	; 32
     706:	ce bd       	out	0x2e, r28	; 46
     708:	00 00       	nop
     70a:	0d b4       	in	r0, 0x2d	; 45
     70c:	07 fe       	sbrs	r0, 7
     70e:	fd cf       	rjmp	.-6      	; 0x70a <_ZN4RF2414write_registerEhPKhh+0x2c>
     710:	ce b5       	in	r28, 0x2e	; 46
     712:	8f ef       	ldi	r24, 0xFF	; 255
     714:	8d 0f       	add	r24, r29
     716:	dd 23       	and	r29, r29
     718:	59 f0       	breq	.+22     	; 0x730 <_ZN4RF2414write_registerEhPKhh+0x52>
     71a:	ee 2d       	mov	r30, r14
     71c:	ff 2d       	mov	r31, r15
     71e:	91 91       	ld	r25, Z+
     720:	9e bd       	out	0x2e, r25	; 46
     722:	00 00       	nop
     724:	0d b4       	in	r0, 0x2d	; 45
     726:	07 fe       	sbrs	r0, 7
     728:	fd cf       	rjmp	.-6      	; 0x724 <_ZN4RF2414write_registerEhPKhh+0x46>
     72a:	9e b5       	in	r25, 0x2e	; 46
     72c:	81 50       	subi	r24, 0x01	; 1
     72e:	b8 f7       	brcc	.-18     	; 0x71e <_ZN4RF2414write_registerEhPKhh+0x40>
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	c8 01       	movw	r24, r16
     734:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN4RF243csnEb>
     738:	8c 2f       	mov	r24, r28
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	08 95       	ret

00000748 <_ZN4RF2414write_registerEhh>:
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	8c 01       	movw	r16, r24
     752:	c6 2f       	mov	r28, r22
     754:	d4 2f       	mov	r29, r20
     756:	80 e5       	ldi	r24, 0x50	; 80
     758:	8c bd       	out	0x2c, r24	; 44
     75a:	1d bc       	out	0x2d, r1	; 45
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	c8 01       	movw	r24, r16
     760:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN4RF243csnEb>
     764:	cf 71       	andi	r28, 0x1F	; 31
     766:	c0 62       	ori	r28, 0x20	; 32
     768:	ce bd       	out	0x2e, r28	; 46
     76a:	00 00       	nop
     76c:	0d b4       	in	r0, 0x2d	; 45
     76e:	07 fe       	sbrs	r0, 7
     770:	fd cf       	rjmp	.-6      	; 0x76c <_ZN4RF2414write_registerEhh+0x24>
     772:	ce b5       	in	r28, 0x2e	; 46
     774:	de bd       	out	0x2e, r29	; 46
     776:	00 00       	nop
     778:	0d b4       	in	r0, 0x2d	; 45
     77a:	07 fe       	sbrs	r0, 7
     77c:	fd cf       	rjmp	.-6      	; 0x778 <_ZN4RF2414write_registerEhh+0x30>
     77e:	8e b5       	in	r24, 0x2e	; 46
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	c8 01       	movw	r24, r16
     784:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN4RF243csnEb>
     788:	8c 2f       	mov	r24, r28
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <_ZN4RF2412read_payloadEPvh>:
     794:	df 92       	push	r13
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	ec 01       	movw	r28, r24
     7a4:	d6 2e       	mov	r13, r22
     7a6:	e7 2e       	mov	r14, r23
     7a8:	8f 81       	ldd	r24, Y+7	; 0x07
     7aa:	08 2f       	mov	r16, r24
     7ac:	48 17       	cp	r20, r24
     7ae:	08 f4       	brcc	.+2      	; 0x7b2 <_ZN4RF2412read_payloadEPvh+0x1e>
     7b0:	04 2f       	mov	r16, r20
     7b2:	98 85       	ldd	r25, Y+8	; 0x08
     7b4:	91 11       	cpse	r25, r1
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <_ZN4RF2412read_payloadEPvh+0x2a>
     7b8:	18 2f       	mov	r17, r24
     7ba:	10 1b       	sub	r17, r16
     7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <_ZN4RF2412read_payloadEPvh+0x2c>
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	80 e5       	ldi	r24, 0x50	; 80
     7c2:	8c bd       	out	0x2c, r24	; 44
     7c4:	1d bc       	out	0x2d, r1	; 45
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	ce 01       	movw	r24, r28
     7ca:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN4RF243csnEb>
     7ce:	81 e6       	ldi	r24, 0x61	; 97
     7d0:	8e bd       	out	0x2e, r24	; 46
     7d2:	00 00       	nop
     7d4:	0d b4       	in	r0, 0x2d	; 45
     7d6:	07 fe       	sbrs	r0, 7
     7d8:	fd cf       	rjmp	.-6      	; 0x7d4 <_ZN4RF2412read_payloadEPvh+0x40>
     7da:	fe b4       	in	r15, 0x2e	; 46
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	80 0f       	add	r24, r16
     7e0:	01 11       	cpse	r16, r1
     7e2:	05 c0       	rjmp	.+10     	; 0x7ee <_ZN4RF2412read_payloadEPvh+0x5a>
     7e4:	8f ef       	ldi	r24, 0xFF	; 255
     7e6:	81 0f       	add	r24, r17
     7e8:	11 11       	cpse	r17, r1
     7ea:	0e c0       	rjmp	.+28     	; 0x808 <_ZN4RF2412read_payloadEPvh+0x74>
     7ec:	16 c0       	rjmp	.+44     	; 0x81a <_ZN4RF2412read_payloadEPvh+0x86>
     7ee:	ed 2d       	mov	r30, r13
     7f0:	fe 2d       	mov	r31, r14
     7f2:	2f ef       	ldi	r18, 0xFF	; 255
     7f4:	2e bd       	out	0x2e, r18	; 46
     7f6:	00 00       	nop
     7f8:	0d b4       	in	r0, 0x2d	; 45
     7fa:	07 fe       	sbrs	r0, 7
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <_ZN4RF2412read_payloadEPvh+0x64>
     7fe:	9e b5       	in	r25, 0x2e	; 46
     800:	91 93       	st	Z+, r25
     802:	81 50       	subi	r24, 0x01	; 1
     804:	b8 f7       	brcc	.-18     	; 0x7f4 <_ZN4RF2412read_payloadEPvh+0x60>
     806:	ee cf       	rjmp	.-36     	; 0x7e4 <_ZN4RF2412read_payloadEPvh+0x50>
     808:	9f ef       	ldi	r25, 0xFF	; 255
     80a:	9e bd       	out	0x2e, r25	; 46
     80c:	00 00       	nop
     80e:	0d b4       	in	r0, 0x2d	; 45
     810:	07 fe       	sbrs	r0, 7
     812:	fd cf       	rjmp	.-6      	; 0x80e <_ZN4RF2412read_payloadEPvh+0x7a>
     814:	2e b5       	in	r18, 0x2e	; 46
     816:	81 50       	subi	r24, 0x01	; 1
     818:	c0 f7       	brcc	.-16     	; 0x80a <_ZN4RF2412read_payloadEPvh+0x76>
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	ce 01       	movw	r24, r28
     81e:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN4RF243csnEb>
     822:	8f 2d       	mov	r24, r15
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	08 95       	ret

00000834 <_ZN4RF248spiTransEh>:
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
     83c:	16 2f       	mov	r17, r22
     83e:	80 e5       	ldi	r24, 0x50	; 80
     840:	8c bd       	out	0x2c, r24	; 44
     842:	1d bc       	out	0x2d, r1	; 45
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	ce 01       	movw	r24, r28
     848:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN4RF243csnEb>
     84c:	1e bd       	out	0x2e, r17	; 46
     84e:	00 00       	nop
     850:	0d b4       	in	r0, 0x2d	; 45
     852:	07 fe       	sbrs	r0, 7
     854:	fd cf       	rjmp	.-6      	; 0x850 <_ZN4RF248spiTransEh+0x1c>
     856:	1e b5       	in	r17, 0x2e	; 46
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	ce 01       	movw	r24, r28
     85c:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN4RF243csnEb>
     860:	81 2f       	mov	r24, r17
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	08 95       	ret

0000086a <_ZN4RF248flush_rxEv>:
     86a:	62 ee       	ldi	r22, 0xE2	; 226
     86c:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN4RF248spiTransEh>
     870:	08 95       	ret

00000872 <_ZN4RF248flush_txEv>:
     872:	61 ee       	ldi	r22, 0xE1	; 225
     874:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN4RF248spiTransEh>
     878:	08 95       	ret

0000087a <_ZN4RF2410get_statusEv>:
     87a:	6f ef       	ldi	r22, 0xFF	; 255
     87c:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN4RF248spiTransEh>
     880:	08 95       	ret

00000882 <_ZN4RF24C1Ejj>:
     882:	fc 01       	movw	r30, r24
     884:	71 83       	std	Z+1, r23	; 0x01
     886:	60 83       	st	Z, r22
     888:	53 83       	std	Z+3, r21	; 0x03
     88a:	42 83       	std	Z+2, r20	; 0x02
     88c:	16 82       	std	Z+6, r1	; 0x06
     88e:	80 e2       	ldi	r24, 0x20	; 32
     890:	87 83       	std	Z+7, r24	; 0x07
     892:	10 86       	std	Z+8, r1	; 0x08
     894:	85 e0       	ldi	r24, 0x05	; 5
     896:	86 87       	std	Z+14, r24	; 0x0e
     898:	85 e0       	ldi	r24, 0x05	; 5
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 e0       	ldi	r26, 0x00	; 0
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	84 8b       	std	Z+20, r24	; 0x14
     8a2:	95 8b       	std	Z+21, r25	; 0x15
     8a4:	a6 8b       	std	Z+22, r26	; 0x16
     8a6:	b7 8b       	std	Z+23, r27	; 0x17
     8a8:	11 86       	std	Z+9, r1	; 0x09
     8aa:	08 95       	ret

000008ac <_ZN4RF2410setChannelEh>:
     8ac:	6d 37       	cpi	r22, 0x7D	; 125
     8ae:	10 f4       	brcc	.+4      	; 0x8b4 <_ZN4RF2410setChannelEh+0x8>
     8b0:	46 2f       	mov	r20, r22
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <_ZN4RF2410setChannelEh+0xa>
     8b4:	4d e7       	ldi	r20, 0x7D	; 125
     8b6:	65 e0       	ldi	r22, 0x05	; 5
     8b8:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>
     8bc:	08 95       	ret

000008be <_ZN4RF247powerUpEv>:
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN4RF2413read_registerEh>
     8ca:	81 fd       	sbrc	r24, 1
     8cc:	0a c0       	rjmp	.+20     	; 0x8e2 <_ZN4RF247powerUpEv+0x24>
     8ce:	48 2f       	mov	r20, r24
     8d0:	42 60       	ori	r20, 0x02	; 2
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	ce 01       	movw	r24, r28
     8d6:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>
     8da:	80 e1       	ldi	r24, 0x10	; 16
     8dc:	97 e2       	ldi	r25, 0x27	; 39
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <_ZN4RF247powerUpEv+0x20>
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <_ZN4RF249availableEPh>:
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	ec 01       	movw	r28, r24
     8f2:	8b 01       	movw	r16, r22
     8f4:	67 e1       	ldi	r22, 0x17	; 23
     8f6:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN4RF2413read_registerEh>
     8fa:	80 fd       	sbrc	r24, 0
     8fc:	0e c0       	rjmp	.+28     	; 0x91a <__stack+0x1b>
     8fe:	01 15       	cp	r16, r1
     900:	11 05       	cpc	r17, r1
     902:	69 f0       	breq	.+26     	; 0x91e <__stack+0x1f>
     904:	ce 01       	movw	r24, r28
     906:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN4RF2410get_statusEv>
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	95 95       	asr	r25
     90e:	87 95       	ror	r24
     910:	87 70       	andi	r24, 0x07	; 7
     912:	f8 01       	movw	r30, r16
     914:	80 83       	st	Z, r24
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	03 c0       	rjmp	.+6      	; 0x920 <__stack+0x21>
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	01 c0       	rjmp	.+2      	; 0x920 <__stack+0x21>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <_ZN4RF244readEPvh>:
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	ec 01       	movw	r28, r24
     930:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN4RF2412read_payloadEPvh>
     934:	40 e7       	ldi	r20, 0x70	; 112
     936:	67 e0       	ldi	r22, 0x07	; 7
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <_ZN4RF2415openReadingPipeEhy>:
     944:	af 92       	push	r10
     946:	bf 92       	push	r11
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
     95a:	28 97       	sbiw	r28, 0x08	; 8
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	5c 01       	movw	r10, r24
     968:	d6 2e       	mov	r13, r22
     96a:	e9 82       	std	Y+1, r14	; 0x01
     96c:	fa 82       	std	Y+2, r15	; 0x02
     96e:	0b 83       	std	Y+3, r16	; 0x03
     970:	1c 83       	std	Y+4, r17	; 0x04
     972:	2d 83       	std	Y+5, r18	; 0x05
     974:	3e 83       	std	Y+6, r19	; 0x06
     976:	4f 83       	std	Y+7, r20	; 0x07
     978:	58 87       	std	Y+8, r21	; 0x08
     97a:	61 11       	cpse	r22, r1
     97c:	0b c0       	rjmp	.+22     	; 0x994 <_ZN4RF2415openReadingPipeEhy+0x50>
     97e:	dc 01       	movw	r26, r24
     980:	1e 96       	adiw	r26, 0x0e	; 14
     982:	4c 91       	ld	r20, X
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	be 01       	movw	r22, r28
     988:	6f 5f       	subi	r22, 0xFF	; 255
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	09 96       	adiw	r24, 0x09	; 9
     98e:	0e 94 b8 08 	call	0x1170	; 0x1170 <memcpy>
     992:	06 c0       	rjmp	.+12     	; 0x9a0 <_ZN4RF2415openReadingPipeEhy+0x5c>
     994:	b6 e0       	ldi	r27, 0x06	; 6
     996:	b6 17       	cp	r27, r22
     998:	e8 f1       	brcs	.+122    	; 0xa14 <_ZN4RF2415openReadingPipeEhy+0xd0>
     99a:	e1 e0       	ldi	r30, 0x01	; 1
     99c:	e6 17       	cp	r30, r22
     99e:	78 f0       	brcs	.+30     	; 0x9be <_ZN4RF2415openReadingPipeEhy+0x7a>
     9a0:	ed 2d       	mov	r30, r13
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	e0 5f       	subi	r30, 0xF0	; 240
     9a6:	fe 4f       	sbci	r31, 0xFE	; 254
     9a8:	d5 01       	movw	r26, r10
     9aa:	1e 96       	adiw	r26, 0x0e	; 14
     9ac:	2c 91       	ld	r18, X
     9ae:	ae 01       	movw	r20, r28
     9b0:	4f 5f       	subi	r20, 0xFF	; 255
     9b2:	5f 4f       	sbci	r21, 0xFF	; 255
     9b4:	60 81       	ld	r22, Z
     9b6:	c5 01       	movw	r24, r10
     9b8:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN4RF2414write_registerEhPKhh>
     9bc:	0b c0       	rjmp	.+22     	; 0x9d4 <_ZN4RF2415openReadingPipeEhy+0x90>
     9be:	e6 2f       	mov	r30, r22
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	e0 5f       	subi	r30, 0xF0	; 240
     9c4:	fe 4f       	sbci	r31, 0xFE	; 254
     9c6:	21 e0       	ldi	r18, 0x01	; 1
     9c8:	ae 01       	movw	r20, r28
     9ca:	4f 5f       	subi	r20, 0xFF	; 255
     9cc:	5f 4f       	sbci	r21, 0xFF	; 255
     9ce:	60 81       	ld	r22, Z
     9d0:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN4RF2414write_registerEhPKhh>
     9d4:	0d 2d       	mov	r16, r13
     9d6:	10 e0       	ldi	r17, 0x00	; 0
     9d8:	f8 01       	movw	r30, r16
     9da:	e6 5f       	subi	r30, 0xF6	; 246
     9dc:	fe 4f       	sbci	r31, 0xFE	; 254
     9de:	d5 01       	movw	r26, r10
     9e0:	17 96       	adiw	r26, 0x07	; 7
     9e2:	4c 91       	ld	r20, X
     9e4:	60 81       	ld	r22, Z
     9e6:	c5 01       	movw	r24, r10
     9e8:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>
     9ec:	62 e0       	ldi	r22, 0x02	; 2
     9ee:	c5 01       	movw	r24, r10
     9f0:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN4RF2413read_registerEh>
     9f4:	f8 01       	movw	r30, r16
     9f6:	ea 5e       	subi	r30, 0xEA	; 234
     9f8:	fe 4f       	sbci	r31, 0xFE	; 254
     9fa:	41 e0       	ldi	r20, 0x01	; 1
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	00 80       	ld	r0, Z
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <_ZN4RF2415openReadingPipeEhy+0xc2>
     a02:	44 0f       	add	r20, r20
     a04:	55 1f       	adc	r21, r21
     a06:	0a 94       	dec	r0
     a08:	e2 f7       	brpl	.-8      	; 0xa02 <_ZN4RF2415openReadingPipeEhy+0xbe>
     a0a:	48 2b       	or	r20, r24
     a0c:	62 e0       	ldi	r22, 0x02	; 2
     a0e:	c5 01       	movw	r24, r10
     a10:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>
     a14:	28 96       	adiw	r28, 0x08	; 8
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	cd bf       	out	0x3d, r28	; 61
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	ff 90       	pop	r15
     a2a:	ef 90       	pop	r14
     a2c:	df 90       	pop	r13
     a2e:	bf 90       	pop	r11
     a30:	af 90       	pop	r10
     a32:	08 95       	ret

00000a34 <_ZN4RF2416closeReadingPipeEh>:
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	ec 01       	movw	r28, r24
     a3c:	16 2f       	mov	r17, r22
     a3e:	62 e0       	ldi	r22, 0x02	; 2
     a40:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN4RF2413read_registerEh>
     a44:	e1 2f       	mov	r30, r17
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	ea 5e       	subi	r30, 0xEA	; 234
     a4a:	fe 4f       	sbci	r31, 0xFE	; 254
     a4c:	41 e0       	ldi	r20, 0x01	; 1
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	00 80       	ld	r0, Z
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <_ZN4RF2416closeReadingPipeEh+0x24>
     a54:	44 0f       	add	r20, r20
     a56:	55 1f       	adc	r21, r21
     a58:	0a 94       	dec	r0
     a5a:	e2 f7       	brpl	.-8      	; 0xa54 <_ZN4RF2416closeReadingPipeEh+0x20>
     a5c:	40 95       	com	r20
     a5e:	48 23       	and	r20, r24
     a60:	62 e0       	ldi	r22, 0x02	; 2
     a62:	ce 01       	movw	r24, r28
     a64:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	08 95       	ret

00000a70 <_ZN4RF2414startListeningEv>:
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	ec 01       	movw	r28, r24
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN4RF2413read_registerEh>
     a7c:	48 2f       	mov	r20, r24
     a7e:	41 60       	ori	r20, 0x01	; 1
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	ce 01       	movw	r24, r28
     a84:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>
     a88:	40 e7       	ldi	r20, 0x70	; 112
     a8a:	67 e0       	ldi	r22, 0x07	; 7
     a8c:	ce 01       	movw	r24, r28
     a8e:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	ce 01       	movw	r24, r28
     a96:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN4RF242ceEb>
     a9a:	89 85       	ldd	r24, Y+9	; 0x09
     a9c:	88 23       	and	r24, r24
     a9e:	49 f0       	breq	.+18     	; 0xab2 <_ZN4RF2414startListeningEv+0x42>
     aa0:	2e 85       	ldd	r18, Y+14	; 0x0e
     aa2:	ae 01       	movw	r20, r28
     aa4:	47 5f       	subi	r20, 0xF7	; 247
     aa6:	5f 4f       	sbci	r21, 0xFF	; 255
     aa8:	6a e0       	ldi	r22, 0x0A	; 10
     aaa:	ce 01       	movw	r24, r28
     aac:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN4RF2414write_registerEhPKhh>
     ab0:	04 c0       	rjmp	.+8      	; 0xaba <_ZN4RF2414startListeningEv+0x4a>
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	ce 01       	movw	r24, r28
     ab6:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN4RF2416closeReadingPipeEh>
     aba:	6d e1       	ldi	r22, 0x1D	; 29
     abc:	ce 01       	movw	r24, r28
     abe:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN4RF2413read_registerEh>
     ac2:	81 ff       	sbrs	r24, 1
     ac4:	03 c0       	rjmp	.+6      	; 0xacc <_ZN4RF2414startListeningEv+0x5c>
     ac6:	ce 01       	movw	r24, r28
     ac8:	0e 94 39 04 	call	0x872	; 0x872 <_ZN4RF248flush_txEv>
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <_ZN4RF2415toggle_featuresEv>:
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	ec 01       	movw	r28, r24
     ada:	10 e5       	ldi	r17, 0x50	; 80
     adc:	1c bd       	out	0x2c, r17	; 44
     ade:	1d bc       	out	0x2d, r1	; 45
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN4RF243csnEb>
     ae6:	1e bd       	out	0x2e, r17	; 46
     ae8:	00 00       	nop
     aea:	0d b4       	in	r0, 0x2d	; 45
     aec:	07 fe       	sbrs	r0, 7
     aee:	fd cf       	rjmp	.-6      	; 0xaea <_ZN4RF2415toggle_featuresEv+0x18>
     af0:	8e b5       	in	r24, 0x2e	; 46
     af2:	83 e7       	ldi	r24, 0x73	; 115
     af4:	8e bd       	out	0x2e, r24	; 46
     af6:	00 00       	nop
     af8:	0d b4       	in	r0, 0x2d	; 45
     afa:	07 fe       	sbrs	r0, 7
     afc:	fd cf       	rjmp	.-6      	; 0xaf8 <_ZN4RF2415toggle_featuresEv+0x26>
     afe:	8e b5       	in	r24, 0x2e	; 46
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	ce 01       	movw	r24, r28
     b04:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN4RF243csnEb>
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	08 95       	ret

00000b10 <_ZN4RF2410setPALevelEh>:
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	8c 01       	movw	r16, r24
     b18:	c6 2f       	mov	r28, r22
     b1a:	66 e0       	ldi	r22, 0x06	; 6
     b1c:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN4RF2413read_registerEh>
     b20:	88 7f       	andi	r24, 0xF8	; 248
     b22:	c4 30       	cpi	r28, 0x04	; 4
     b24:	18 f4       	brcc	.+6      	; 0xb2c <_ZN4RF2410setPALevelEh+0x1c>
     b26:	cc 0f       	add	r28, r28
     b28:	cf 5f       	subi	r28, 0xFF	; 255
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <_ZN4RF2410setPALevelEh+0x1e>
     b2c:	c7 e0       	ldi	r28, 0x07	; 7
     b2e:	4c 2f       	mov	r20, r28
     b30:	48 2b       	or	r20, r24
     b32:	66 e0       	ldi	r22, 0x06	; 6
     b34:	c8 01       	movw	r24, r16
     b36:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	08 95       	ret

00000b42 <_ZN4RF2411setDataRateE15rf24_datarate_e>:

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	ec 01       	movw	r28, r24
     b4c:	06 2f       	mov	r16, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     b4e:	66 e0       	ldi	r22, 0x06	; 6
     b50:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     b54:	18 2f       	mov	r17, r24
     b56:	17 7d       	andi	r17, 0xD7	; 215
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
  //#endif
  if( speed == RF24_250KBPS )
     b58:	02 30       	cpi	r16, 0x02	; 2
     b5a:	51 f4       	brne	.+20     	; 0xb70 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2e>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
     b5c:	10 62       	ori	r17, 0x20	; 32
 /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=450;
  #else //16Mhz Arduino*/
	txDelay=155;
     b5e:	8b e9       	ldi	r24, 0x9B	; 155
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e0       	ldi	r26, 0x00	; 0
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	88 8b       	std	Y+16, r24	; 0x10
     b68:	99 8b       	std	Y+17, r25	; 0x11
     b6a:	aa 8b       	std	Y+18, r26	; 0x12
     b6c:	bb 8b       	std	Y+19, r27	; 0x13
     b6e:	14 c0       	rjmp	.+40     	; 0xb98 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     b70:	01 30       	cpi	r16, 0x01	; 1
     b72:	49 f0       	breq	.+18     	; 0xb86 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
/*  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
     b74:	85 e5       	ldi	r24, 0x55	; 85
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	88 8b       	std	Y+16, r24	; 0x10
     b7e:	99 8b       	std	Y+17, r25	; 0x11
     b80:	aa 8b       	std	Y+18, r26	; 0x12
     b82:	bb 8b       	std	Y+19, r27	; 0x13
     b84:	09 c0       	rjmp	.+18     	; 0xb98 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
     b86:	18 60       	ori	r17, 0x08	; 8
     /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txDelay=190;
      #else //16Mhz Arduino	*/  
	 txDelay=65;
     b88:	81 e4       	ldi	r24, 0x41	; 65
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	88 8b       	std	Y+16, r24	; 0x10
     b92:	99 8b       	std	Y+17, r25	; 0x11
     b94:	aa 8b       	std	Y+18, r26	; 0x12
     b96:	bb 8b       	std	Y+19, r27	; 0x13
	  //#endif
    }
  }
  write_register(RF_SETUP,setup);
     b98:	41 2f       	mov	r20, r17
     b9a:	66 e0       	ldi	r22, 0x06	; 6
     b9c:	ce 01       	movw	r24, r28
     b9e:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     ba2:	66 e0       	ldi	r22, 0x06	; 6
     ba4:	ce 01       	movw	r24, r28
     ba6:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN4RF2413read_registerEh>
  {
    result = true;
  }
  return result;
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	18 13       	cpse	r17, r24
     bae:	90 e0       	ldi	r25, 0x00	; 0
}
     bb0:	89 2f       	mov	r24, r25
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	08 95       	ret

00000bbc <_ZN4RF245beginEv>:
}

/****************************************************************************/

bool RF24::begin(void)
{
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	ec 01       	movw	r28, r24
  uint8_t setup=0;

    if (ce_pin != csn_pin) Set_pin(ce_pin,OUT);  
     bc4:	88 81       	ld	r24, Y
     bc6:	99 81       	ldd	r25, Y+1	; 0x01
     bc8:	2a 81       	ldd	r18, Y+2	; 0x02
     bca:	3b 81       	ldd	r19, Y+3	; 0x03
     bcc:	82 17       	cp	r24, r18
     bce:	93 07       	cpc	r25, r19
     bd0:	21 f0       	breq	.+8      	; 0xbda <_ZN4RF245beginEv+0x1e>
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	0e 94 88 01 	call	0x310	; 0x310 <Set_pin>
        Set_pin(csn_pin,OUT);
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	9b 81       	ldd	r25, Y+3	; 0x03
     be2:	0e 94 88 01 	call	0x310	; 0x310 <Set_pin>
    _SPI.begin();
     be6:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN8SPIClass5beginEv>
    ce(low);
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	ce 01       	movw	r24, r28
     bee:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN4RF242ceEb>
  	csn(high);
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	ce 01       	movw	r24, r28
     bf6:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN4RF243csnEb>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     bfa:	80 e1       	ldi	r24, 0x10	; 16
     bfc:	97 e2       	ldi	r25, 0x27	; 39
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <_ZN4RF245beginEv+0x42>
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: _delay_ms is based on P-variant whereby non-P *may* require different timing.
  _delay_ms( 5 ) ;

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;
     c02:	4c e0       	ldi	r20, 0x0C	; 12
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	ce 01       	movw	r24, r28
     c08:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     c0c:	4f e5       	ldi	r20, 0x5F	; 95
     c0e:	64 e0       	ldi	r22, 0x04	; 4
     c10:	ce 01       	movw	r24, r28
     c12:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
     c16:	62 e0       	ldi	r22, 0x02	; 2
     c18:	ce 01       	movw	r24, r28
     c1a:	0e 94 a1 05 	call	0xb42	; 0xb42 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     c1e:	88 23       	and	r24, r24
     c20:	11 f0       	breq	.+4      	; 0xc26 <_ZN4RF245beginEv+0x6a>
  {
    p_variant = true ;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	8e 83       	std	Y+6, r24	; 0x06
  }
  setup = read_register(RF_SETUP);
     c26:	66 e0       	ldi	r22, 0x06	; 6
     c28:	ce 01       	movw	r24, r28
     c2a:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN4RF2413read_registerEh>
     c2e:	18 2f       	mov	r17, r24
 if( setup == 0b00001110 )     // register default for nRF24L01P
     c30:	8e 30       	cpi	r24, 0x0E	; 14
     c32:	11 f4       	brne	.+4      	; 0xc38 <_ZN4RF245beginEv+0x7c>
  {
    p_variant = true ;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	8e 83       	std	Y+6, r24	; 0x06
  }
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	ce 01       	movw	r24, r28
     c3c:	0e 94 a1 05 	call	0xb42	; 0xb42 <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
     c40:	ce 01       	movw	r24, r28
     c42:	0e 94 69 05 	call	0xad2	; 0xad2 <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	6d e1       	ldi	r22, 0x1D	; 29
     c4a:	ce 01       	movw	r24, r28
     c4c:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	6c e1       	ldi	r22, 0x1C	; 28
     c54:	ce 01       	movw	r24, r28
     c56:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>
  dynamic_payloads_enabled = false;
     c5a:	18 86       	std	Y+8, r1	; 0x08

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     c5c:	40 e7       	ldi	r20, 0x70	; 112
     c5e:	67 e0       	ldi	r22, 0x07	; 7
     c60:	ce 01       	movw	r24, r28
     c62:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
     c66:	6c e4       	ldi	r22, 0x4C	; 76
     c68:	ce 01       	movw	r24, r28
     c6a:	0e 94 56 04 	call	0x8ac	; 0x8ac <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
     c6e:	ce 01       	movw	r24, r28
     c70:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN4RF248flush_rxEv>
  flush_tx();
     c74:	ce 01       	movw	r24, r28
     c76:	0e 94 39 04 	call	0x872	; 0x872 <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
     c7a:	ce 01       	movw	r24, r28
     c7c:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN4RF2413read_registerEh>
     c88:	48 2f       	mov	r20, r24
     c8a:	4e 7f       	andi	r20, 0xFE	; 254
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	ce 01       	movw	r24, r28
     c90:	0e 94 a4 03 	call	0x748	; 0x748 <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
     c94:	11 50       	subi	r17, 0x01	; 1
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	1e 3f       	cpi	r17, 0xFE	; 254
     c9a:	08 f0       	brcs	.+2      	; 0xc9e <_ZN4RF245beginEv+0xe2>
     c9c:	80 e0       	ldi	r24, 0x00	; 0
}
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	08 95       	ret

00000ca6 <_ZN8SPIClass5beginEv>:
void SPIClass::begin()
{
 //  cli();//noInterrupts(); // Protect from a scheduler and prevent transactionBegin
 
    
    Set_pin(SS, OUT);
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	8a e0       	ldi	r24, 0x0A	; 10
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 88 01 	call	0x310	; 0x310 <Set_pin>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUT.
    SPCR |= _BV(MSTR);
     cb2:	8c b5       	in	r24, 0x2c	; 44
     cb4:	80 61       	ori	r24, 0x10	; 16
     cb6:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     cb8:	8c b5       	in	r24, 0x2c	; 44
     cba:	80 64       	ori	r24, 0x40	; 64
     cbc:	8c bd       	out	0x2c, r24	; 44
    // Set direction register for SCK and MOSI pin.
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    Set_pin(SCK, OUT);
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	8d e0       	ldi	r24, 0x0D	; 13
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 88 01 	call	0x310	; 0x310 <Set_pin>
    Set_pin(MOSI, OUT);
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	8b e0       	ldi	r24, 0x0B	; 11
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 88 01 	call	0x310	; 0x310 <Set_pin>
     cd6:	08 95       	ret

00000cd8 <__subsf3>:
     cd8:	50 58       	subi	r21, 0x80	; 128

00000cda <__addsf3>:
     cda:	bb 27       	eor	r27, r27
     cdc:	aa 27       	eor	r26, r26
     cde:	0e 94 84 06 	call	0xd08	; 0xd08 <__addsf3x>
     ce2:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__fp_round>
     ce6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__fp_pscA>
     cea:	38 f0       	brcs	.+14     	; 0xcfa <__addsf3+0x20>
     cec:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__fp_pscB>
     cf0:	20 f0       	brcs	.+8      	; 0xcfa <__addsf3+0x20>
     cf2:	39 f4       	brne	.+14     	; 0xd02 <__addsf3+0x28>
     cf4:	9f 3f       	cpi	r25, 0xFF	; 255
     cf6:	19 f4       	brne	.+6      	; 0xcfe <__addsf3+0x24>
     cf8:	26 f4       	brtc	.+8      	; 0xd02 <__addsf3+0x28>
     cfa:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_nan>
     cfe:	0e f4       	brtc	.+2      	; 0xd02 <__addsf3+0x28>
     d00:	e0 95       	com	r30
     d02:	e7 fb       	bst	r30, 7
     d04:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_inf>

00000d08 <__addsf3x>:
     d08:	e9 2f       	mov	r30, r25
     d0a:	0e 94 08 08 	call	0x1010	; 0x1010 <__fp_split3>
     d0e:	58 f3       	brcs	.-42     	; 0xce6 <__addsf3+0xc>
     d10:	ba 17       	cp	r27, r26
     d12:	62 07       	cpc	r22, r18
     d14:	73 07       	cpc	r23, r19
     d16:	84 07       	cpc	r24, r20
     d18:	95 07       	cpc	r25, r21
     d1a:	20 f0       	brcs	.+8      	; 0xd24 <__addsf3x+0x1c>
     d1c:	79 f4       	brne	.+30     	; 0xd3c <__addsf3x+0x34>
     d1e:	a6 f5       	brtc	.+104    	; 0xd88 <__addsf3x+0x80>
     d20:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__fp_zero>
     d24:	0e f4       	brtc	.+2      	; 0xd28 <__addsf3x+0x20>
     d26:	e0 95       	com	r30
     d28:	0b 2e       	mov	r0, r27
     d2a:	ba 2f       	mov	r27, r26
     d2c:	a0 2d       	mov	r26, r0
     d2e:	0b 01       	movw	r0, r22
     d30:	b9 01       	movw	r22, r18
     d32:	90 01       	movw	r18, r0
     d34:	0c 01       	movw	r0, r24
     d36:	ca 01       	movw	r24, r20
     d38:	a0 01       	movw	r20, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	ff 27       	eor	r31, r31
     d3e:	59 1b       	sub	r21, r25
     d40:	99 f0       	breq	.+38     	; 0xd68 <__addsf3x+0x60>
     d42:	59 3f       	cpi	r21, 0xF9	; 249
     d44:	50 f4       	brcc	.+20     	; 0xd5a <__addsf3x+0x52>
     d46:	50 3e       	cpi	r21, 0xE0	; 224
     d48:	68 f1       	brcs	.+90     	; 0xda4 <__addsf3x+0x9c>
     d4a:	1a 16       	cp	r1, r26
     d4c:	f0 40       	sbci	r31, 0x00	; 0
     d4e:	a2 2f       	mov	r26, r18
     d50:	23 2f       	mov	r18, r19
     d52:	34 2f       	mov	r19, r20
     d54:	44 27       	eor	r20, r20
     d56:	58 5f       	subi	r21, 0xF8	; 248
     d58:	f3 cf       	rjmp	.-26     	; 0xd40 <__addsf3x+0x38>
     d5a:	46 95       	lsr	r20
     d5c:	37 95       	ror	r19
     d5e:	27 95       	ror	r18
     d60:	a7 95       	ror	r26
     d62:	f0 40       	sbci	r31, 0x00	; 0
     d64:	53 95       	inc	r21
     d66:	c9 f7       	brne	.-14     	; 0xd5a <__addsf3x+0x52>
     d68:	7e f4       	brtc	.+30     	; 0xd88 <__addsf3x+0x80>
     d6a:	1f 16       	cp	r1, r31
     d6c:	ba 0b       	sbc	r27, r26
     d6e:	62 0b       	sbc	r22, r18
     d70:	73 0b       	sbc	r23, r19
     d72:	84 0b       	sbc	r24, r20
     d74:	ba f0       	brmi	.+46     	; 0xda4 <__addsf3x+0x9c>
     d76:	91 50       	subi	r25, 0x01	; 1
     d78:	a1 f0       	breq	.+40     	; 0xda2 <__addsf3x+0x9a>
     d7a:	ff 0f       	add	r31, r31
     d7c:	bb 1f       	adc	r27, r27
     d7e:	66 1f       	adc	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	88 1f       	adc	r24, r24
     d84:	c2 f7       	brpl	.-16     	; 0xd76 <__addsf3x+0x6e>
     d86:	0e c0       	rjmp	.+28     	; 0xda4 <__addsf3x+0x9c>
     d88:	ba 0f       	add	r27, r26
     d8a:	62 1f       	adc	r22, r18
     d8c:	73 1f       	adc	r23, r19
     d8e:	84 1f       	adc	r24, r20
     d90:	48 f4       	brcc	.+18     	; 0xda4 <__addsf3x+0x9c>
     d92:	87 95       	ror	r24
     d94:	77 95       	ror	r23
     d96:	67 95       	ror	r22
     d98:	b7 95       	ror	r27
     d9a:	f7 95       	ror	r31
     d9c:	9e 3f       	cpi	r25, 0xFE	; 254
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <__addsf3x+0x9a>
     da0:	b0 cf       	rjmp	.-160    	; 0xd02 <__addsf3+0x28>
     da2:	93 95       	inc	r25
     da4:	88 0f       	add	r24, r24
     da6:	08 f0       	brcs	.+2      	; 0xdaa <__addsf3x+0xa2>
     da8:	99 27       	eor	r25, r25
     daa:	ee 0f       	add	r30, r30
     dac:	97 95       	ror	r25
     dae:	87 95       	ror	r24
     db0:	08 95       	ret

00000db2 <__cmpsf2>:
     db2:	0e 94 bc 07 	call	0xf78	; 0xf78 <__fp_cmp>
     db6:	08 f4       	brcc	.+2      	; 0xdba <__cmpsf2+0x8>
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	08 95       	ret

00000dbc <__divsf3>:
     dbc:	0e 94 f2 06 	call	0xde4	; 0xde4 <__divsf3x>
     dc0:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__fp_round>
     dc4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__fp_pscB>
     dc8:	58 f0       	brcs	.+22     	; 0xde0 <__divsf3+0x24>
     dca:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__fp_pscA>
     dce:	40 f0       	brcs	.+16     	; 0xde0 <__divsf3+0x24>
     dd0:	29 f4       	brne	.+10     	; 0xddc <__divsf3+0x20>
     dd2:	5f 3f       	cpi	r21, 0xFF	; 255
     dd4:	29 f0       	breq	.+10     	; 0xde0 <__divsf3+0x24>
     dd6:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_inf>
     dda:	51 11       	cpse	r21, r1
     ddc:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__fp_szero>
     de0:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_nan>

00000de4 <__divsf3x>:
     de4:	0e 94 08 08 	call	0x1010	; 0x1010 <__fp_split3>
     de8:	68 f3       	brcs	.-38     	; 0xdc4 <__divsf3+0x8>

00000dea <__divsf3_pse>:
     dea:	99 23       	and	r25, r25
     dec:	b1 f3       	breq	.-20     	; 0xdda <__divsf3+0x1e>
     dee:	55 23       	and	r21, r21
     df0:	91 f3       	breq	.-28     	; 0xdd6 <__divsf3+0x1a>
     df2:	95 1b       	sub	r25, r21
     df4:	55 0b       	sbc	r21, r21
     df6:	bb 27       	eor	r27, r27
     df8:	aa 27       	eor	r26, r26
     dfa:	62 17       	cp	r22, r18
     dfc:	73 07       	cpc	r23, r19
     dfe:	84 07       	cpc	r24, r20
     e00:	38 f0       	brcs	.+14     	; 0xe10 <__divsf3_pse+0x26>
     e02:	9f 5f       	subi	r25, 0xFF	; 255
     e04:	5f 4f       	sbci	r21, 0xFF	; 255
     e06:	22 0f       	add	r18, r18
     e08:	33 1f       	adc	r19, r19
     e0a:	44 1f       	adc	r20, r20
     e0c:	aa 1f       	adc	r26, r26
     e0e:	a9 f3       	breq	.-22     	; 0xdfa <__divsf3_pse+0x10>
     e10:	35 d0       	rcall	.+106    	; 0xe7c <__divsf3_pse+0x92>
     e12:	0e 2e       	mov	r0, r30
     e14:	3a f0       	brmi	.+14     	; 0xe24 <__divsf3_pse+0x3a>
     e16:	e0 e8       	ldi	r30, 0x80	; 128
     e18:	32 d0       	rcall	.+100    	; 0xe7e <__divsf3_pse+0x94>
     e1a:	91 50       	subi	r25, 0x01	; 1
     e1c:	50 40       	sbci	r21, 0x00	; 0
     e1e:	e6 95       	lsr	r30
     e20:	00 1c       	adc	r0, r0
     e22:	ca f7       	brpl	.-14     	; 0xe16 <__divsf3_pse+0x2c>
     e24:	2b d0       	rcall	.+86     	; 0xe7c <__divsf3_pse+0x92>
     e26:	fe 2f       	mov	r31, r30
     e28:	29 d0       	rcall	.+82     	; 0xe7c <__divsf3_pse+0x92>
     e2a:	66 0f       	add	r22, r22
     e2c:	77 1f       	adc	r23, r23
     e2e:	88 1f       	adc	r24, r24
     e30:	bb 1f       	adc	r27, r27
     e32:	26 17       	cp	r18, r22
     e34:	37 07       	cpc	r19, r23
     e36:	48 07       	cpc	r20, r24
     e38:	ab 07       	cpc	r26, r27
     e3a:	b0 e8       	ldi	r27, 0x80	; 128
     e3c:	09 f0       	breq	.+2      	; 0xe40 <__divsf3_pse+0x56>
     e3e:	bb 0b       	sbc	r27, r27
     e40:	80 2d       	mov	r24, r0
     e42:	bf 01       	movw	r22, r30
     e44:	ff 27       	eor	r31, r31
     e46:	93 58       	subi	r25, 0x83	; 131
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	3a f0       	brmi	.+14     	; 0xe5a <__divsf3_pse+0x70>
     e4c:	9e 3f       	cpi	r25, 0xFE	; 254
     e4e:	51 05       	cpc	r21, r1
     e50:	78 f0       	brcs	.+30     	; 0xe70 <__divsf3_pse+0x86>
     e52:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_inf>
     e56:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__fp_szero>
     e5a:	5f 3f       	cpi	r21, 0xFF	; 255
     e5c:	e4 f3       	brlt	.-8      	; 0xe56 <__divsf3_pse+0x6c>
     e5e:	98 3e       	cpi	r25, 0xE8	; 232
     e60:	d4 f3       	brlt	.-12     	; 0xe56 <__divsf3_pse+0x6c>
     e62:	86 95       	lsr	r24
     e64:	77 95       	ror	r23
     e66:	67 95       	ror	r22
     e68:	b7 95       	ror	r27
     e6a:	f7 95       	ror	r31
     e6c:	9f 5f       	subi	r25, 0xFF	; 255
     e6e:	c9 f7       	brne	.-14     	; 0xe62 <__divsf3_pse+0x78>
     e70:	88 0f       	add	r24, r24
     e72:	91 1d       	adc	r25, r1
     e74:	96 95       	lsr	r25
     e76:	87 95       	ror	r24
     e78:	97 f9       	bld	r25, 7
     e7a:	08 95       	ret
     e7c:	e1 e0       	ldi	r30, 0x01	; 1
     e7e:	66 0f       	add	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	88 1f       	adc	r24, r24
     e84:	bb 1f       	adc	r27, r27
     e86:	62 17       	cp	r22, r18
     e88:	73 07       	cpc	r23, r19
     e8a:	84 07       	cpc	r24, r20
     e8c:	ba 07       	cpc	r27, r26
     e8e:	20 f0       	brcs	.+8      	; 0xe98 <__divsf3_pse+0xae>
     e90:	62 1b       	sub	r22, r18
     e92:	73 0b       	sbc	r23, r19
     e94:	84 0b       	sbc	r24, r20
     e96:	ba 0b       	sbc	r27, r26
     e98:	ee 1f       	adc	r30, r30
     e9a:	88 f7       	brcc	.-30     	; 0xe7e <__divsf3_pse+0x94>
     e9c:	e0 95       	com	r30
     e9e:	08 95       	ret

00000ea0 <__fixunssfsi>:
     ea0:	0e 94 10 08 	call	0x1020	; 0x1020 <__fp_splitA>
     ea4:	88 f0       	brcs	.+34     	; 0xec8 <__fixunssfsi+0x28>
     ea6:	9f 57       	subi	r25, 0x7F	; 127
     ea8:	98 f0       	brcs	.+38     	; 0xed0 <__fixunssfsi+0x30>
     eaa:	b9 2f       	mov	r27, r25
     eac:	99 27       	eor	r25, r25
     eae:	b7 51       	subi	r27, 0x17	; 23
     eb0:	b0 f0       	brcs	.+44     	; 0xede <__fixunssfsi+0x3e>
     eb2:	e1 f0       	breq	.+56     	; 0xeec <__fixunssfsi+0x4c>
     eb4:	66 0f       	add	r22, r22
     eb6:	77 1f       	adc	r23, r23
     eb8:	88 1f       	adc	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	1a f0       	brmi	.+6      	; 0xec4 <__fixunssfsi+0x24>
     ebe:	ba 95       	dec	r27
     ec0:	c9 f7       	brne	.-14     	; 0xeb4 <__fixunssfsi+0x14>
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <__fixunssfsi+0x4c>
     ec4:	b1 30       	cpi	r27, 0x01	; 1
     ec6:	91 f0       	breq	.+36     	; 0xeec <__fixunssfsi+0x4c>
     ec8:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fp_zero>
     ecc:	b1 e0       	ldi	r27, 0x01	; 1
     ece:	08 95       	ret
     ed0:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__fp_zero>
     ed4:	67 2f       	mov	r22, r23
     ed6:	78 2f       	mov	r23, r24
     ed8:	88 27       	eor	r24, r24
     eda:	b8 5f       	subi	r27, 0xF8	; 248
     edc:	39 f0       	breq	.+14     	; 0xeec <__fixunssfsi+0x4c>
     ede:	b9 3f       	cpi	r27, 0xF9	; 249
     ee0:	cc f3       	brlt	.-14     	; 0xed4 <__fixunssfsi+0x34>
     ee2:	86 95       	lsr	r24
     ee4:	77 95       	ror	r23
     ee6:	67 95       	ror	r22
     ee8:	b3 95       	inc	r27
     eea:	d9 f7       	brne	.-10     	; 0xee2 <__fixunssfsi+0x42>
     eec:	3e f4       	brtc	.+14     	; 0xefc <__fixunssfsi+0x5c>
     eee:	90 95       	com	r25
     ef0:	80 95       	com	r24
     ef2:	70 95       	com	r23
     ef4:	61 95       	neg	r22
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	8f 4f       	sbci	r24, 0xFF	; 255
     efa:	9f 4f       	sbci	r25, 0xFF	; 255
     efc:	08 95       	ret

00000efe <__floatunsisf>:
     efe:	e8 94       	clt
     f00:	09 c0       	rjmp	.+18     	; 0xf14 <__floatsisf+0x12>

00000f02 <__floatsisf>:
     f02:	97 fb       	bst	r25, 7
     f04:	3e f4       	brtc	.+14     	; 0xf14 <__floatsisf+0x12>
     f06:	90 95       	com	r25
     f08:	80 95       	com	r24
     f0a:	70 95       	com	r23
     f0c:	61 95       	neg	r22
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	8f 4f       	sbci	r24, 0xFF	; 255
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	99 23       	and	r25, r25
     f16:	a9 f0       	breq	.+42     	; 0xf42 <__floatsisf+0x40>
     f18:	f9 2f       	mov	r31, r25
     f1a:	96 e9       	ldi	r25, 0x96	; 150
     f1c:	bb 27       	eor	r27, r27
     f1e:	93 95       	inc	r25
     f20:	f6 95       	lsr	r31
     f22:	87 95       	ror	r24
     f24:	77 95       	ror	r23
     f26:	67 95       	ror	r22
     f28:	b7 95       	ror	r27
     f2a:	f1 11       	cpse	r31, r1
     f2c:	f8 cf       	rjmp	.-16     	; 0xf1e <__floatsisf+0x1c>
     f2e:	fa f4       	brpl	.+62     	; 0xf6e <__floatsisf+0x6c>
     f30:	bb 0f       	add	r27, r27
     f32:	11 f4       	brne	.+4      	; 0xf38 <__floatsisf+0x36>
     f34:	60 ff       	sbrs	r22, 0
     f36:	1b c0       	rjmp	.+54     	; 0xf6e <__floatsisf+0x6c>
     f38:	6f 5f       	subi	r22, 0xFF	; 255
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	8f 4f       	sbci	r24, 0xFF	; 255
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	16 c0       	rjmp	.+44     	; 0xf6e <__floatsisf+0x6c>
     f42:	88 23       	and	r24, r24
     f44:	11 f0       	breq	.+4      	; 0xf4a <__floatsisf+0x48>
     f46:	96 e9       	ldi	r25, 0x96	; 150
     f48:	11 c0       	rjmp	.+34     	; 0xf6c <__floatsisf+0x6a>
     f4a:	77 23       	and	r23, r23
     f4c:	21 f0       	breq	.+8      	; 0xf56 <__floatsisf+0x54>
     f4e:	9e e8       	ldi	r25, 0x8E	; 142
     f50:	87 2f       	mov	r24, r23
     f52:	76 2f       	mov	r23, r22
     f54:	05 c0       	rjmp	.+10     	; 0xf60 <__floatsisf+0x5e>
     f56:	66 23       	and	r22, r22
     f58:	71 f0       	breq	.+28     	; 0xf76 <__floatsisf+0x74>
     f5a:	96 e8       	ldi	r25, 0x86	; 134
     f5c:	86 2f       	mov	r24, r22
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	2a f0       	brmi	.+10     	; 0xf6e <__floatsisf+0x6c>
     f64:	9a 95       	dec	r25
     f66:	66 0f       	add	r22, r22
     f68:	77 1f       	adc	r23, r23
     f6a:	88 1f       	adc	r24, r24
     f6c:	da f7       	brpl	.-10     	; 0xf64 <__floatsisf+0x62>
     f6e:	88 0f       	add	r24, r24
     f70:	96 95       	lsr	r25
     f72:	87 95       	ror	r24
     f74:	97 f9       	bld	r25, 7
     f76:	08 95       	ret

00000f78 <__fp_cmp>:
     f78:	99 0f       	add	r25, r25
     f7a:	00 08       	sbc	r0, r0
     f7c:	55 0f       	add	r21, r21
     f7e:	aa 0b       	sbc	r26, r26
     f80:	e0 e8       	ldi	r30, 0x80	; 128
     f82:	fe ef       	ldi	r31, 0xFE	; 254
     f84:	16 16       	cp	r1, r22
     f86:	17 06       	cpc	r1, r23
     f88:	e8 07       	cpc	r30, r24
     f8a:	f9 07       	cpc	r31, r25
     f8c:	c0 f0       	brcs	.+48     	; 0xfbe <__fp_cmp+0x46>
     f8e:	12 16       	cp	r1, r18
     f90:	13 06       	cpc	r1, r19
     f92:	e4 07       	cpc	r30, r20
     f94:	f5 07       	cpc	r31, r21
     f96:	98 f0       	brcs	.+38     	; 0xfbe <__fp_cmp+0x46>
     f98:	62 1b       	sub	r22, r18
     f9a:	73 0b       	sbc	r23, r19
     f9c:	84 0b       	sbc	r24, r20
     f9e:	95 0b       	sbc	r25, r21
     fa0:	39 f4       	brne	.+14     	; 0xfb0 <__fp_cmp+0x38>
     fa2:	0a 26       	eor	r0, r26
     fa4:	61 f0       	breq	.+24     	; 0xfbe <__fp_cmp+0x46>
     fa6:	23 2b       	or	r18, r19
     fa8:	24 2b       	or	r18, r20
     faa:	25 2b       	or	r18, r21
     fac:	21 f4       	brne	.+8      	; 0xfb6 <__fp_cmp+0x3e>
     fae:	08 95       	ret
     fb0:	0a 26       	eor	r0, r26
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <__fp_cmp+0x3e>
     fb4:	a1 40       	sbci	r26, 0x01	; 1
     fb6:	a6 95       	lsr	r26
     fb8:	8f ef       	ldi	r24, 0xFF	; 255
     fba:	81 1d       	adc	r24, r1
     fbc:	81 1d       	adc	r24, r1
     fbe:	08 95       	ret

00000fc0 <__fp_inf>:
     fc0:	97 f9       	bld	r25, 7
     fc2:	9f 67       	ori	r25, 0x7F	; 127
     fc4:	80 e8       	ldi	r24, 0x80	; 128
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	08 95       	ret

00000fcc <__fp_nan>:
     fcc:	9f ef       	ldi	r25, 0xFF	; 255
     fce:	80 ec       	ldi	r24, 0xC0	; 192
     fd0:	08 95       	ret

00000fd2 <__fp_pscA>:
     fd2:	00 24       	eor	r0, r0
     fd4:	0a 94       	dec	r0
     fd6:	16 16       	cp	r1, r22
     fd8:	17 06       	cpc	r1, r23
     fda:	18 06       	cpc	r1, r24
     fdc:	09 06       	cpc	r0, r25
     fde:	08 95       	ret

00000fe0 <__fp_pscB>:
     fe0:	00 24       	eor	r0, r0
     fe2:	0a 94       	dec	r0
     fe4:	12 16       	cp	r1, r18
     fe6:	13 06       	cpc	r1, r19
     fe8:	14 06       	cpc	r1, r20
     fea:	05 06       	cpc	r0, r21
     fec:	08 95       	ret

00000fee <__fp_round>:
     fee:	09 2e       	mov	r0, r25
     ff0:	03 94       	inc	r0
     ff2:	00 0c       	add	r0, r0
     ff4:	11 f4       	brne	.+4      	; 0xffa <__fp_round+0xc>
     ff6:	88 23       	and	r24, r24
     ff8:	52 f0       	brmi	.+20     	; 0x100e <__fp_round+0x20>
     ffa:	bb 0f       	add	r27, r27
     ffc:	40 f4       	brcc	.+16     	; 0x100e <__fp_round+0x20>
     ffe:	bf 2b       	or	r27, r31
    1000:	11 f4       	brne	.+4      	; 0x1006 <__fp_round+0x18>
    1002:	60 ff       	sbrs	r22, 0
    1004:	04 c0       	rjmp	.+8      	; 0x100e <__fp_round+0x20>
    1006:	6f 5f       	subi	r22, 0xFF	; 255
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8f 4f       	sbci	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	08 95       	ret

00001010 <__fp_split3>:
    1010:	57 fd       	sbrc	r21, 7
    1012:	90 58       	subi	r25, 0x80	; 128
    1014:	44 0f       	add	r20, r20
    1016:	55 1f       	adc	r21, r21
    1018:	59 f0       	breq	.+22     	; 0x1030 <__fp_splitA+0x10>
    101a:	5f 3f       	cpi	r21, 0xFF	; 255
    101c:	71 f0       	breq	.+28     	; 0x103a <__fp_splitA+0x1a>
    101e:	47 95       	ror	r20

00001020 <__fp_splitA>:
    1020:	88 0f       	add	r24, r24
    1022:	97 fb       	bst	r25, 7
    1024:	99 1f       	adc	r25, r25
    1026:	61 f0       	breq	.+24     	; 0x1040 <__fp_splitA+0x20>
    1028:	9f 3f       	cpi	r25, 0xFF	; 255
    102a:	79 f0       	breq	.+30     	; 0x104a <__fp_splitA+0x2a>
    102c:	87 95       	ror	r24
    102e:	08 95       	ret
    1030:	12 16       	cp	r1, r18
    1032:	13 06       	cpc	r1, r19
    1034:	14 06       	cpc	r1, r20
    1036:	55 1f       	adc	r21, r21
    1038:	f2 cf       	rjmp	.-28     	; 0x101e <__fp_split3+0xe>
    103a:	46 95       	lsr	r20
    103c:	f1 df       	rcall	.-30     	; 0x1020 <__fp_splitA>
    103e:	08 c0       	rjmp	.+16     	; 0x1050 <__fp_splitA+0x30>
    1040:	16 16       	cp	r1, r22
    1042:	17 06       	cpc	r1, r23
    1044:	18 06       	cpc	r1, r24
    1046:	99 1f       	adc	r25, r25
    1048:	f1 cf       	rjmp	.-30     	; 0x102c <__fp_splitA+0xc>
    104a:	86 95       	lsr	r24
    104c:	71 05       	cpc	r23, r1
    104e:	61 05       	cpc	r22, r1
    1050:	08 94       	sec
    1052:	08 95       	ret

00001054 <__fp_zero>:
    1054:	e8 94       	clt

00001056 <__fp_szero>:
    1056:	bb 27       	eor	r27, r27
    1058:	66 27       	eor	r22, r22
    105a:	77 27       	eor	r23, r23
    105c:	cb 01       	movw	r24, r22
    105e:	97 f9       	bld	r25, 7
    1060:	08 95       	ret

00001062 <__gesf2>:
    1062:	0e 94 bc 07 	call	0xf78	; 0xf78 <__fp_cmp>
    1066:	08 f4       	brcc	.+2      	; 0x106a <__gesf2+0x8>
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	08 95       	ret

0000106c <__mulsf3>:
    106c:	0e 94 49 08 	call	0x1092	; 0x1092 <__mulsf3x>
    1070:	0c 94 f7 07 	jmp	0xfee	; 0xfee <__fp_round>
    1074:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__fp_pscA>
    1078:	38 f0       	brcs	.+14     	; 0x1088 <__mulsf3+0x1c>
    107a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__fp_pscB>
    107e:	20 f0       	brcs	.+8      	; 0x1088 <__mulsf3+0x1c>
    1080:	95 23       	and	r25, r21
    1082:	11 f0       	breq	.+4      	; 0x1088 <__mulsf3+0x1c>
    1084:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_inf>
    1088:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_nan>
    108c:	11 24       	eor	r1, r1
    108e:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__fp_szero>

00001092 <__mulsf3x>:
    1092:	0e 94 08 08 	call	0x1010	; 0x1010 <__fp_split3>
    1096:	70 f3       	brcs	.-36     	; 0x1074 <__mulsf3+0x8>

00001098 <__mulsf3_pse>:
    1098:	95 9f       	mul	r25, r21
    109a:	c1 f3       	breq	.-16     	; 0x108c <__mulsf3+0x20>
    109c:	95 0f       	add	r25, r21
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	55 1f       	adc	r21, r21
    10a2:	62 9f       	mul	r22, r18
    10a4:	f0 01       	movw	r30, r0
    10a6:	72 9f       	mul	r23, r18
    10a8:	bb 27       	eor	r27, r27
    10aa:	f0 0d       	add	r31, r0
    10ac:	b1 1d       	adc	r27, r1
    10ae:	63 9f       	mul	r22, r19
    10b0:	aa 27       	eor	r26, r26
    10b2:	f0 0d       	add	r31, r0
    10b4:	b1 1d       	adc	r27, r1
    10b6:	aa 1f       	adc	r26, r26
    10b8:	64 9f       	mul	r22, r20
    10ba:	66 27       	eor	r22, r22
    10bc:	b0 0d       	add	r27, r0
    10be:	a1 1d       	adc	r26, r1
    10c0:	66 1f       	adc	r22, r22
    10c2:	82 9f       	mul	r24, r18
    10c4:	22 27       	eor	r18, r18
    10c6:	b0 0d       	add	r27, r0
    10c8:	a1 1d       	adc	r26, r1
    10ca:	62 1f       	adc	r22, r18
    10cc:	73 9f       	mul	r23, r19
    10ce:	b0 0d       	add	r27, r0
    10d0:	a1 1d       	adc	r26, r1
    10d2:	62 1f       	adc	r22, r18
    10d4:	83 9f       	mul	r24, r19
    10d6:	a0 0d       	add	r26, r0
    10d8:	61 1d       	adc	r22, r1
    10da:	22 1f       	adc	r18, r18
    10dc:	74 9f       	mul	r23, r20
    10de:	33 27       	eor	r19, r19
    10e0:	a0 0d       	add	r26, r0
    10e2:	61 1d       	adc	r22, r1
    10e4:	23 1f       	adc	r18, r19
    10e6:	84 9f       	mul	r24, r20
    10e8:	60 0d       	add	r22, r0
    10ea:	21 1d       	adc	r18, r1
    10ec:	82 2f       	mov	r24, r18
    10ee:	76 2f       	mov	r23, r22
    10f0:	6a 2f       	mov	r22, r26
    10f2:	11 24       	eor	r1, r1
    10f4:	9f 57       	subi	r25, 0x7F	; 127
    10f6:	50 40       	sbci	r21, 0x00	; 0
    10f8:	9a f0       	brmi	.+38     	; 0x1120 <__mulsf3_pse+0x88>
    10fa:	f1 f0       	breq	.+60     	; 0x1138 <__mulsf3_pse+0xa0>
    10fc:	88 23       	and	r24, r24
    10fe:	4a f0       	brmi	.+18     	; 0x1112 <__mulsf3_pse+0x7a>
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	bb 1f       	adc	r27, r27
    1106:	66 1f       	adc	r22, r22
    1108:	77 1f       	adc	r23, r23
    110a:	88 1f       	adc	r24, r24
    110c:	91 50       	subi	r25, 0x01	; 1
    110e:	50 40       	sbci	r21, 0x00	; 0
    1110:	a9 f7       	brne	.-22     	; 0x10fc <__mulsf3_pse+0x64>
    1112:	9e 3f       	cpi	r25, 0xFE	; 254
    1114:	51 05       	cpc	r21, r1
    1116:	80 f0       	brcs	.+32     	; 0x1138 <__mulsf3_pse+0xa0>
    1118:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__fp_inf>
    111c:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__fp_szero>
    1120:	5f 3f       	cpi	r21, 0xFF	; 255
    1122:	e4 f3       	brlt	.-8      	; 0x111c <__mulsf3_pse+0x84>
    1124:	98 3e       	cpi	r25, 0xE8	; 232
    1126:	d4 f3       	brlt	.-12     	; 0x111c <__mulsf3_pse+0x84>
    1128:	86 95       	lsr	r24
    112a:	77 95       	ror	r23
    112c:	67 95       	ror	r22
    112e:	b7 95       	ror	r27
    1130:	f7 95       	ror	r31
    1132:	e7 95       	ror	r30
    1134:	9f 5f       	subi	r25, 0xFF	; 255
    1136:	c1 f7       	brne	.-16     	; 0x1128 <__mulsf3_pse+0x90>
    1138:	fe 2b       	or	r31, r30
    113a:	88 0f       	add	r24, r24
    113c:	91 1d       	adc	r25, r1
    113e:	96 95       	lsr	r25
    1140:	87 95       	ror	r24
    1142:	97 f9       	bld	r25, 7
    1144:	08 95       	ret

00001146 <__umulhisi3>:
    1146:	a2 9f       	mul	r26, r18
    1148:	b0 01       	movw	r22, r0
    114a:	b3 9f       	mul	r27, r19
    114c:	c0 01       	movw	r24, r0
    114e:	a3 9f       	mul	r26, r19
    1150:	70 0d       	add	r23, r0
    1152:	81 1d       	adc	r24, r1
    1154:	11 24       	eor	r1, r1
    1156:	91 1d       	adc	r25, r1
    1158:	b2 9f       	mul	r27, r18
    115a:	70 0d       	add	r23, r0
    115c:	81 1d       	adc	r24, r1
    115e:	11 24       	eor	r1, r1
    1160:	91 1d       	adc	r25, r1
    1162:	08 95       	ret

00001164 <__tablejump2__>:
    1164:	ee 0f       	add	r30, r30
    1166:	ff 1f       	adc	r31, r31
    1168:	05 90       	lpm	r0, Z+
    116a:	f4 91       	lpm	r31, Z
    116c:	e0 2d       	mov	r30, r0
    116e:	09 94       	ijmp

00001170 <memcpy>:
    1170:	fb 01       	movw	r30, r22
    1172:	dc 01       	movw	r26, r24
    1174:	02 c0       	rjmp	.+4      	; 0x117a <memcpy+0xa>
    1176:	01 90       	ld	r0, Z+
    1178:	0d 92       	st	X+, r0
    117a:	41 50       	subi	r20, 0x01	; 1
    117c:	50 40       	sbci	r21, 0x00	; 0
    117e:	d8 f7       	brcc	.-10     	; 0x1176 <memcpy+0x6>
    1180:	08 95       	ret

00001182 <_exit>:
    1182:	f8 94       	cli

00001184 <__stop_program>:
    1184:	ff cf       	rjmp	.-2      	; 0x1184 <__stop_program>
