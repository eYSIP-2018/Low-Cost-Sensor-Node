
RFreceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00001176  0000120a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001176  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800138  00800138  00001242  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a9d  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6f  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a4e  00000000  00000000  00007fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a54  00000000  00000000  000099f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013ad  00000000  00000000  0000a44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e9e  00000000  00000000  0000b7f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000f697  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_14>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	77 02       	muls	r23, r23

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e6 e7       	ldi	r30, 0x76	; 118
      7e:	f1 e1       	ldi	r31, 0x11	; 17
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a8 33       	cpi	r26, 0x38	; 56
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a8 e3       	ldi	r26, 0x38	; 56
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a3 35       	cpi	r26, 0x53	; 83
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 aa 08 	call	0x1154	; 0x1154 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
      b6:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <UART_Init>:
	 // turn on CTC mode
	 TCCR0A |= (1 << WGM01);
	 // Set CS01 and CS00 bits for 64 prescaler
	 TCCR0B |= (1 << CS01) | (1 << CS00);
	 // enable timer compare interrupt
	 TIMSK0 |= (1 << OCIE0A);
      be:	e1 ec       	ldi	r30, 0xC1	; 193
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	10 82       	st	Z, r1
      c4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      c8:	a2 ec       	ldi	r26, 0xC2	; 194
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	8c 91       	ld	r24, X
      ce:	8e 60       	ori	r24, 0x0E	; 14
      d0:	8c 93       	st	X, r24
      d2:	83 e3       	ldi	r24, 0x33	; 51
      d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      dc:	80 81       	ld	r24, Z
      de:	88 61       	ori	r24, 0x18	; 24
      e0:	80 83       	st	Z, r24
      e2:	08 95       	ret

000000e4 <UART_Transmit>:
      e4:	90 e4       	ldi	r25, 0x40	; 64
      e6:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      ea:	e0 ec       	ldi	r30, 0xC0	; 192
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	90 81       	ld	r25, Z
      f0:	95 ff       	sbrs	r25, 5
      f2:	fd cf       	rjmp	.-6      	; 0xee <UART_Transmit+0xa>
      f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      f8:	e0 ec       	ldi	r30, 0xC0	; 192
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	86 ff       	sbrs	r24, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <UART_Transmit+0x18>
     102:	08 95       	ret

00000104 <UART_Printfln>:
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	8c 01       	movw	r16, r24
     10c:	fc 01       	movw	r30, r24
     10e:	80 81       	ld	r24, Z
     110:	88 23       	and	r24, r24
     112:	51 f0       	breq	.+20     	; 0x128 <UART_Printfln+0x24>
     114:	c0 e0       	ldi	r28, 0x00	; 0
     116:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     11a:	cf 5f       	subi	r28, 0xFF	; 255
     11c:	f8 01       	movw	r30, r16
     11e:	ec 0f       	add	r30, r28
     120:	f1 1d       	adc	r31, r1
     122:	80 81       	ld	r24, Z
     124:	81 11       	cpse	r24, r1
     126:	f7 cf       	rjmp	.-18     	; 0x116 <UART_Printfln+0x12>
     128:	8a e0       	ldi	r24, 0x0A	; 10
     12a:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     12e:	cf 91       	pop	r28
     130:	1f 91       	pop	r17
     132:	0f 91       	pop	r16
     134:	08 95       	ret

00000136 <UART_Printf>:
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	fc 01       	movw	r30, r24
     13e:	80 81       	ld	r24, Z
     140:	88 23       	and	r24, r24
     142:	59 f0       	breq	.+22     	; 0x15a <UART_Printf+0x24>
     144:	8f 01       	movw	r16, r30
     146:	c0 e0       	ldi	r28, 0x00	; 0
     148:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     14c:	cf 5f       	subi	r28, 0xFF	; 255
     14e:	f8 01       	movw	r30, r16
     150:	ec 0f       	add	r30, r28
     152:	f1 1d       	adc	r31, r1
     154:	80 81       	ld	r24, Z
     156:	81 11       	cpse	r24, r1
     158:	f7 cf       	rjmp	.-18     	; 0x148 <UART_Printf+0x12>
     15a:	cf 91       	pop	r28
     15c:	1f 91       	pop	r17
     15e:	0f 91       	pop	r16
     160:	08 95       	ret

00000162 <UART_Print_Num>:
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	8c 01       	movw	r16, r24
     16c:	9c 01       	movw	r18, r24
     16e:	32 95       	swap	r19
     170:	22 95       	swap	r18
     172:	2f 70       	andi	r18, 0x0F	; 15
     174:	23 27       	eor	r18, r19
     176:	3f 70       	andi	r19, 0x0F	; 15
     178:	23 27       	eor	r18, r19
     17a:	a7 e4       	ldi	r26, 0x47	; 71
     17c:	b3 e0       	ldi	r27, 0x03	; 3
     17e:	0e 94 9b 08 	call	0x1136	; 0x1136 <__umulhisi3>
     182:	96 95       	lsr	r25
     184:	87 95       	ror	r24
     186:	96 95       	lsr	r25
     188:	87 95       	ror	r24
     18a:	96 95       	lsr	r25
     18c:	87 95       	ror	r24
     18e:	80 5d       	subi	r24, 0xD0	; 208
     190:	80 33       	cpi	r24, 0x30	; 48
     192:	11 f0       	breq	.+4      	; 0x198 <UART_Print_Num+0x36>
     194:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     198:	98 01       	movw	r18, r16
     19a:	32 95       	swap	r19
     19c:	22 95       	swap	r18
     19e:	2f 70       	andi	r18, 0x0F	; 15
     1a0:	23 27       	eor	r18, r19
     1a2:	3f 70       	andi	r19, 0x0F	; 15
     1a4:	23 27       	eor	r18, r19
     1a6:	a7 e4       	ldi	r26, 0x47	; 71
     1a8:	b3 e0       	ldi	r27, 0x03	; 3
     1aa:	0e 94 9b 08 	call	0x1136	; 0x1136 <__umulhisi3>
     1ae:	ec 01       	movw	r28, r24
     1b0:	d6 95       	lsr	r29
     1b2:	c7 95       	ror	r28
     1b4:	d6 95       	lsr	r29
     1b6:	c7 95       	ror	r28
     1b8:	d6 95       	lsr	r29
     1ba:	c7 95       	ror	r28
     1bc:	20 e1       	ldi	r18, 0x10	; 16
     1be:	37 e2       	ldi	r19, 0x27	; 39
     1c0:	c2 9f       	mul	r28, r18
     1c2:	c0 01       	movw	r24, r0
     1c4:	c3 9f       	mul	r28, r19
     1c6:	90 0d       	add	r25, r0
     1c8:	d2 9f       	mul	r29, r18
     1ca:	90 0d       	add	r25, r0
     1cc:	11 24       	eor	r1, r1
     1ce:	e8 01       	movw	r28, r16
     1d0:	c8 1b       	sub	r28, r24
     1d2:	d9 0b       	sbc	r29, r25
     1d4:	9e 01       	movw	r18, r28
     1d6:	36 95       	lsr	r19
     1d8:	27 95       	ror	r18
     1da:	36 95       	lsr	r19
     1dc:	27 95       	ror	r18
     1de:	36 95       	lsr	r19
     1e0:	27 95       	ror	r18
     1e2:	a5 ec       	ldi	r26, 0xC5	; 197
     1e4:	b0 e2       	ldi	r27, 0x20	; 32
     1e6:	0e 94 9b 08 	call	0x1136	; 0x1136 <__umulhisi3>
     1ea:	92 95       	swap	r25
     1ec:	82 95       	swap	r24
     1ee:	8f 70       	andi	r24, 0x0F	; 15
     1f0:	89 27       	eor	r24, r25
     1f2:	9f 70       	andi	r25, 0x0F	; 15
     1f4:	89 27       	eor	r24, r25
     1f6:	80 5d       	subi	r24, 0xD0	; 208
     1f8:	80 33       	cpi	r24, 0x30	; 48
     1fa:	11 f0       	breq	.+4      	; 0x200 <UART_Print_Num+0x9e>
     1fc:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     200:	9e 01       	movw	r18, r28
     202:	36 95       	lsr	r19
     204:	27 95       	ror	r18
     206:	36 95       	lsr	r19
     208:	27 95       	ror	r18
     20a:	36 95       	lsr	r19
     20c:	27 95       	ror	r18
     20e:	a5 ec       	ldi	r26, 0xC5	; 197
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	0e 94 9b 08 	call	0x1136	; 0x1136 <__umulhisi3>
     216:	8c 01       	movw	r16, r24
     218:	12 95       	swap	r17
     21a:	02 95       	swap	r16
     21c:	0f 70       	andi	r16, 0x0F	; 15
     21e:	01 27       	eor	r16, r17
     220:	1f 70       	andi	r17, 0x0F	; 15
     222:	01 27       	eor	r16, r17
     224:	28 ee       	ldi	r18, 0xE8	; 232
     226:	33 e0       	ldi	r19, 0x03	; 3
     228:	02 9f       	mul	r16, r18
     22a:	c0 01       	movw	r24, r0
     22c:	03 9f       	mul	r16, r19
     22e:	90 0d       	add	r25, r0
     230:	12 9f       	mul	r17, r18
     232:	90 0d       	add	r25, r0
     234:	11 24       	eor	r1, r1
     236:	8e 01       	movw	r16, r28
     238:	08 1b       	sub	r16, r24
     23a:	19 0b       	sbc	r17, r25
     23c:	98 01       	movw	r18, r16
     23e:	36 95       	lsr	r19
     240:	27 95       	ror	r18
     242:	36 95       	lsr	r19
     244:	27 95       	ror	r18
     246:	ab e7       	ldi	r26, 0x7B	; 123
     248:	b4 e1       	ldi	r27, 0x14	; 20
     24a:	0e 94 9b 08 	call	0x1136	; 0x1136 <__umulhisi3>
     24e:	96 95       	lsr	r25
     250:	87 95       	ror	r24
     252:	80 5d       	subi	r24, 0xD0	; 208
     254:	80 33       	cpi	r24, 0x30	; 48
     256:	11 f0       	breq	.+4      	; 0x25c <UART_Print_Num+0xfa>
     258:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     25c:	98 01       	movw	r18, r16
     25e:	36 95       	lsr	r19
     260:	27 95       	ror	r18
     262:	36 95       	lsr	r19
     264:	27 95       	ror	r18
     266:	ab e7       	ldi	r26, 0x7B	; 123
     268:	b4 e1       	ldi	r27, 0x14	; 20
     26a:	0e 94 9b 08 	call	0x1136	; 0x1136 <__umulhisi3>
     26e:	ec 01       	movw	r28, r24
     270:	d6 95       	lsr	r29
     272:	c7 95       	ror	r28
     274:	24 e6       	ldi	r18, 0x64	; 100
     276:	2c 9f       	mul	r18, r28
     278:	c0 01       	movw	r24, r0
     27a:	2d 9f       	mul	r18, r29
     27c:	90 0d       	add	r25, r0
     27e:	11 24       	eor	r1, r1
     280:	e8 01       	movw	r28, r16
     282:	c8 1b       	sub	r28, r24
     284:	d9 0b       	sbc	r29, r25
     286:	9e 01       	movw	r18, r28
     288:	ad ec       	ldi	r26, 0xCD	; 205
     28a:	bc ec       	ldi	r27, 0xCC	; 204
     28c:	0e 94 9b 08 	call	0x1136	; 0x1136 <__umulhisi3>
     290:	96 95       	lsr	r25
     292:	87 95       	ror	r24
     294:	96 95       	lsr	r25
     296:	87 95       	ror	r24
     298:	96 95       	lsr	r25
     29a:	87 95       	ror	r24
     29c:	80 5d       	subi	r24, 0xD0	; 208
     29e:	80 33       	cpi	r24, 0x30	; 48
     2a0:	11 f0       	breq	.+4      	; 0x2a6 <UART_Print_Num+0x144>
     2a2:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2a6:	9e 01       	movw	r18, r28
     2a8:	ad ec       	ldi	r26, 0xCD	; 205
     2aa:	bc ec       	ldi	r27, 0xCC	; 204
     2ac:	0e 94 9b 08 	call	0x1136	; 0x1136 <__umulhisi3>
     2b0:	96 95       	lsr	r25
     2b2:	87 95       	ror	r24
     2b4:	96 95       	lsr	r25
     2b6:	87 95       	ror	r24
     2b8:	96 95       	lsr	r25
     2ba:	87 95       	ror	r24
     2bc:	9c 01       	movw	r18, r24
     2be:	22 0f       	add	r18, r18
     2c0:	33 1f       	adc	r19, r19
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	82 0f       	add	r24, r18
     2d0:	93 1f       	adc	r25, r19
     2d2:	9e 01       	movw	r18, r28
     2d4:	28 1b       	sub	r18, r24
     2d6:	39 0b       	sbc	r19, r25
     2d8:	c9 01       	movw	r24, r18
     2da:	80 5d       	subi	r24, 0xD0	; 208
     2dc:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2e0:	8a e0       	ldi	r24, 0x0A	; 10
     2e2:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <Set_pin>:
     2f0:	61 30       	cpi	r22, 0x01	; 1
     2f2:	71 05       	cpc	r23, r1
     2f4:	f1 f4       	brne	.+60     	; 0x332 <Set_pin+0x42>
     2f6:	88 30       	cpi	r24, 0x08	; 8
     2f8:	91 05       	cpc	r25, r1
     2fa:	70 f0       	brcs	.+28     	; 0x318 <Set_pin+0x28>
     2fc:	44 b1       	in	r20, 0x04	; 4
     2fe:	08 97       	sbiw	r24, 0x08	; 8
     300:	21 e0       	ldi	r18, 0x01	; 1
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	b9 01       	movw	r22, r18
     306:	02 c0       	rjmp	.+4      	; 0x30c <Set_pin+0x1c>
     308:	66 0f       	add	r22, r22
     30a:	77 1f       	adc	r23, r23
     30c:	8a 95       	dec	r24
     30e:	e2 f7       	brpl	.-8      	; 0x308 <Set_pin+0x18>
     310:	cb 01       	movw	r24, r22
     312:	84 2b       	or	r24, r20
     314:	84 b9       	out	0x04, r24	; 4
     316:	08 95       	ret
     318:	4a b1       	in	r20, 0x0a	; 10
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	b9 01       	movw	r22, r18
     320:	02 c0       	rjmp	.+4      	; 0x326 <Set_pin+0x36>
     322:	66 0f       	add	r22, r22
     324:	77 1f       	adc	r23, r23
     326:	8a 95       	dec	r24
     328:	e2 f7       	brpl	.-8      	; 0x322 <Set_pin+0x32>
     32a:	cb 01       	movw	r24, r22
     32c:	84 2b       	or	r24, r20
     32e:	8a b9       	out	0x0a, r24	; 10
     330:	08 95       	ret
     332:	08 97       	sbiw	r24, 0x08	; 8
     334:	18 f0       	brcs	.+6      	; 0x33c <Set_pin+0x4c>
     336:	84 b1       	in	r24, 0x04	; 4
     338:	84 b9       	out	0x04, r24	; 4
     33a:	08 95       	ret
     33c:	8a b1       	in	r24, 0x0a	; 10
     33e:	8a b9       	out	0x0a, r24	; 10
     340:	08 95       	ret

00000342 <Write_Digital>:
     342:	66 23       	and	r22, r22
     344:	f1 f0       	breq	.+60     	; 0x382 <Write_Digital+0x40>
     346:	88 30       	cpi	r24, 0x08	; 8
     348:	91 05       	cpc	r25, r1
     34a:	70 f0       	brcs	.+28     	; 0x368 <Write_Digital+0x26>
     34c:	45 b1       	in	r20, 0x05	; 5
     34e:	08 97       	sbiw	r24, 0x08	; 8
     350:	21 e0       	ldi	r18, 0x01	; 1
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	b9 01       	movw	r22, r18
     356:	02 c0       	rjmp	.+4      	; 0x35c <Write_Digital+0x1a>
     358:	66 0f       	add	r22, r22
     35a:	77 1f       	adc	r23, r23
     35c:	8a 95       	dec	r24
     35e:	e2 f7       	brpl	.-8      	; 0x358 <Write_Digital+0x16>
     360:	cb 01       	movw	r24, r22
     362:	84 2b       	or	r24, r20
     364:	85 b9       	out	0x05, r24	; 5
     366:	08 95       	ret
     368:	4b b1       	in	r20, 0x0b	; 11
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	b9 01       	movw	r22, r18
     370:	02 c0       	rjmp	.+4      	; 0x376 <Write_Digital+0x34>
     372:	66 0f       	add	r22, r22
     374:	77 1f       	adc	r23, r23
     376:	8a 95       	dec	r24
     378:	e2 f7       	brpl	.-8      	; 0x372 <Write_Digital+0x30>
     37a:	cb 01       	movw	r24, r22
     37c:	84 2b       	or	r24, r20
     37e:	8b b9       	out	0x0b, r24	; 11
     380:	08 95       	ret
     382:	88 30       	cpi	r24, 0x08	; 8
     384:	91 05       	cpc	r25, r1
     386:	78 f0       	brcs	.+30     	; 0x3a6 <Write_Digital+0x64>
     388:	45 b1       	in	r20, 0x05	; 5
     38a:	08 97       	sbiw	r24, 0x08	; 8
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	b9 01       	movw	r22, r18
     392:	02 c0       	rjmp	.+4      	; 0x398 <Write_Digital+0x56>
     394:	66 0f       	add	r22, r22
     396:	77 1f       	adc	r23, r23
     398:	8a 95       	dec	r24
     39a:	e2 f7       	brpl	.-8      	; 0x394 <Write_Digital+0x52>
     39c:	cb 01       	movw	r24, r22
     39e:	80 95       	com	r24
     3a0:	84 23       	and	r24, r20
     3a2:	85 b9       	out	0x05, r24	; 5
     3a4:	08 95       	ret
     3a6:	4b b1       	in	r20, 0x0b	; 11
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	b9 01       	movw	r22, r18
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <Write_Digital+0x72>
     3b0:	66 0f       	add	r22, r22
     3b2:	77 1f       	adc	r23, r23
     3b4:	8a 95       	dec	r24
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <Write_Digital+0x6e>
     3b8:	cb 01       	movw	r24, r22
     3ba:	80 95       	com	r24
     3bc:	84 23       	and	r24, r20
     3be:	8b b9       	out	0x0b, r24	; 11
     3c0:	08 95       	ret

000003c2 <__vector_14>:
}
// ISR for timer 0
ISR(TIMER0_COMPA_vect)
{
     3c2:	1f 92       	push	r1
     3c4:	0f 92       	push	r0
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	0f 92       	push	r0
     3ca:	11 24       	eor	r1, r1
     3cc:	8f 93       	push	r24
     3ce:	9f 93       	push	r25
	cnt++;
     3d0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
     3d4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
     3d8:	01 96       	adiw	r24, 0x01	; 1
     3da:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__data_end+0x1>
     3de:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
}
     3e2:	9f 91       	pop	r25
     3e4:	8f 91       	pop	r24
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <main>:
const uint64_t pipes[3] = {0xF0F0F0F0E1LL,0xF0F0F0F0E2LL,0xF0F0F0F0E3LL };
//const byte address[6] = "00001"; //5 Byte address of nrf device	
unsigned char count=1;
unsigned char p=0;
int main(void)
{ 
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	a1 97       	sbiw	r28, 0x21	; 33
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
	unsigned char status1;
	UART_Init(9600);	 
     404:	60 e8       	ldi	r22, 0x80	; 128
     406:	75 e2       	ldi	r23, 0x25	; 37
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_Init>
	radio.begin();	 
     410:	8b e3       	ldi	r24, 0x3B	; 59
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN4RF245beginEv>
	//radio.openWritingPipe(address);// transmitter address
	radio.openReadingPipe(1,pipes[1]);// receiver address must be same as transmitter 
     418:	0f 2e       	mov	r0, r31
     41a:	f2 ee       	ldi	r31, 0xE2	; 226
     41c:	ef 2e       	mov	r14, r31
     41e:	f0 2d       	mov	r31, r0
     420:	0f 2e       	mov	r0, r31
     422:	f0 ef       	ldi	r31, 0xF0	; 240
     424:	ff 2e       	mov	r15, r31
     426:	f0 2d       	mov	r31, r0
     428:	00 ef       	ldi	r16, 0xF0	; 240
     42a:	10 ef       	ldi	r17, 0xF0	; 240
     42c:	20 ef       	ldi	r18, 0xF0	; 240
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	61 e0       	ldi	r22, 0x01	; 1
     436:	8b e3       	ldi	r24, 0x3B	; 59
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	0e 94 94 04 	call	0x928	; 0x928 <_ZN4RF2415openReadingPipeEhy>
	radio.setPALevel(RF24_PA_MAX);// 0dBm power level
     43e:	63 e0       	ldi	r22, 0x03	; 3
     440:	8b e3       	ldi	r24, 0x3B	; 59
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_ZN4RF2410setPALevelEh>
	radio.setDataRate(RF24_250KBPS);
     448:	62 e0       	ldi	r22, 0x02	; 2
     44a:	8b e3       	ldi	r24, 0x3B	; 59
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN4RF2411setDataRateE15rf24_datarate_e>
	//radio.stopListening();//make radio  transmitter
	radio.startListening();
     452:	8b e3       	ldi	r24, 0x3B	; 59
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF2414startListeningEv>
		//status1= radio.read_register(RF_SETUP);
		 //UART_Print_Num(status1);
		while(radio.available(&pipenum))
	//	if (radio.available())
		 {
			 char text[32] = "";
     45a:	0f 2e       	mov	r0, r31
     45c:	fe e1       	ldi	r31, 0x1E	; 30
     45e:	ff 2e       	mov	r15, r31
     460:	f0 2d       	mov	r31, r0
     462:	8e 01       	movw	r16, r28
     464:	0d 5f       	subi	r16, 0xFD	; 253
     466:	1f 4f       	sbci	r17, 0xFF	; 255
		//UART_Print_Num(status1);
	while (1)
	{  
		// status1 = radio.read_register(NRF_STATUS);
		//UART_Print_Num(status1);
		 unsigned char pipenum = 0;
     468:	19 a2       	std	Y+33, r1	; 0x21
		// UART_Printfln("JUST TESt");
	  // code for receiver		
			
		//status1= radio.read_register(RF_SETUP);
		 //UART_Print_Num(status1);
		while(radio.available(&pipenum))
     46a:	be 01       	movw	r22, r28
     46c:	6f 5d       	subi	r22, 0xDF	; 223
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	8b e3       	ldi	r24, 0x3B	; 59
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN4RF249availableEPh>
     478:	88 23       	and	r24, r24
     47a:	b1 f3       	breq	.-20     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	//	if (radio.available())
		 {
			 char text[32] = "";
     47c:	1a 82       	std	Y+2, r1	; 0x02
     47e:	19 82       	std	Y+1, r1	; 0x01
     480:	f8 01       	movw	r30, r16
     482:	8f 2d       	mov	r24, r15
     484:	11 92       	st	Z+, r1
     486:	8a 95       	dec	r24
     488:	e9 f7       	brne	.-6      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			 radio.read(&text, sizeof(text));
     48a:	40 e2       	ldi	r20, 0x20	; 32
     48c:	be 01       	movw	r22, r28
     48e:	6f 5f       	subi	r22, 0xFF	; 255
     490:	7f 4f       	sbci	r23, 0xFF	; 255
     492:	8b e3       	ldi	r24, 0x3B	; 59
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN4RF244readEPvh>
			 UART_Printfln(text);
     49a:	ce 01       	movw	r24, r28
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	0e 94 82 00 	call	0x104	; 0x104 <UART_Printfln>
			 UART_Printf("Packet count:");
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 9b 00 	call	0x136	; 0x136 <UART_Printf>
			 UART_Print_Num(count);
     4aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 b1 00 	call	0x162	; 0x162 <UART_Print_Num>
			 UART_Printf("Pipe NUM:");
     4b4:	8f e0       	ldi	r24, 0x0F	; 15
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 9b 00 	call	0x136	; 0x136 <UART_Printf>
			 UART_Print_Num(pipenum);
     4bc:	89 a1       	ldd	r24, Y+33	; 0x21
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 b1 00 	call	0x162	; 0x162 <UART_Print_Num>
			 count++;
     4c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4c8:	8f 5f       	subi	r24, 0xFF	; 255
     4ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			 p=radio.getPALevel();
     4ce:	8b e3       	ldi	r24, 0x3B	; 59
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 93 05 	call	0xb26	; 0xb26 <_ZN4RF2410getPALevelEv>
     4d6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <p>
			 UART_Printf("Power Level:");
     4da:	89 e1       	ldi	r24, 0x19	; 25
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	0e 94 9b 00 	call	0x136	; 0x136 <UART_Printf>
			 UART_Print_Num(p);
     4e2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <p>
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 b1 00 	call	0x162	; 0x162 <UART_Print_Num>
		// UART_Printfln("JUST TESt");
	  // code for receiver		
			
		//status1= radio.read_register(RF_SETUP);
		 //UART_Print_Num(status1);
		while(radio.available(&pipenum))
     4ec:	be cf       	rjmp	.-132    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>

000004ee <_GLOBAL__sub_I_radio>:
 * Author : sachin mahadevjadhav
 */ 
#include <avr/io.h>
#include "RF24.h"

RF24 radio(9, 10); // CE, CSN
     4ee:	4a e0       	ldi	r20, 0x0A	; 10
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	69 e0       	ldi	r22, 0x09	; 9
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	8b e3       	ldi	r24, 0x3B	; 59
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	0e 94 33 04 	call	0x866	; 0x866 <_ZN4RF24C1Ejj>
     4fe:	08 95       	ret

00000500 <_ZN4RF243csnEb>:
/****************************************************************************/

bool RF24::testRPD(void)
{
  return ( read_register(RPD) & 1 ) ;
}
     500:	4f 92       	push	r4
     502:	5f 92       	push	r5
     504:	6f 92       	push	r6
     506:	7f 92       	push	r7
     508:	8f 92       	push	r8
     50a:	9f 92       	push	r9
     50c:	af 92       	push	r10
     50e:	bf 92       	push	r11
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	ec 01       	movw	r28, r24
     520:	8a 81       	ldd	r24, Y+2	; 0x02
     522:	9b 81       	ldd	r25, Y+3	; 0x03
     524:	0e 94 a1 01 	call	0x342	; 0x342 <Write_Digital>
     528:	6c 89       	ldd	r22, Y+20	; 0x14
     52a:	7d 89       	ldd	r23, Y+21	; 0x15
     52c:	8e 89       	ldd	r24, Y+22	; 0x16
     52e:	9f 89       	ldd	r25, Y+23	; 0x17
     530:	0e 94 77 07 	call	0xeee	; 0xeee <__floatunsisf>
     534:	6b 01       	movw	r12, r22
     536:	7c 01       	movw	r14, r24
     538:	2b ea       	ldi	r18, 0xAB	; 171
     53a:	3a ea       	ldi	r19, 0xAA	; 170
     53c:	4a e2       	ldi	r20, 0x2A	; 42
     53e:	50 e4       	ldi	r21, 0x40	; 64
     540:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     544:	4b 01       	movw	r8, r22
     546:	5c 01       	movw	r10, r24
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	40 e8       	ldi	r20, 0x80	; 128
     54e:	5f e3       	ldi	r21, 0x3F	; 63
     550:	0e 94 d1 06 	call	0xda2	; 0xda2 <__cmpsf2>
     554:	88 23       	and	r24, r24
     556:	0c f4       	brge	.+2      	; 0x55a <_ZN4RF243csnEb+0x5a>
     558:	6e c0       	rjmp	.+220    	; 0x636 <_ZN4RF243csnEb+0x136>
     55a:	a7 01       	movw	r20, r14
     55c:	96 01       	movw	r18, r12
     55e:	c7 01       	movw	r24, r14
     560:	b6 01       	movw	r22, r12
     562:	0e 94 65 06 	call	0xcca	; 0xcca <__addsf3>
     566:	2b 01       	movw	r4, r22
     568:	3c 01       	movw	r6, r24
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	3f ef       	ldi	r19, 0xFF	; 255
     56e:	4f e7       	ldi	r20, 0x7F	; 127
     570:	57 e4       	ldi	r21, 0x47	; 71
     572:	0e 94 29 08 	call	0x1052	; 0x1052 <__gesf2>
     576:	18 16       	cp	r1, r24
     578:	0c f0       	brlt	.+2      	; 0x57c <_ZN4RF243csnEb+0x7c>
     57a:	45 c0       	rjmp	.+138    	; 0x606 <_ZN4RF243csnEb+0x106>
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	4a e7       	ldi	r20, 0x7A	; 122
     582:	54 e4       	ldi	r21, 0x44	; 68
     584:	c7 01       	movw	r24, r14
     586:	b6 01       	movw	r22, r12
     588:	0e 94 d6 06 	call	0xdac	; 0xdac <__divsf3>
     58c:	4b 01       	movw	r8, r22
     58e:	5c 01       	movw	r10, r24
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	4a ef       	ldi	r20, 0xFA	; 250
     596:	54 e4       	ldi	r21, 0x44	; 68
     598:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     59c:	6b 01       	movw	r12, r22
     59e:	7c 01       	movw	r14, r24
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	40 e8       	ldi	r20, 0x80	; 128
     5a6:	5f e3       	ldi	r21, 0x3F	; 63
     5a8:	0e 94 d1 06 	call	0xda2	; 0xda2 <__cmpsf2>
     5ac:	88 23       	and	r24, r24
     5ae:	2c f1       	brlt	.+74     	; 0x5fa <_ZN4RF243csnEb+0xfa>
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	3f ef       	ldi	r19, 0xFF	; 255
     5b4:	4f e7       	ldi	r20, 0x7F	; 127
     5b6:	57 e4       	ldi	r21, 0x47	; 71
     5b8:	c7 01       	movw	r24, r14
     5ba:	b6 01       	movw	r22, r12
     5bc:	0e 94 29 08 	call	0x1052	; 0x1052 <__gesf2>
     5c0:	18 16       	cp	r1, r24
     5c2:	b4 f4       	brge	.+44     	; 0x5f0 <_ZN4RF243csnEb+0xf0>
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	40 e2       	ldi	r20, 0x20	; 32
     5ca:	51 e4       	ldi	r21, 0x41	; 65
     5cc:	c5 01       	movw	r24, r10
     5ce:	b4 01       	movw	r22, r8
     5d0:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3>
     5d4:	0e 94 48 07 	call	0xe90	; 0xe90 <__fixunssfsi>
     5d8:	61 15       	cp	r22, r1
     5da:	71 05       	cpc	r23, r1
     5dc:	69 f1       	breq	.+90     	; 0x638 <_ZN4RF243csnEb+0x138>
     5de:	28 ec       	ldi	r18, 0xC8	; 200
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	c9 01       	movw	r24, r18
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <_ZN4RF243csnEb+0xe4>
     5e8:	61 50       	subi	r22, 0x01	; 1
     5ea:	71 09       	sbc	r23, r1
     5ec:	d1 f7       	brne	.-12     	; 0x5e2 <_ZN4RF243csnEb+0xe2>
     5ee:	24 c0       	rjmp	.+72     	; 0x638 <_ZN4RF243csnEb+0x138>
     5f0:	c7 01       	movw	r24, r14
     5f2:	b6 01       	movw	r22, r12
     5f4:	0e 94 48 07 	call	0xe90	; 0xe90 <__fixunssfsi>
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <_ZN4RF243csnEb+0xfe>
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	cb 01       	movw	r24, r22
     600:	01 97       	sbiw	r24, 0x01	; 1
     602:	f1 f7       	brne	.-4      	; 0x600 <_ZN4RF243csnEb+0x100>
     604:	19 c0       	rjmp	.+50     	; 0x638 <_ZN4RF243csnEb+0x138>
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	4f e7       	ldi	r20, 0x7F	; 127
     60c:	53 e4       	ldi	r21, 0x43	; 67
     60e:	c5 01       	movw	r24, r10
     610:	b4 01       	movw	r22, r8
     612:	0e 94 29 08 	call	0x1052	; 0x1052 <__gesf2>
     616:	18 16       	cp	r1, r24
     618:	44 f4       	brge	.+16     	; 0x62a <_ZN4RF243csnEb+0x12a>
     61a:	c3 01       	movw	r24, r6
     61c:	b2 01       	movw	r22, r4
     61e:	0e 94 48 07 	call	0xe90	; 0xe90 <__fixunssfsi>
     622:	cb 01       	movw	r24, r22
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <_ZN4RF243csnEb+0x124>
     628:	0a c0       	rjmp	.+20     	; 0x63e <_ZN4RF243csnEb+0x13e>
     62a:	c5 01       	movw	r24, r10
     62c:	b4 01       	movw	r22, r8
     62e:	0e 94 48 07 	call	0xe90	; 0xe90 <__fixunssfsi>
     632:	16 2f       	mov	r17, r22
     634:	01 c0       	rjmp	.+2      	; 0x638 <_ZN4RF243csnEb+0x138>
     636:	11 e0       	ldi	r17, 0x01	; 1
     638:	61 2f       	mov	r22, r17
     63a:	6a 95       	dec	r22
     63c:	f1 f7       	brne	.-4      	; 0x63a <_ZN4RF243csnEb+0x13a>
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	bf 90       	pop	r11
     64e:	af 90       	pop	r10
     650:	9f 90       	pop	r9
     652:	8f 90       	pop	r8
     654:	7f 90       	pop	r7
     656:	6f 90       	pop	r6
     658:	5f 90       	pop	r5
     65a:	4f 90       	pop	r4
     65c:	08 95       	ret

0000065e <_ZN4RF242ceEb>:
     65e:	fc 01       	movw	r30, r24
     660:	80 81       	ld	r24, Z
     662:	91 81       	ldd	r25, Z+1	; 0x01
     664:	22 81       	ldd	r18, Z+2	; 0x02
     666:	33 81       	ldd	r19, Z+3	; 0x03
     668:	82 17       	cp	r24, r18
     66a:	93 07       	cpc	r25, r19
     66c:	11 f0       	breq	.+4      	; 0x672 <_ZN4RF242ceEb+0x14>
     66e:	0e 94 a1 01 	call	0x342	; 0x342 <Write_Digital>
     672:	84 e0       	ldi	r24, 0x04	; 4
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <_ZN4RF242ceEb+0x18>
     67a:	08 95       	ret

0000067c <_ZN4RF2413read_registerEh>:
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	8c 01       	movw	r16, r24
     684:	c6 2f       	mov	r28, r22
     686:	80 e5       	ldi	r24, 0x50	; 80
     688:	8c bd       	out	0x2c, r24	; 44
     68a:	1d bc       	out	0x2d, r1	; 45
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	c8 01       	movw	r24, r16
     690:	0e 94 80 02 	call	0x500	; 0x500 <_ZN4RF243csnEb>
     694:	cf 71       	andi	r28, 0x1F	; 31
     696:	ce bd       	out	0x2e, r28	; 46
     698:	00 00       	nop
     69a:	0d b4       	in	r0, 0x2d	; 45
     69c:	07 fe       	sbrs	r0, 7
     69e:	fd cf       	rjmp	.-6      	; 0x69a <_ZN4RF2413read_registerEh+0x1e>
     6a0:	8e b5       	in	r24, 0x2e	; 46
     6a2:	8f ef       	ldi	r24, 0xFF	; 255
     6a4:	8e bd       	out	0x2e, r24	; 46
     6a6:	00 00       	nop
     6a8:	0d b4       	in	r0, 0x2d	; 45
     6aa:	07 fe       	sbrs	r0, 7
     6ac:	fd cf       	rjmp	.-6      	; 0x6a8 <_ZN4RF2413read_registerEh+0x2c>
     6ae:	ce b5       	in	r28, 0x2e	; 46
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	c8 01       	movw	r24, r16
     6b4:	0e 94 80 02 	call	0x500	; 0x500 <_ZN4RF243csnEb>
     6b8:	8c 2f       	mov	r24, r28
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <_ZN4RF2414write_registerEhPKhh>:
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	8c 01       	movw	r16, r24
     6d0:	c6 2f       	mov	r28, r22
     6d2:	e4 2e       	mov	r14, r20
     6d4:	f5 2e       	mov	r15, r21
     6d6:	d2 2f       	mov	r29, r18
     6d8:	80 e5       	ldi	r24, 0x50	; 80
     6da:	8c bd       	out	0x2c, r24	; 44
     6dc:	1d bc       	out	0x2d, r1	; 45
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	c8 01       	movw	r24, r16
     6e2:	0e 94 80 02 	call	0x500	; 0x500 <_ZN4RF243csnEb>
     6e6:	cf 71       	andi	r28, 0x1F	; 31
     6e8:	c0 62       	ori	r28, 0x20	; 32
     6ea:	ce bd       	out	0x2e, r28	; 46
     6ec:	00 00       	nop
     6ee:	0d b4       	in	r0, 0x2d	; 45
     6f0:	07 fe       	sbrs	r0, 7
     6f2:	fd cf       	rjmp	.-6      	; 0x6ee <_ZN4RF2414write_registerEhPKhh+0x2c>
     6f4:	ce b5       	in	r28, 0x2e	; 46
     6f6:	8f ef       	ldi	r24, 0xFF	; 255
     6f8:	8d 0f       	add	r24, r29
     6fa:	dd 23       	and	r29, r29
     6fc:	59 f0       	breq	.+22     	; 0x714 <_ZN4RF2414write_registerEhPKhh+0x52>
     6fe:	ee 2d       	mov	r30, r14
     700:	ff 2d       	mov	r31, r15
     702:	91 91       	ld	r25, Z+
     704:	9e bd       	out	0x2e, r25	; 46
     706:	00 00       	nop
     708:	0d b4       	in	r0, 0x2d	; 45
     70a:	07 fe       	sbrs	r0, 7
     70c:	fd cf       	rjmp	.-6      	; 0x708 <_ZN4RF2414write_registerEhPKhh+0x46>
     70e:	9e b5       	in	r25, 0x2e	; 46
     710:	81 50       	subi	r24, 0x01	; 1
     712:	b8 f7       	brcc	.-18     	; 0x702 <_ZN4RF2414write_registerEhPKhh+0x40>
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	c8 01       	movw	r24, r16
     718:	0e 94 80 02 	call	0x500	; 0x500 <_ZN4RF243csnEb>
     71c:	8c 2f       	mov	r24, r28
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	08 95       	ret

0000072c <_ZN4RF2414write_registerEhh>:
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	8c 01       	movw	r16, r24
     736:	c6 2f       	mov	r28, r22
     738:	d4 2f       	mov	r29, r20
     73a:	80 e5       	ldi	r24, 0x50	; 80
     73c:	8c bd       	out	0x2c, r24	; 44
     73e:	1d bc       	out	0x2d, r1	; 45
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	c8 01       	movw	r24, r16
     744:	0e 94 80 02 	call	0x500	; 0x500 <_ZN4RF243csnEb>
     748:	cf 71       	andi	r28, 0x1F	; 31
     74a:	c0 62       	ori	r28, 0x20	; 32
     74c:	ce bd       	out	0x2e, r28	; 46
     74e:	00 00       	nop
     750:	0d b4       	in	r0, 0x2d	; 45
     752:	07 fe       	sbrs	r0, 7
     754:	fd cf       	rjmp	.-6      	; 0x750 <_ZN4RF2414write_registerEhh+0x24>
     756:	ce b5       	in	r28, 0x2e	; 46
     758:	de bd       	out	0x2e, r29	; 46
     75a:	00 00       	nop
     75c:	0d b4       	in	r0, 0x2d	; 45
     75e:	07 fe       	sbrs	r0, 7
     760:	fd cf       	rjmp	.-6      	; 0x75c <_ZN4RF2414write_registerEhh+0x30>
     762:	8e b5       	in	r24, 0x2e	; 46
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	c8 01       	movw	r24, r16
     768:	0e 94 80 02 	call	0x500	; 0x500 <_ZN4RF243csnEb>
     76c:	8c 2f       	mov	r24, r28
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	08 95       	ret

00000778 <_ZN4RF2412read_payloadEPvh>:
     778:	df 92       	push	r13
     77a:	ef 92       	push	r14
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	ec 01       	movw	r28, r24
     788:	d6 2e       	mov	r13, r22
     78a:	e7 2e       	mov	r14, r23
     78c:	8f 81       	ldd	r24, Y+7	; 0x07
     78e:	08 2f       	mov	r16, r24
     790:	48 17       	cp	r20, r24
     792:	08 f4       	brcc	.+2      	; 0x796 <_ZN4RF2412read_payloadEPvh+0x1e>
     794:	04 2f       	mov	r16, r20
     796:	98 85       	ldd	r25, Y+8	; 0x08
     798:	91 11       	cpse	r25, r1
     79a:	03 c0       	rjmp	.+6      	; 0x7a2 <_ZN4RF2412read_payloadEPvh+0x2a>
     79c:	18 2f       	mov	r17, r24
     79e:	10 1b       	sub	r17, r16
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <_ZN4RF2412read_payloadEPvh+0x2c>
     7a2:	10 e0       	ldi	r17, 0x00	; 0
     7a4:	80 e5       	ldi	r24, 0x50	; 80
     7a6:	8c bd       	out	0x2c, r24	; 44
     7a8:	1d bc       	out	0x2d, r1	; 45
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	ce 01       	movw	r24, r28
     7ae:	0e 94 80 02 	call	0x500	; 0x500 <_ZN4RF243csnEb>
     7b2:	81 e6       	ldi	r24, 0x61	; 97
     7b4:	8e bd       	out	0x2e, r24	; 46
     7b6:	00 00       	nop
     7b8:	0d b4       	in	r0, 0x2d	; 45
     7ba:	07 fe       	sbrs	r0, 7
     7bc:	fd cf       	rjmp	.-6      	; 0x7b8 <_ZN4RF2412read_payloadEPvh+0x40>
     7be:	fe b4       	in	r15, 0x2e	; 46
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	80 0f       	add	r24, r16
     7c4:	01 11       	cpse	r16, r1
     7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <_ZN4RF2412read_payloadEPvh+0x5a>
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	81 0f       	add	r24, r17
     7cc:	11 11       	cpse	r17, r1
     7ce:	0e c0       	rjmp	.+28     	; 0x7ec <_ZN4RF2412read_payloadEPvh+0x74>
     7d0:	16 c0       	rjmp	.+44     	; 0x7fe <_ZN4RF2412read_payloadEPvh+0x86>
     7d2:	ed 2d       	mov	r30, r13
     7d4:	fe 2d       	mov	r31, r14
     7d6:	2f ef       	ldi	r18, 0xFF	; 255
     7d8:	2e bd       	out	0x2e, r18	; 46
     7da:	00 00       	nop
     7dc:	0d b4       	in	r0, 0x2d	; 45
     7de:	07 fe       	sbrs	r0, 7
     7e0:	fd cf       	rjmp	.-6      	; 0x7dc <_ZN4RF2412read_payloadEPvh+0x64>
     7e2:	9e b5       	in	r25, 0x2e	; 46
     7e4:	91 93       	st	Z+, r25
     7e6:	81 50       	subi	r24, 0x01	; 1
     7e8:	b8 f7       	brcc	.-18     	; 0x7d8 <_ZN4RF2412read_payloadEPvh+0x60>
     7ea:	ee cf       	rjmp	.-36     	; 0x7c8 <_ZN4RF2412read_payloadEPvh+0x50>
     7ec:	9f ef       	ldi	r25, 0xFF	; 255
     7ee:	9e bd       	out	0x2e, r25	; 46
     7f0:	00 00       	nop
     7f2:	0d b4       	in	r0, 0x2d	; 45
     7f4:	07 fe       	sbrs	r0, 7
     7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <_ZN4RF2412read_payloadEPvh+0x7a>
     7f8:	2e b5       	in	r18, 0x2e	; 46
     7fa:	81 50       	subi	r24, 0x01	; 1
     7fc:	c0 f7       	brcc	.-16     	; 0x7ee <_ZN4RF2412read_payloadEPvh+0x76>
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	ce 01       	movw	r24, r28
     802:	0e 94 80 02 	call	0x500	; 0x500 <_ZN4RF243csnEb>
     806:	8f 2d       	mov	r24, r15
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	08 95       	ret

00000818 <_ZN4RF248spiTransEh>:
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	ec 01       	movw	r28, r24
     820:	16 2f       	mov	r17, r22
     822:	80 e5       	ldi	r24, 0x50	; 80
     824:	8c bd       	out	0x2c, r24	; 44
     826:	1d bc       	out	0x2d, r1	; 45
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	ce 01       	movw	r24, r28
     82c:	0e 94 80 02 	call	0x500	; 0x500 <_ZN4RF243csnEb>
     830:	1e bd       	out	0x2e, r17	; 46
     832:	00 00       	nop
     834:	0d b4       	in	r0, 0x2d	; 45
     836:	07 fe       	sbrs	r0, 7
     838:	fd cf       	rjmp	.-6      	; 0x834 <_ZN4RF248spiTransEh+0x1c>
     83a:	1e b5       	in	r17, 0x2e	; 46
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	ce 01       	movw	r24, r28
     840:	0e 94 80 02 	call	0x500	; 0x500 <_ZN4RF243csnEb>
     844:	81 2f       	mov	r24, r17
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	1f 91       	pop	r17
     84c:	08 95       	ret

0000084e <_ZN4RF248flush_rxEv>:
     84e:	62 ee       	ldi	r22, 0xE2	; 226
     850:	0e 94 0c 04 	call	0x818	; 0x818 <_ZN4RF248spiTransEh>
     854:	08 95       	ret

00000856 <_ZN4RF248flush_txEv>:
     856:	61 ee       	ldi	r22, 0xE1	; 225
     858:	0e 94 0c 04 	call	0x818	; 0x818 <_ZN4RF248spiTransEh>
     85c:	08 95       	ret

0000085e <_ZN4RF2410get_statusEv>:
     85e:	6f ef       	ldi	r22, 0xFF	; 255
     860:	0e 94 0c 04 	call	0x818	; 0x818 <_ZN4RF248spiTransEh>
     864:	08 95       	ret

00000866 <_ZN4RF24C1Ejj>:
     866:	fc 01       	movw	r30, r24
     868:	71 83       	std	Z+1, r23	; 0x01
     86a:	60 83       	st	Z, r22
     86c:	53 83       	std	Z+3, r21	; 0x03
     86e:	42 83       	std	Z+2, r20	; 0x02
     870:	16 82       	std	Z+6, r1	; 0x06
     872:	80 e2       	ldi	r24, 0x20	; 32
     874:	87 83       	std	Z+7, r24	; 0x07
     876:	10 86       	std	Z+8, r1	; 0x08
     878:	85 e0       	ldi	r24, 0x05	; 5
     87a:	86 87       	std	Z+14, r24	; 0x0e
     87c:	85 e0       	ldi	r24, 0x05	; 5
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	a0 e0       	ldi	r26, 0x00	; 0
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	84 8b       	std	Z+20, r24	; 0x14
     886:	95 8b       	std	Z+21, r25	; 0x15
     888:	a6 8b       	std	Z+22, r26	; 0x16
     88a:	b7 8b       	std	Z+23, r27	; 0x17
     88c:	11 86       	std	Z+9, r1	; 0x09
     88e:	08 95       	ret

00000890 <_ZN4RF2410setChannelEh>:
     890:	6d 37       	cpi	r22, 0x7D	; 125
     892:	10 f4       	brcc	.+4      	; 0x898 <_ZN4RF2410setChannelEh+0x8>
     894:	46 2f       	mov	r20, r22
     896:	01 c0       	rjmp	.+2      	; 0x89a <_ZN4RF2410setChannelEh+0xa>
     898:	4d e7       	ldi	r20, 0x7D	; 125
     89a:	65 e0       	ldi	r22, 0x05	; 5
     89c:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>
     8a0:	08 95       	ret

000008a2 <_ZN4RF247powerUpEv>:
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	ec 01       	movw	r28, r24
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN4RF2413read_registerEh>
     8ae:	81 fd       	sbrc	r24, 1
     8b0:	0a c0       	rjmp	.+20     	; 0x8c6 <_ZN4RF247powerUpEv+0x24>
     8b2:	48 2f       	mov	r20, r24
     8b4:	42 60       	ori	r20, 0x02	; 2
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	ce 01       	movw	r24, r28
     8ba:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>
     8be:	80 e1       	ldi	r24, 0x10	; 16
     8c0:	97 e2       	ldi	r25, 0x27	; 39
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <_ZN4RF247powerUpEv+0x20>
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <_ZN4RF249availableEPh>:
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	ec 01       	movw	r28, r24
     8d6:	8b 01       	movw	r16, r22
     8d8:	67 e1       	ldi	r22, 0x17	; 23
     8da:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN4RF2413read_registerEh>
     8de:	80 fd       	sbrc	r24, 0
     8e0:	0e c0       	rjmp	.+28     	; 0x8fe <_ZN4RF249availableEPh+0x32>
     8e2:	01 15       	cp	r16, r1
     8e4:	11 05       	cpc	r17, r1
     8e6:	69 f0       	breq	.+26     	; 0x902 <__stack+0x3>
     8e8:	ce 01       	movw	r24, r28
     8ea:	0e 94 2f 04 	call	0x85e	; 0x85e <_ZN4RF2410get_statusEv>
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	95 95       	asr	r25
     8f2:	87 95       	ror	r24
     8f4:	87 70       	andi	r24, 0x07	; 7
     8f6:	f8 01       	movw	r30, r16
     8f8:	80 83       	st	Z, r24
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	03 c0       	rjmp	.+6      	; 0x904 <__stack+0x5>
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	01 c0       	rjmp	.+2      	; 0x904 <__stack+0x5>
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	08 95       	ret

0000090e <_ZN4RF244readEPvh>:
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	ec 01       	movw	r28, r24
     914:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2412read_payloadEPvh>
     918:	40 e7       	ldi	r20, 0x70	; 112
     91a:	67 e0       	ldi	r22, 0x07	; 7
     91c:	ce 01       	movw	r24, r28
     91e:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <_ZN4RF2415openReadingPipeEhy>:
     928:	af 92       	push	r10
     92a:	bf 92       	push	r11
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	28 97       	sbiw	r28, 0x08	; 8
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	5c 01       	movw	r10, r24
     94c:	d6 2e       	mov	r13, r22
     94e:	e9 82       	std	Y+1, r14	; 0x01
     950:	fa 82       	std	Y+2, r15	; 0x02
     952:	0b 83       	std	Y+3, r16	; 0x03
     954:	1c 83       	std	Y+4, r17	; 0x04
     956:	2d 83       	std	Y+5, r18	; 0x05
     958:	3e 83       	std	Y+6, r19	; 0x06
     95a:	4f 83       	std	Y+7, r20	; 0x07
     95c:	58 87       	std	Y+8, r21	; 0x08
     95e:	61 11       	cpse	r22, r1
     960:	0b c0       	rjmp	.+22     	; 0x978 <_ZN4RF2415openReadingPipeEhy+0x50>
     962:	dc 01       	movw	r26, r24
     964:	1e 96       	adiw	r26, 0x0e	; 14
     966:	4c 91       	ld	r20, X
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	be 01       	movw	r22, r28
     96c:	6f 5f       	subi	r22, 0xFF	; 255
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	09 96       	adiw	r24, 0x09	; 9
     972:	0e 94 b0 08 	call	0x1160	; 0x1160 <memcpy>
     976:	06 c0       	rjmp	.+12     	; 0x984 <_ZN4RF2415openReadingPipeEhy+0x5c>
     978:	b6 e0       	ldi	r27, 0x06	; 6
     97a:	b6 17       	cp	r27, r22
     97c:	e8 f1       	brcs	.+122    	; 0x9f8 <_ZN4RF2415openReadingPipeEhy+0xd0>
     97e:	e1 e0       	ldi	r30, 0x01	; 1
     980:	e6 17       	cp	r30, r22
     982:	78 f0       	brcs	.+30     	; 0x9a2 <_ZN4RF2415openReadingPipeEhy+0x7a>
     984:	ed 2d       	mov	r30, r13
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	e4 5d       	subi	r30, 0xD4	; 212
     98a:	fe 4f       	sbci	r31, 0xFE	; 254
     98c:	d5 01       	movw	r26, r10
     98e:	1e 96       	adiw	r26, 0x0e	; 14
     990:	2c 91       	ld	r18, X
     992:	ae 01       	movw	r20, r28
     994:	4f 5f       	subi	r20, 0xFF	; 255
     996:	5f 4f       	sbci	r21, 0xFF	; 255
     998:	60 81       	ld	r22, Z
     99a:	c5 01       	movw	r24, r10
     99c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_ZN4RF2414write_registerEhPKhh>
     9a0:	0b c0       	rjmp	.+22     	; 0x9b8 <_ZN4RF2415openReadingPipeEhy+0x90>
     9a2:	e6 2f       	mov	r30, r22
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	e4 5d       	subi	r30, 0xD4	; 212
     9a8:	fe 4f       	sbci	r31, 0xFE	; 254
     9aa:	21 e0       	ldi	r18, 0x01	; 1
     9ac:	ae 01       	movw	r20, r28
     9ae:	4f 5f       	subi	r20, 0xFF	; 255
     9b0:	5f 4f       	sbci	r21, 0xFF	; 255
     9b2:	60 81       	ld	r22, Z
     9b4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_ZN4RF2414write_registerEhPKhh>
     9b8:	0d 2d       	mov	r16, r13
     9ba:	10 e0       	ldi	r17, 0x00	; 0
     9bc:	f8 01       	movw	r30, r16
     9be:	ea 5d       	subi	r30, 0xDA	; 218
     9c0:	fe 4f       	sbci	r31, 0xFE	; 254
     9c2:	d5 01       	movw	r26, r10
     9c4:	17 96       	adiw	r26, 0x07	; 7
     9c6:	4c 91       	ld	r20, X
     9c8:	60 81       	ld	r22, Z
     9ca:	c5 01       	movw	r24, r10
     9cc:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	c5 01       	movw	r24, r10
     9d4:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN4RF2413read_registerEh>
     9d8:	f8 01       	movw	r30, r16
     9da:	ee 5c       	subi	r30, 0xCE	; 206
     9dc:	fe 4f       	sbci	r31, 0xFE	; 254
     9de:	41 e0       	ldi	r20, 0x01	; 1
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	00 80       	ld	r0, Z
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <_ZN4RF2415openReadingPipeEhy+0xc2>
     9e6:	44 0f       	add	r20, r20
     9e8:	55 1f       	adc	r21, r21
     9ea:	0a 94       	dec	r0
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <_ZN4RF2415openReadingPipeEhy+0xbe>
     9ee:	48 2b       	or	r20, r24
     9f0:	62 e0       	ldi	r22, 0x02	; 2
     9f2:	c5 01       	movw	r24, r10
     9f4:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>
     9f8:	28 96       	adiw	r28, 0x08	; 8
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	bf 90       	pop	r11
     a14:	af 90       	pop	r10
     a16:	08 95       	ret

00000a18 <_ZN4RF2416closeReadingPipeEh>:
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	ec 01       	movw	r28, r24
     a20:	16 2f       	mov	r17, r22
     a22:	62 e0       	ldi	r22, 0x02	; 2
     a24:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN4RF2413read_registerEh>
     a28:	e1 2f       	mov	r30, r17
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	ee 5c       	subi	r30, 0xCE	; 206
     a2e:	fe 4f       	sbci	r31, 0xFE	; 254
     a30:	41 e0       	ldi	r20, 0x01	; 1
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	00 80       	ld	r0, Z
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <_ZN4RF2416closeReadingPipeEh+0x24>
     a38:	44 0f       	add	r20, r20
     a3a:	55 1f       	adc	r21, r21
     a3c:	0a 94       	dec	r0
     a3e:	e2 f7       	brpl	.-8      	; 0xa38 <_ZN4RF2416closeReadingPipeEh+0x20>
     a40:	40 95       	com	r20
     a42:	48 23       	and	r20, r24
     a44:	62 e0       	ldi	r22, 0x02	; 2
     a46:	ce 01       	movw	r24, r28
     a48:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	08 95       	ret

00000a54 <_ZN4RF2414startListeningEv>:
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	ec 01       	movw	r28, r24
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN4RF2413read_registerEh>
     a60:	48 2f       	mov	r20, r24
     a62:	41 60       	ori	r20, 0x01	; 1
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	ce 01       	movw	r24, r28
     a68:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>
     a6c:	40 e7       	ldi	r20, 0x70	; 112
     a6e:	67 e0       	ldi	r22, 0x07	; 7
     a70:	ce 01       	movw	r24, r28
     a72:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>
     a76:	61 e0       	ldi	r22, 0x01	; 1
     a78:	ce 01       	movw	r24, r28
     a7a:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN4RF242ceEb>
     a7e:	89 85       	ldd	r24, Y+9	; 0x09
     a80:	88 23       	and	r24, r24
     a82:	49 f0       	breq	.+18     	; 0xa96 <_ZN4RF2414startListeningEv+0x42>
     a84:	2e 85       	ldd	r18, Y+14	; 0x0e
     a86:	ae 01       	movw	r20, r28
     a88:	47 5f       	subi	r20, 0xF7	; 247
     a8a:	5f 4f       	sbci	r21, 0xFF	; 255
     a8c:	6a e0       	ldi	r22, 0x0A	; 10
     a8e:	ce 01       	movw	r24, r28
     a90:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_ZN4RF2414write_registerEhPKhh>
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <_ZN4RF2414startListeningEv+0x4a>
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	ce 01       	movw	r24, r28
     a9a:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN4RF2416closeReadingPipeEh>
     a9e:	6d e1       	ldi	r22, 0x1D	; 29
     aa0:	ce 01       	movw	r24, r28
     aa2:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN4RF2413read_registerEh>
     aa6:	81 ff       	sbrs	r24, 1
     aa8:	03 c0       	rjmp	.+6      	; 0xab0 <_ZN4RF2414startListeningEv+0x5c>
     aaa:	ce 01       	movw	r24, r28
     aac:	0e 94 2b 04 	call	0x856	; 0x856 <_ZN4RF248flush_txEv>
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <_ZN4RF2415toggle_featuresEv>:
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ec 01       	movw	r28, r24
     abe:	10 e5       	ldi	r17, 0x50	; 80
     ac0:	1c bd       	out	0x2c, r17	; 44
     ac2:	1d bc       	out	0x2d, r1	; 45
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	0e 94 80 02 	call	0x500	; 0x500 <_ZN4RF243csnEb>
     aca:	1e bd       	out	0x2e, r17	; 46
     acc:	00 00       	nop
     ace:	0d b4       	in	r0, 0x2d	; 45
     ad0:	07 fe       	sbrs	r0, 7
     ad2:	fd cf       	rjmp	.-6      	; 0xace <_ZN4RF2415toggle_featuresEv+0x18>
     ad4:	8e b5       	in	r24, 0x2e	; 46
     ad6:	83 e7       	ldi	r24, 0x73	; 115
     ad8:	8e bd       	out	0x2e, r24	; 46
     ada:	00 00       	nop
     adc:	0d b4       	in	r0, 0x2d	; 45
     ade:	07 fe       	sbrs	r0, 7
     ae0:	fd cf       	rjmp	.-6      	; 0xadc <_ZN4RF2415toggle_featuresEv+0x26>
     ae2:	8e b5       	in	r24, 0x2e	; 46
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	ce 01       	movw	r24, r28
     ae8:	0e 94 80 02 	call	0x500	; 0x500 <_ZN4RF243csnEb>
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	08 95       	ret

00000af4 <_ZN4RF2410setPALevelEh>:

/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	8c 01       	movw	r16, r24
     afc:	c6 2f       	mov	r28, r22

  uint8_t setup = read_register(RF_SETUP) & 0xF8;
     afe:	66 e0       	ldi	r22, 0x06	; 6
     b00:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN4RF2413read_registerEh>
     b04:	88 7f       	andi	r24, 0xF8	; 248

  if(level > 3){  						// If invalid level, go to max PA
     b06:	c4 30       	cpi	r28, 0x04	; 4
     b08:	18 f4       	brcc	.+6      	; 0xb10 <_ZN4RF2410setPALevelEh+0x1c>
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
     b0a:	cc 0f       	add	r28, r28
     b0c:	cf 5f       	subi	r28, 0xFF	; 255
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <_ZN4RF2410setPALevelEh+0x1e>
{

  uint8_t setup = read_register(RF_SETUP) & 0xF8;

  if(level > 3){  						// If invalid level, go to max PA
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
     b10:	c7 e0       	ldi	r28, 0x07	; 7
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
  }


  write_register( RF_SETUP, setup |= level ) ;	// Write it to the chip
     b12:	4c 2f       	mov	r20, r28
     b14:	48 2b       	or	r20, r24
     b16:	66 e0       	ldi	r22, 0x06	; 6
     b18:	c8 01       	movw	r24, r16
     b1a:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>
}
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	08 95       	ret

00000b26 <_ZN4RF2410getPALevelEv>:
/****************************************************************************/

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
     b26:	66 e0       	ldi	r22, 0x06	; 6
     b28:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN4RF2413read_registerEh>
     b2c:	86 70       	andi	r24, 0x06	; 6
}
     b2e:	86 95       	lsr	r24
     b30:	08 95       	ret

00000b32 <_ZN4RF2411setDataRateE15rf24_datarate_e>:

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	ec 01       	movw	r28, r24
     b3c:	06 2f       	mov	r16, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     b3e:	66 e0       	ldi	r22, 0x06	; 6
     b40:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     b44:	18 2f       	mov	r17, r24
     b46:	17 7d       	andi	r17, 0xD7	; 215
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
  //#endif
  if( speed == RF24_250KBPS )
     b48:	02 30       	cpi	r16, 0x02	; 2
     b4a:	51 f4       	brne	.+20     	; 0xb60 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2e>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
     b4c:	10 62       	ori	r17, 0x20	; 32
 /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=450;
  #else //16Mhz Arduino*/
	txDelay=155;
     b4e:	8b e9       	ldi	r24, 0x9B	; 155
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 e0       	ldi	r26, 0x00	; 0
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	88 8b       	std	Y+16, r24	; 0x10
     b58:	99 8b       	std	Y+17, r25	; 0x11
     b5a:	aa 8b       	std	Y+18, r26	; 0x12
     b5c:	bb 8b       	std	Y+19, r27	; 0x13
     b5e:	14 c0       	rjmp	.+40     	; 0xb88 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     b60:	01 30       	cpi	r16, 0x01	; 1
     b62:	49 f0       	breq	.+18     	; 0xb76 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
/*  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
     b64:	85 e5       	ldi	r24, 0x55	; 85
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	88 8b       	std	Y+16, r24	; 0x10
     b6e:	99 8b       	std	Y+17, r25	; 0x11
     b70:	aa 8b       	std	Y+18, r26	; 0x12
     b72:	bb 8b       	std	Y+19, r27	; 0x13
     b74:	09 c0       	rjmp	.+18     	; 0xb88 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
     b76:	18 60       	ori	r17, 0x08	; 8
     /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txDelay=190;
      #else //16Mhz Arduino	*/  
	 txDelay=65;
     b78:	81 e4       	ldi	r24, 0x41	; 65
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	a0 e0       	ldi	r26, 0x00	; 0
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	88 8b       	std	Y+16, r24	; 0x10
     b82:	99 8b       	std	Y+17, r25	; 0x11
     b84:	aa 8b       	std	Y+18, r26	; 0x12
     b86:	bb 8b       	std	Y+19, r27	; 0x13
	  //#endif
    }
  }
  write_register(RF_SETUP,setup);
     b88:	41 2f       	mov	r20, r17
     b8a:	66 e0       	ldi	r22, 0x06	; 6
     b8c:	ce 01       	movw	r24, r28
     b8e:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     b92:	66 e0       	ldi	r22, 0x06	; 6
     b94:	ce 01       	movw	r24, r28
     b96:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN4RF2413read_registerEh>
  {
    result = true;
  }
  return result;
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	18 13       	cpse	r17, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
}
     ba0:	89 2f       	mov	r24, r25
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	08 95       	ret

00000bac <_ZN4RF245beginEv>:
}

/****************************************************************************/

bool RF24::begin(void)
{
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	ec 01       	movw	r28, r24
  uint8_t setup=0;

    if (ce_pin != csn_pin) Set_pin(ce_pin,OUT);  
     bb4:	88 81       	ld	r24, Y
     bb6:	99 81       	ldd	r25, Y+1	; 0x01
     bb8:	2a 81       	ldd	r18, Y+2	; 0x02
     bba:	3b 81       	ldd	r19, Y+3	; 0x03
     bbc:	82 17       	cp	r24, r18
     bbe:	93 07       	cpc	r25, r19
     bc0:	21 f0       	breq	.+8      	; 0xbca <_ZN4RF245beginEv+0x1e>
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Set_pin>
        Set_pin(csn_pin,OUT);
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	9b 81       	ldd	r25, Y+3	; 0x03
     bd2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Set_pin>
    _SPI.begin();
     bd6:	0e 94 4b 06 	call	0xc96	; 0xc96 <_ZN8SPIClass5beginEv>
    ce(low);
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	ce 01       	movw	r24, r28
     bde:	0e 94 2f 03 	call	0x65e	; 0x65e <_ZN4RF242ceEb>
  	csn(high);
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	ce 01       	movw	r24, r28
     be6:	0e 94 80 02 	call	0x500	; 0x500 <_ZN4RF243csnEb>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     bea:	80 e1       	ldi	r24, 0x10	; 16
     bec:	97 e2       	ldi	r25, 0x27	; 39
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <_ZN4RF245beginEv+0x42>
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: _delay_ms is based on P-variant whereby non-P *may* require different timing.
  _delay_ms( 5 ) ;

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;
     bf2:	4c e0       	ldi	r20, 0x0C	; 12
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	ce 01       	movw	r24, r28
     bf8:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     bfc:	4f e5       	ldi	r20, 0x5F	; 95
     bfe:	64 e0       	ldi	r22, 0x04	; 4
     c00:	ce 01       	movw	r24, r28
     c02:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
     c06:	62 e0       	ldi	r22, 0x02	; 2
     c08:	ce 01       	movw	r24, r28
     c0a:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     c0e:	88 23       	and	r24, r24
     c10:	11 f0       	breq	.+4      	; 0xc16 <_ZN4RF245beginEv+0x6a>
  {
    p_variant = true ;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	8e 83       	std	Y+6, r24	; 0x06
  }
  setup = read_register(RF_SETUP);
     c16:	66 e0       	ldi	r22, 0x06	; 6
     c18:	ce 01       	movw	r24, r28
     c1a:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN4RF2413read_registerEh>
     c1e:	18 2f       	mov	r17, r24
 if( setup == 0b00001110 )     // register default for nRF24L01P
     c20:	8e 30       	cpi	r24, 0x0E	; 14
     c22:	11 f4       	brne	.+4      	; 0xc28 <_ZN4RF245beginEv+0x7c>
  {
    p_variant = true ;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	8e 83       	std	Y+6, r24	; 0x06
  }
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	ce 01       	movw	r24, r28
     c2c:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
     c30:	ce 01       	movw	r24, r28
     c32:	0e 94 5b 05 	call	0xab6	; 0xab6 <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	6d e1       	ldi	r22, 0x1D	; 29
     c3a:	ce 01       	movw	r24, r28
     c3c:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	6c e1       	ldi	r22, 0x1C	; 28
     c44:	ce 01       	movw	r24, r28
     c46:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>
  dynamic_payloads_enabled = false;
     c4a:	18 86       	std	Y+8, r1	; 0x08

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     c4c:	40 e7       	ldi	r20, 0x70	; 112
     c4e:	67 e0       	ldi	r22, 0x07	; 7
     c50:	ce 01       	movw	r24, r28
     c52:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
     c56:	6c e4       	ldi	r22, 0x4C	; 76
     c58:	ce 01       	movw	r24, r28
     c5a:	0e 94 48 04 	call	0x890	; 0x890 <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
     c5e:	ce 01       	movw	r24, r28
     c60:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN4RF248flush_rxEv>
  flush_tx();
     c64:	ce 01       	movw	r24, r28
     c66:	0e 94 2b 04 	call	0x856	; 0x856 <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
     c6a:	ce 01       	movw	r24, r28
     c6c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	ce 01       	movw	r24, r28
     c74:	0e 94 3e 03 	call	0x67c	; 0x67c <_ZN4RF2413read_registerEh>
     c78:	48 2f       	mov	r20, r24
     c7a:	4e 7f       	andi	r20, 0xFE	; 254
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	ce 01       	movw	r24, r28
     c80:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
     c84:	11 50       	subi	r17, 0x01	; 1
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	1e 3f       	cpi	r17, 0xFE	; 254
     c8a:	08 f0       	brcs	.+2      	; 0xc8e <_ZN4RF245beginEv+0xe2>
     c8c:	80 e0       	ldi	r24, 0x00	; 0
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	08 95       	ret

00000c96 <_ZN8SPIClass5beginEv>:
void SPIClass::begin()
{
 //  cli();//noInterrupts(); // Protect from a scheduler and prevent transactionBegin
 
    
    Set_pin(SS, OUT);
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	8a e0       	ldi	r24, 0x0A	; 10
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Set_pin>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUT.
    SPCR |= _BV(MSTR);
     ca2:	8c b5       	in	r24, 0x2c	; 44
     ca4:	80 61       	ori	r24, 0x10	; 16
     ca6:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     ca8:	8c b5       	in	r24, 0x2c	; 44
     caa:	80 64       	ori	r24, 0x40	; 64
     cac:	8c bd       	out	0x2c, r24	; 44
    // Set direction register for SCK and MOSI pin.
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    Set_pin(SCK, OUT);
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	8d e0       	ldi	r24, 0x0D	; 13
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Set_pin>
    Set_pin(MOSI, OUT);
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	8b e0       	ldi	r24, 0x0B	; 11
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Set_pin>
     cc6:	08 95       	ret

00000cc8 <__subsf3>:
     cc8:	50 58       	subi	r21, 0x80	; 128

00000cca <__addsf3>:
     cca:	bb 27       	eor	r27, r27
     ccc:	aa 27       	eor	r26, r26
     cce:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__addsf3x>
     cd2:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_round>
     cd6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscA>
     cda:	38 f0       	brcs	.+14     	; 0xcea <__addsf3+0x20>
     cdc:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_pscB>
     ce0:	20 f0       	brcs	.+8      	; 0xcea <__addsf3+0x20>
     ce2:	39 f4       	brne	.+14     	; 0xcf2 <__addsf3+0x28>
     ce4:	9f 3f       	cpi	r25, 0xFF	; 255
     ce6:	19 f4       	brne	.+6      	; 0xcee <__addsf3+0x24>
     ce8:	26 f4       	brtc	.+8      	; 0xcf2 <__addsf3+0x28>
     cea:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_nan>
     cee:	0e f4       	brtc	.+2      	; 0xcf2 <__addsf3+0x28>
     cf0:	e0 95       	com	r30
     cf2:	e7 fb       	bst	r30, 7
     cf4:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_inf>

00000cf8 <__addsf3x>:
     cf8:	e9 2f       	mov	r30, r25
     cfa:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_split3>
     cfe:	58 f3       	brcs	.-42     	; 0xcd6 <__addsf3+0xc>
     d00:	ba 17       	cp	r27, r26
     d02:	62 07       	cpc	r22, r18
     d04:	73 07       	cpc	r23, r19
     d06:	84 07       	cpc	r24, r20
     d08:	95 07       	cpc	r25, r21
     d0a:	20 f0       	brcs	.+8      	; 0xd14 <__addsf3x+0x1c>
     d0c:	79 f4       	brne	.+30     	; 0xd2c <__addsf3x+0x34>
     d0e:	a6 f5       	brtc	.+104    	; 0xd78 <__addsf3x+0x80>
     d10:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_zero>
     d14:	0e f4       	brtc	.+2      	; 0xd18 <__addsf3x+0x20>
     d16:	e0 95       	com	r30
     d18:	0b 2e       	mov	r0, r27
     d1a:	ba 2f       	mov	r27, r26
     d1c:	a0 2d       	mov	r26, r0
     d1e:	0b 01       	movw	r0, r22
     d20:	b9 01       	movw	r22, r18
     d22:	90 01       	movw	r18, r0
     d24:	0c 01       	movw	r0, r24
     d26:	ca 01       	movw	r24, r20
     d28:	a0 01       	movw	r20, r0
     d2a:	11 24       	eor	r1, r1
     d2c:	ff 27       	eor	r31, r31
     d2e:	59 1b       	sub	r21, r25
     d30:	99 f0       	breq	.+38     	; 0xd58 <__addsf3x+0x60>
     d32:	59 3f       	cpi	r21, 0xF9	; 249
     d34:	50 f4       	brcc	.+20     	; 0xd4a <__addsf3x+0x52>
     d36:	50 3e       	cpi	r21, 0xE0	; 224
     d38:	68 f1       	brcs	.+90     	; 0xd94 <__addsf3x+0x9c>
     d3a:	1a 16       	cp	r1, r26
     d3c:	f0 40       	sbci	r31, 0x00	; 0
     d3e:	a2 2f       	mov	r26, r18
     d40:	23 2f       	mov	r18, r19
     d42:	34 2f       	mov	r19, r20
     d44:	44 27       	eor	r20, r20
     d46:	58 5f       	subi	r21, 0xF8	; 248
     d48:	f3 cf       	rjmp	.-26     	; 0xd30 <__addsf3x+0x38>
     d4a:	46 95       	lsr	r20
     d4c:	37 95       	ror	r19
     d4e:	27 95       	ror	r18
     d50:	a7 95       	ror	r26
     d52:	f0 40       	sbci	r31, 0x00	; 0
     d54:	53 95       	inc	r21
     d56:	c9 f7       	brne	.-14     	; 0xd4a <__addsf3x+0x52>
     d58:	7e f4       	brtc	.+30     	; 0xd78 <__addsf3x+0x80>
     d5a:	1f 16       	cp	r1, r31
     d5c:	ba 0b       	sbc	r27, r26
     d5e:	62 0b       	sbc	r22, r18
     d60:	73 0b       	sbc	r23, r19
     d62:	84 0b       	sbc	r24, r20
     d64:	ba f0       	brmi	.+46     	; 0xd94 <__addsf3x+0x9c>
     d66:	91 50       	subi	r25, 0x01	; 1
     d68:	a1 f0       	breq	.+40     	; 0xd92 <__addsf3x+0x9a>
     d6a:	ff 0f       	add	r31, r31
     d6c:	bb 1f       	adc	r27, r27
     d6e:	66 1f       	adc	r22, r22
     d70:	77 1f       	adc	r23, r23
     d72:	88 1f       	adc	r24, r24
     d74:	c2 f7       	brpl	.-16     	; 0xd66 <__addsf3x+0x6e>
     d76:	0e c0       	rjmp	.+28     	; 0xd94 <__addsf3x+0x9c>
     d78:	ba 0f       	add	r27, r26
     d7a:	62 1f       	adc	r22, r18
     d7c:	73 1f       	adc	r23, r19
     d7e:	84 1f       	adc	r24, r20
     d80:	48 f4       	brcc	.+18     	; 0xd94 <__addsf3x+0x9c>
     d82:	87 95       	ror	r24
     d84:	77 95       	ror	r23
     d86:	67 95       	ror	r22
     d88:	b7 95       	ror	r27
     d8a:	f7 95       	ror	r31
     d8c:	9e 3f       	cpi	r25, 0xFE	; 254
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <__addsf3x+0x9a>
     d90:	b0 cf       	rjmp	.-160    	; 0xcf2 <__addsf3+0x28>
     d92:	93 95       	inc	r25
     d94:	88 0f       	add	r24, r24
     d96:	08 f0       	brcs	.+2      	; 0xd9a <__addsf3x+0xa2>
     d98:	99 27       	eor	r25, r25
     d9a:	ee 0f       	add	r30, r30
     d9c:	97 95       	ror	r25
     d9e:	87 95       	ror	r24
     da0:	08 95       	ret

00000da2 <__cmpsf2>:
     da2:	0e 94 b4 07 	call	0xf68	; 0xf68 <__fp_cmp>
     da6:	08 f4       	brcc	.+2      	; 0xdaa <__cmpsf2+0x8>
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	08 95       	ret

00000dac <__divsf3>:
     dac:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__divsf3x>
     db0:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_round>
     db4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_pscB>
     db8:	58 f0       	brcs	.+22     	; 0xdd0 <__divsf3+0x24>
     dba:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscA>
     dbe:	40 f0       	brcs	.+16     	; 0xdd0 <__divsf3+0x24>
     dc0:	29 f4       	brne	.+10     	; 0xdcc <__divsf3+0x20>
     dc2:	5f 3f       	cpi	r21, 0xFF	; 255
     dc4:	29 f0       	breq	.+10     	; 0xdd0 <__divsf3+0x24>
     dc6:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_inf>
     dca:	51 11       	cpse	r21, r1
     dcc:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_szero>
     dd0:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_nan>

00000dd4 <__divsf3x>:
     dd4:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_split3>
     dd8:	68 f3       	brcs	.-38     	; 0xdb4 <__divsf3+0x8>

00000dda <__divsf3_pse>:
     dda:	99 23       	and	r25, r25
     ddc:	b1 f3       	breq	.-20     	; 0xdca <__divsf3+0x1e>
     dde:	55 23       	and	r21, r21
     de0:	91 f3       	breq	.-28     	; 0xdc6 <__divsf3+0x1a>
     de2:	95 1b       	sub	r25, r21
     de4:	55 0b       	sbc	r21, r21
     de6:	bb 27       	eor	r27, r27
     de8:	aa 27       	eor	r26, r26
     dea:	62 17       	cp	r22, r18
     dec:	73 07       	cpc	r23, r19
     dee:	84 07       	cpc	r24, r20
     df0:	38 f0       	brcs	.+14     	; 0xe00 <__divsf3_pse+0x26>
     df2:	9f 5f       	subi	r25, 0xFF	; 255
     df4:	5f 4f       	sbci	r21, 0xFF	; 255
     df6:	22 0f       	add	r18, r18
     df8:	33 1f       	adc	r19, r19
     dfa:	44 1f       	adc	r20, r20
     dfc:	aa 1f       	adc	r26, r26
     dfe:	a9 f3       	breq	.-22     	; 0xdea <__divsf3_pse+0x10>
     e00:	35 d0       	rcall	.+106    	; 0xe6c <__divsf3_pse+0x92>
     e02:	0e 2e       	mov	r0, r30
     e04:	3a f0       	brmi	.+14     	; 0xe14 <__divsf3_pse+0x3a>
     e06:	e0 e8       	ldi	r30, 0x80	; 128
     e08:	32 d0       	rcall	.+100    	; 0xe6e <__divsf3_pse+0x94>
     e0a:	91 50       	subi	r25, 0x01	; 1
     e0c:	50 40       	sbci	r21, 0x00	; 0
     e0e:	e6 95       	lsr	r30
     e10:	00 1c       	adc	r0, r0
     e12:	ca f7       	brpl	.-14     	; 0xe06 <__divsf3_pse+0x2c>
     e14:	2b d0       	rcall	.+86     	; 0xe6c <__divsf3_pse+0x92>
     e16:	fe 2f       	mov	r31, r30
     e18:	29 d0       	rcall	.+82     	; 0xe6c <__divsf3_pse+0x92>
     e1a:	66 0f       	add	r22, r22
     e1c:	77 1f       	adc	r23, r23
     e1e:	88 1f       	adc	r24, r24
     e20:	bb 1f       	adc	r27, r27
     e22:	26 17       	cp	r18, r22
     e24:	37 07       	cpc	r19, r23
     e26:	48 07       	cpc	r20, r24
     e28:	ab 07       	cpc	r26, r27
     e2a:	b0 e8       	ldi	r27, 0x80	; 128
     e2c:	09 f0       	breq	.+2      	; 0xe30 <__divsf3_pse+0x56>
     e2e:	bb 0b       	sbc	r27, r27
     e30:	80 2d       	mov	r24, r0
     e32:	bf 01       	movw	r22, r30
     e34:	ff 27       	eor	r31, r31
     e36:	93 58       	subi	r25, 0x83	; 131
     e38:	5f 4f       	sbci	r21, 0xFF	; 255
     e3a:	3a f0       	brmi	.+14     	; 0xe4a <__divsf3_pse+0x70>
     e3c:	9e 3f       	cpi	r25, 0xFE	; 254
     e3e:	51 05       	cpc	r21, r1
     e40:	78 f0       	brcs	.+30     	; 0xe60 <__divsf3_pse+0x86>
     e42:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_inf>
     e46:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_szero>
     e4a:	5f 3f       	cpi	r21, 0xFF	; 255
     e4c:	e4 f3       	brlt	.-8      	; 0xe46 <__divsf3_pse+0x6c>
     e4e:	98 3e       	cpi	r25, 0xE8	; 232
     e50:	d4 f3       	brlt	.-12     	; 0xe46 <__divsf3_pse+0x6c>
     e52:	86 95       	lsr	r24
     e54:	77 95       	ror	r23
     e56:	67 95       	ror	r22
     e58:	b7 95       	ror	r27
     e5a:	f7 95       	ror	r31
     e5c:	9f 5f       	subi	r25, 0xFF	; 255
     e5e:	c9 f7       	brne	.-14     	; 0xe52 <__divsf3_pse+0x78>
     e60:	88 0f       	add	r24, r24
     e62:	91 1d       	adc	r25, r1
     e64:	96 95       	lsr	r25
     e66:	87 95       	ror	r24
     e68:	97 f9       	bld	r25, 7
     e6a:	08 95       	ret
     e6c:	e1 e0       	ldi	r30, 0x01	; 1
     e6e:	66 0f       	add	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	88 1f       	adc	r24, r24
     e74:	bb 1f       	adc	r27, r27
     e76:	62 17       	cp	r22, r18
     e78:	73 07       	cpc	r23, r19
     e7a:	84 07       	cpc	r24, r20
     e7c:	ba 07       	cpc	r27, r26
     e7e:	20 f0       	brcs	.+8      	; 0xe88 <__divsf3_pse+0xae>
     e80:	62 1b       	sub	r22, r18
     e82:	73 0b       	sbc	r23, r19
     e84:	84 0b       	sbc	r24, r20
     e86:	ba 0b       	sbc	r27, r26
     e88:	ee 1f       	adc	r30, r30
     e8a:	88 f7       	brcc	.-30     	; 0xe6e <__divsf3_pse+0x94>
     e8c:	e0 95       	com	r30
     e8e:	08 95       	ret

00000e90 <__fixunssfsi>:
     e90:	0e 94 08 08 	call	0x1010	; 0x1010 <__fp_splitA>
     e94:	88 f0       	brcs	.+34     	; 0xeb8 <__fixunssfsi+0x28>
     e96:	9f 57       	subi	r25, 0x7F	; 127
     e98:	98 f0       	brcs	.+38     	; 0xec0 <__fixunssfsi+0x30>
     e9a:	b9 2f       	mov	r27, r25
     e9c:	99 27       	eor	r25, r25
     e9e:	b7 51       	subi	r27, 0x17	; 23
     ea0:	b0 f0       	brcs	.+44     	; 0xece <__fixunssfsi+0x3e>
     ea2:	e1 f0       	breq	.+56     	; 0xedc <__fixunssfsi+0x4c>
     ea4:	66 0f       	add	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	88 1f       	adc	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	1a f0       	brmi	.+6      	; 0xeb4 <__fixunssfsi+0x24>
     eae:	ba 95       	dec	r27
     eb0:	c9 f7       	brne	.-14     	; 0xea4 <__fixunssfsi+0x14>
     eb2:	14 c0       	rjmp	.+40     	; 0xedc <__fixunssfsi+0x4c>
     eb4:	b1 30       	cpi	r27, 0x01	; 1
     eb6:	91 f0       	breq	.+36     	; 0xedc <__fixunssfsi+0x4c>
     eb8:	0e 94 22 08 	call	0x1044	; 0x1044 <__fp_zero>
     ebc:	b1 e0       	ldi	r27, 0x01	; 1
     ebe:	08 95       	ret
     ec0:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_zero>
     ec4:	67 2f       	mov	r22, r23
     ec6:	78 2f       	mov	r23, r24
     ec8:	88 27       	eor	r24, r24
     eca:	b8 5f       	subi	r27, 0xF8	; 248
     ecc:	39 f0       	breq	.+14     	; 0xedc <__fixunssfsi+0x4c>
     ece:	b9 3f       	cpi	r27, 0xF9	; 249
     ed0:	cc f3       	brlt	.-14     	; 0xec4 <__fixunssfsi+0x34>
     ed2:	86 95       	lsr	r24
     ed4:	77 95       	ror	r23
     ed6:	67 95       	ror	r22
     ed8:	b3 95       	inc	r27
     eda:	d9 f7       	brne	.-10     	; 0xed2 <__fixunssfsi+0x42>
     edc:	3e f4       	brtc	.+14     	; 0xeec <__fixunssfsi+0x5c>
     ede:	90 95       	com	r25
     ee0:	80 95       	com	r24
     ee2:	70 95       	com	r23
     ee4:	61 95       	neg	r22
     ee6:	7f 4f       	sbci	r23, 0xFF	; 255
     ee8:	8f 4f       	sbci	r24, 0xFF	; 255
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	08 95       	ret

00000eee <__floatunsisf>:
     eee:	e8 94       	clt
     ef0:	09 c0       	rjmp	.+18     	; 0xf04 <__floatsisf+0x12>

00000ef2 <__floatsisf>:
     ef2:	97 fb       	bst	r25, 7
     ef4:	3e f4       	brtc	.+14     	; 0xf04 <__floatsisf+0x12>
     ef6:	90 95       	com	r25
     ef8:	80 95       	com	r24
     efa:	70 95       	com	r23
     efc:	61 95       	neg	r22
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	8f 4f       	sbci	r24, 0xFF	; 255
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	99 23       	and	r25, r25
     f06:	a9 f0       	breq	.+42     	; 0xf32 <__floatsisf+0x40>
     f08:	f9 2f       	mov	r31, r25
     f0a:	96 e9       	ldi	r25, 0x96	; 150
     f0c:	bb 27       	eor	r27, r27
     f0e:	93 95       	inc	r25
     f10:	f6 95       	lsr	r31
     f12:	87 95       	ror	r24
     f14:	77 95       	ror	r23
     f16:	67 95       	ror	r22
     f18:	b7 95       	ror	r27
     f1a:	f1 11       	cpse	r31, r1
     f1c:	f8 cf       	rjmp	.-16     	; 0xf0e <__floatsisf+0x1c>
     f1e:	fa f4       	brpl	.+62     	; 0xf5e <__floatsisf+0x6c>
     f20:	bb 0f       	add	r27, r27
     f22:	11 f4       	brne	.+4      	; 0xf28 <__floatsisf+0x36>
     f24:	60 ff       	sbrs	r22, 0
     f26:	1b c0       	rjmp	.+54     	; 0xf5e <__floatsisf+0x6c>
     f28:	6f 5f       	subi	r22, 0xFF	; 255
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	8f 4f       	sbci	r24, 0xFF	; 255
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	16 c0       	rjmp	.+44     	; 0xf5e <__floatsisf+0x6c>
     f32:	88 23       	and	r24, r24
     f34:	11 f0       	breq	.+4      	; 0xf3a <__floatsisf+0x48>
     f36:	96 e9       	ldi	r25, 0x96	; 150
     f38:	11 c0       	rjmp	.+34     	; 0xf5c <__floatsisf+0x6a>
     f3a:	77 23       	and	r23, r23
     f3c:	21 f0       	breq	.+8      	; 0xf46 <__floatsisf+0x54>
     f3e:	9e e8       	ldi	r25, 0x8E	; 142
     f40:	87 2f       	mov	r24, r23
     f42:	76 2f       	mov	r23, r22
     f44:	05 c0       	rjmp	.+10     	; 0xf50 <__floatsisf+0x5e>
     f46:	66 23       	and	r22, r22
     f48:	71 f0       	breq	.+28     	; 0xf66 <__floatsisf+0x74>
     f4a:	96 e8       	ldi	r25, 0x86	; 134
     f4c:	86 2f       	mov	r24, r22
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	2a f0       	brmi	.+10     	; 0xf5e <__floatsisf+0x6c>
     f54:	9a 95       	dec	r25
     f56:	66 0f       	add	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	88 1f       	adc	r24, r24
     f5c:	da f7       	brpl	.-10     	; 0xf54 <__floatsisf+0x62>
     f5e:	88 0f       	add	r24, r24
     f60:	96 95       	lsr	r25
     f62:	87 95       	ror	r24
     f64:	97 f9       	bld	r25, 7
     f66:	08 95       	ret

00000f68 <__fp_cmp>:
     f68:	99 0f       	add	r25, r25
     f6a:	00 08       	sbc	r0, r0
     f6c:	55 0f       	add	r21, r21
     f6e:	aa 0b       	sbc	r26, r26
     f70:	e0 e8       	ldi	r30, 0x80	; 128
     f72:	fe ef       	ldi	r31, 0xFE	; 254
     f74:	16 16       	cp	r1, r22
     f76:	17 06       	cpc	r1, r23
     f78:	e8 07       	cpc	r30, r24
     f7a:	f9 07       	cpc	r31, r25
     f7c:	c0 f0       	brcs	.+48     	; 0xfae <__fp_cmp+0x46>
     f7e:	12 16       	cp	r1, r18
     f80:	13 06       	cpc	r1, r19
     f82:	e4 07       	cpc	r30, r20
     f84:	f5 07       	cpc	r31, r21
     f86:	98 f0       	brcs	.+38     	; 0xfae <__fp_cmp+0x46>
     f88:	62 1b       	sub	r22, r18
     f8a:	73 0b       	sbc	r23, r19
     f8c:	84 0b       	sbc	r24, r20
     f8e:	95 0b       	sbc	r25, r21
     f90:	39 f4       	brne	.+14     	; 0xfa0 <__fp_cmp+0x38>
     f92:	0a 26       	eor	r0, r26
     f94:	61 f0       	breq	.+24     	; 0xfae <__fp_cmp+0x46>
     f96:	23 2b       	or	r18, r19
     f98:	24 2b       	or	r18, r20
     f9a:	25 2b       	or	r18, r21
     f9c:	21 f4       	brne	.+8      	; 0xfa6 <__fp_cmp+0x3e>
     f9e:	08 95       	ret
     fa0:	0a 26       	eor	r0, r26
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <__fp_cmp+0x3e>
     fa4:	a1 40       	sbci	r26, 0x01	; 1
     fa6:	a6 95       	lsr	r26
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	81 1d       	adc	r24, r1
     fac:	81 1d       	adc	r24, r1
     fae:	08 95       	ret

00000fb0 <__fp_inf>:
     fb0:	97 f9       	bld	r25, 7
     fb2:	9f 67       	ori	r25, 0x7F	; 127
     fb4:	80 e8       	ldi	r24, 0x80	; 128
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	08 95       	ret

00000fbc <__fp_nan>:
     fbc:	9f ef       	ldi	r25, 0xFF	; 255
     fbe:	80 ec       	ldi	r24, 0xC0	; 192
     fc0:	08 95       	ret

00000fc2 <__fp_pscA>:
     fc2:	00 24       	eor	r0, r0
     fc4:	0a 94       	dec	r0
     fc6:	16 16       	cp	r1, r22
     fc8:	17 06       	cpc	r1, r23
     fca:	18 06       	cpc	r1, r24
     fcc:	09 06       	cpc	r0, r25
     fce:	08 95       	ret

00000fd0 <__fp_pscB>:
     fd0:	00 24       	eor	r0, r0
     fd2:	0a 94       	dec	r0
     fd4:	12 16       	cp	r1, r18
     fd6:	13 06       	cpc	r1, r19
     fd8:	14 06       	cpc	r1, r20
     fda:	05 06       	cpc	r0, r21
     fdc:	08 95       	ret

00000fde <__fp_round>:
     fde:	09 2e       	mov	r0, r25
     fe0:	03 94       	inc	r0
     fe2:	00 0c       	add	r0, r0
     fe4:	11 f4       	brne	.+4      	; 0xfea <__fp_round+0xc>
     fe6:	88 23       	and	r24, r24
     fe8:	52 f0       	brmi	.+20     	; 0xffe <__fp_round+0x20>
     fea:	bb 0f       	add	r27, r27
     fec:	40 f4       	brcc	.+16     	; 0xffe <__fp_round+0x20>
     fee:	bf 2b       	or	r27, r31
     ff0:	11 f4       	brne	.+4      	; 0xff6 <__fp_round+0x18>
     ff2:	60 ff       	sbrs	r22, 0
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <__fp_round+0x20>
     ff6:	6f 5f       	subi	r22, 0xFF	; 255
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	8f 4f       	sbci	r24, 0xFF	; 255
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	08 95       	ret

00001000 <__fp_split3>:
    1000:	57 fd       	sbrc	r21, 7
    1002:	90 58       	subi	r25, 0x80	; 128
    1004:	44 0f       	add	r20, r20
    1006:	55 1f       	adc	r21, r21
    1008:	59 f0       	breq	.+22     	; 0x1020 <__fp_splitA+0x10>
    100a:	5f 3f       	cpi	r21, 0xFF	; 255
    100c:	71 f0       	breq	.+28     	; 0x102a <__fp_splitA+0x1a>
    100e:	47 95       	ror	r20

00001010 <__fp_splitA>:
    1010:	88 0f       	add	r24, r24
    1012:	97 fb       	bst	r25, 7
    1014:	99 1f       	adc	r25, r25
    1016:	61 f0       	breq	.+24     	; 0x1030 <__fp_splitA+0x20>
    1018:	9f 3f       	cpi	r25, 0xFF	; 255
    101a:	79 f0       	breq	.+30     	; 0x103a <__fp_splitA+0x2a>
    101c:	87 95       	ror	r24
    101e:	08 95       	ret
    1020:	12 16       	cp	r1, r18
    1022:	13 06       	cpc	r1, r19
    1024:	14 06       	cpc	r1, r20
    1026:	55 1f       	adc	r21, r21
    1028:	f2 cf       	rjmp	.-28     	; 0x100e <__fp_split3+0xe>
    102a:	46 95       	lsr	r20
    102c:	f1 df       	rcall	.-30     	; 0x1010 <__fp_splitA>
    102e:	08 c0       	rjmp	.+16     	; 0x1040 <__fp_splitA+0x30>
    1030:	16 16       	cp	r1, r22
    1032:	17 06       	cpc	r1, r23
    1034:	18 06       	cpc	r1, r24
    1036:	99 1f       	adc	r25, r25
    1038:	f1 cf       	rjmp	.-30     	; 0x101c <__fp_splitA+0xc>
    103a:	86 95       	lsr	r24
    103c:	71 05       	cpc	r23, r1
    103e:	61 05       	cpc	r22, r1
    1040:	08 94       	sec
    1042:	08 95       	ret

00001044 <__fp_zero>:
    1044:	e8 94       	clt

00001046 <__fp_szero>:
    1046:	bb 27       	eor	r27, r27
    1048:	66 27       	eor	r22, r22
    104a:	77 27       	eor	r23, r23
    104c:	cb 01       	movw	r24, r22
    104e:	97 f9       	bld	r25, 7
    1050:	08 95       	ret

00001052 <__gesf2>:
    1052:	0e 94 b4 07 	call	0xf68	; 0xf68 <__fp_cmp>
    1056:	08 f4       	brcc	.+2      	; 0x105a <__gesf2+0x8>
    1058:	8f ef       	ldi	r24, 0xFF	; 255
    105a:	08 95       	ret

0000105c <__mulsf3>:
    105c:	0e 94 41 08 	call	0x1082	; 0x1082 <__mulsf3x>
    1060:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__fp_round>
    1064:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscA>
    1068:	38 f0       	brcs	.+14     	; 0x1078 <__mulsf3+0x1c>
    106a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_pscB>
    106e:	20 f0       	brcs	.+8      	; 0x1078 <__mulsf3+0x1c>
    1070:	95 23       	and	r25, r21
    1072:	11 f0       	breq	.+4      	; 0x1078 <__mulsf3+0x1c>
    1074:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_inf>
    1078:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_nan>
    107c:	11 24       	eor	r1, r1
    107e:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_szero>

00001082 <__mulsf3x>:
    1082:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_split3>
    1086:	70 f3       	brcs	.-36     	; 0x1064 <__mulsf3+0x8>

00001088 <__mulsf3_pse>:
    1088:	95 9f       	mul	r25, r21
    108a:	c1 f3       	breq	.-16     	; 0x107c <__mulsf3+0x20>
    108c:	95 0f       	add	r25, r21
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	55 1f       	adc	r21, r21
    1092:	62 9f       	mul	r22, r18
    1094:	f0 01       	movw	r30, r0
    1096:	72 9f       	mul	r23, r18
    1098:	bb 27       	eor	r27, r27
    109a:	f0 0d       	add	r31, r0
    109c:	b1 1d       	adc	r27, r1
    109e:	63 9f       	mul	r22, r19
    10a0:	aa 27       	eor	r26, r26
    10a2:	f0 0d       	add	r31, r0
    10a4:	b1 1d       	adc	r27, r1
    10a6:	aa 1f       	adc	r26, r26
    10a8:	64 9f       	mul	r22, r20
    10aa:	66 27       	eor	r22, r22
    10ac:	b0 0d       	add	r27, r0
    10ae:	a1 1d       	adc	r26, r1
    10b0:	66 1f       	adc	r22, r22
    10b2:	82 9f       	mul	r24, r18
    10b4:	22 27       	eor	r18, r18
    10b6:	b0 0d       	add	r27, r0
    10b8:	a1 1d       	adc	r26, r1
    10ba:	62 1f       	adc	r22, r18
    10bc:	73 9f       	mul	r23, r19
    10be:	b0 0d       	add	r27, r0
    10c0:	a1 1d       	adc	r26, r1
    10c2:	62 1f       	adc	r22, r18
    10c4:	83 9f       	mul	r24, r19
    10c6:	a0 0d       	add	r26, r0
    10c8:	61 1d       	adc	r22, r1
    10ca:	22 1f       	adc	r18, r18
    10cc:	74 9f       	mul	r23, r20
    10ce:	33 27       	eor	r19, r19
    10d0:	a0 0d       	add	r26, r0
    10d2:	61 1d       	adc	r22, r1
    10d4:	23 1f       	adc	r18, r19
    10d6:	84 9f       	mul	r24, r20
    10d8:	60 0d       	add	r22, r0
    10da:	21 1d       	adc	r18, r1
    10dc:	82 2f       	mov	r24, r18
    10de:	76 2f       	mov	r23, r22
    10e0:	6a 2f       	mov	r22, r26
    10e2:	11 24       	eor	r1, r1
    10e4:	9f 57       	subi	r25, 0x7F	; 127
    10e6:	50 40       	sbci	r21, 0x00	; 0
    10e8:	9a f0       	brmi	.+38     	; 0x1110 <__mulsf3_pse+0x88>
    10ea:	f1 f0       	breq	.+60     	; 0x1128 <__mulsf3_pse+0xa0>
    10ec:	88 23       	and	r24, r24
    10ee:	4a f0       	brmi	.+18     	; 0x1102 <__mulsf3_pse+0x7a>
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	bb 1f       	adc	r27, r27
    10f6:	66 1f       	adc	r22, r22
    10f8:	77 1f       	adc	r23, r23
    10fa:	88 1f       	adc	r24, r24
    10fc:	91 50       	subi	r25, 0x01	; 1
    10fe:	50 40       	sbci	r21, 0x00	; 0
    1100:	a9 f7       	brne	.-22     	; 0x10ec <__mulsf3_pse+0x64>
    1102:	9e 3f       	cpi	r25, 0xFE	; 254
    1104:	51 05       	cpc	r21, r1
    1106:	80 f0       	brcs	.+32     	; 0x1128 <__mulsf3_pse+0xa0>
    1108:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__fp_inf>
    110c:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__fp_szero>
    1110:	5f 3f       	cpi	r21, 0xFF	; 255
    1112:	e4 f3       	brlt	.-8      	; 0x110c <__mulsf3_pse+0x84>
    1114:	98 3e       	cpi	r25, 0xE8	; 232
    1116:	d4 f3       	brlt	.-12     	; 0x110c <__mulsf3_pse+0x84>
    1118:	86 95       	lsr	r24
    111a:	77 95       	ror	r23
    111c:	67 95       	ror	r22
    111e:	b7 95       	ror	r27
    1120:	f7 95       	ror	r31
    1122:	e7 95       	ror	r30
    1124:	9f 5f       	subi	r25, 0xFF	; 255
    1126:	c1 f7       	brne	.-16     	; 0x1118 <__mulsf3_pse+0x90>
    1128:	fe 2b       	or	r31, r30
    112a:	88 0f       	add	r24, r24
    112c:	91 1d       	adc	r25, r1
    112e:	96 95       	lsr	r25
    1130:	87 95       	ror	r24
    1132:	97 f9       	bld	r25, 7
    1134:	08 95       	ret

00001136 <__umulhisi3>:
    1136:	a2 9f       	mul	r26, r18
    1138:	b0 01       	movw	r22, r0
    113a:	b3 9f       	mul	r27, r19
    113c:	c0 01       	movw	r24, r0
    113e:	a3 9f       	mul	r26, r19
    1140:	70 0d       	add	r23, r0
    1142:	81 1d       	adc	r24, r1
    1144:	11 24       	eor	r1, r1
    1146:	91 1d       	adc	r25, r1
    1148:	b2 9f       	mul	r27, r18
    114a:	70 0d       	add	r23, r0
    114c:	81 1d       	adc	r24, r1
    114e:	11 24       	eor	r1, r1
    1150:	91 1d       	adc	r25, r1
    1152:	08 95       	ret

00001154 <__tablejump2__>:
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	05 90       	lpm	r0, Z+
    115a:	f4 91       	lpm	r31, Z
    115c:	e0 2d       	mov	r30, r0
    115e:	09 94       	ijmp

00001160 <memcpy>:
    1160:	fb 01       	movw	r30, r22
    1162:	dc 01       	movw	r26, r24
    1164:	02 c0       	rjmp	.+4      	; 0x116a <memcpy+0xa>
    1166:	01 90       	ld	r0, Z+
    1168:	0d 92       	st	X+, r0
    116a:	41 50       	subi	r20, 0x01	; 1
    116c:	50 40       	sbci	r21, 0x00	; 0
    116e:	d8 f7       	brcc	.-10     	; 0x1166 <memcpy+0x6>
    1170:	08 95       	ret

00001172 <_exit>:
    1172:	f8 94       	cli

00001174 <__stop_program>:
    1174:	ff cf       	rjmp	.-2      	; 0x1174 <__stop_program>
