
RFreceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000011b6  0000124a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080011c  0080011c  00001266  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001266  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005bee  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb3  00000000  00000000  000071de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bd7  00000000  00000000  00008191  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ae4  00000000  00000000  00009d68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013fe  00000000  00000000  0000a84c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040d1  00000000  00000000  0000bc4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000fd1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_6>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_14>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	9d 02       	muls	r25, r29

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e6 eb       	ldi	r30, 0xB6	; 182
      7e:	f1 e1       	ldi	r31, 0x11	; 17
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	ac 31       	cpi	r26, 0x1C	; 28
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	ac e1       	ldi	r26, 0x1C	; 28
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a6 33       	cpi	r26, 0x36	; 54
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 ca 08 	call	0x1194	; 0x1194 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 2e 02 	call	0x45c	; 0x45c <main>
      b6:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <UART_Init>:
		// disable Brounout detection (BOD)
		MCUCR|=(3<<5);
		MCUCR = (MCUCR &~(1<<5)) | (1<<6);
		__asm__ __volatile__("sleep");// executes A sleep instruction
	}
}
      be:	e1 ec       	ldi	r30, 0xC1	; 193
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	10 82       	st	Z, r1
      c4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      c8:	a2 ec       	ldi	r26, 0xC2	; 194
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	8c 91       	ld	r24, X
      ce:	8e 60       	ori	r24, 0x0E	; 14
      d0:	8c 93       	st	X, r24
      d2:	83 e3       	ldi	r24, 0x33	; 51
      d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      dc:	80 81       	ld	r24, Z
      de:	88 61       	ori	r24, 0x18	; 24
      e0:	80 83       	st	Z, r24
      e2:	08 95       	ret

000000e4 <UART_Transmit>:
      e4:	90 e4       	ldi	r25, 0x40	; 64
      e6:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      ea:	e0 ec       	ldi	r30, 0xC0	; 192
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	90 81       	ld	r25, Z
      f0:	95 ff       	sbrs	r25, 5
      f2:	fd cf       	rjmp	.-6      	; 0xee <UART_Transmit+0xa>
      f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      f8:	e0 ec       	ldi	r30, 0xC0	; 192
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	86 ff       	sbrs	r24, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <UART_Transmit+0x18>
     102:	08 95       	ret

00000104 <UART_Printf>:
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	fc 01       	movw	r30, r24
     10c:	80 81       	ld	r24, Z
     10e:	88 23       	and	r24, r24
     110:	59 f0       	breq	.+22     	; 0x128 <UART_Printf+0x24>
     112:	8f 01       	movw	r16, r30
     114:	c0 e0       	ldi	r28, 0x00	; 0
     116:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     11a:	cf 5f       	subi	r28, 0xFF	; 255
     11c:	f8 01       	movw	r30, r16
     11e:	ec 0f       	add	r30, r28
     120:	f1 1d       	adc	r31, r1
     122:	80 81       	ld	r24, Z
     124:	81 11       	cpse	r24, r1
     126:	f7 cf       	rjmp	.-18     	; 0x116 <UART_Printf+0x12>
     128:	cf 91       	pop	r28
     12a:	1f 91       	pop	r17
     12c:	0f 91       	pop	r16
     12e:	08 95       	ret

00000130 <UART_Print_Num>:
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	8c 01       	movw	r16, r24
     13a:	9c 01       	movw	r18, r24
     13c:	32 95       	swap	r19
     13e:	22 95       	swap	r18
     140:	2f 70       	andi	r18, 0x0F	; 15
     142:	23 27       	eor	r18, r19
     144:	3f 70       	andi	r19, 0x0F	; 15
     146:	23 27       	eor	r18, r19
     148:	a7 e4       	ldi	r26, 0x47	; 71
     14a:	b3 e0       	ldi	r27, 0x03	; 3
     14c:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
     150:	96 95       	lsr	r25
     152:	87 95       	ror	r24
     154:	96 95       	lsr	r25
     156:	87 95       	ror	r24
     158:	96 95       	lsr	r25
     15a:	87 95       	ror	r24
     15c:	80 5d       	subi	r24, 0xD0	; 208
     15e:	80 33       	cpi	r24, 0x30	; 48
     160:	11 f0       	breq	.+4      	; 0x166 <UART_Print_Num+0x36>
     162:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     166:	98 01       	movw	r18, r16
     168:	32 95       	swap	r19
     16a:	22 95       	swap	r18
     16c:	2f 70       	andi	r18, 0x0F	; 15
     16e:	23 27       	eor	r18, r19
     170:	3f 70       	andi	r19, 0x0F	; 15
     172:	23 27       	eor	r18, r19
     174:	a7 e4       	ldi	r26, 0x47	; 71
     176:	b3 e0       	ldi	r27, 0x03	; 3
     178:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
     17c:	ec 01       	movw	r28, r24
     17e:	d6 95       	lsr	r29
     180:	c7 95       	ror	r28
     182:	d6 95       	lsr	r29
     184:	c7 95       	ror	r28
     186:	d6 95       	lsr	r29
     188:	c7 95       	ror	r28
     18a:	20 e1       	ldi	r18, 0x10	; 16
     18c:	37 e2       	ldi	r19, 0x27	; 39
     18e:	c2 9f       	mul	r28, r18
     190:	c0 01       	movw	r24, r0
     192:	c3 9f       	mul	r28, r19
     194:	90 0d       	add	r25, r0
     196:	d2 9f       	mul	r29, r18
     198:	90 0d       	add	r25, r0
     19a:	11 24       	eor	r1, r1
     19c:	e8 01       	movw	r28, r16
     19e:	c8 1b       	sub	r28, r24
     1a0:	d9 0b       	sbc	r29, r25
     1a2:	9e 01       	movw	r18, r28
     1a4:	36 95       	lsr	r19
     1a6:	27 95       	ror	r18
     1a8:	36 95       	lsr	r19
     1aa:	27 95       	ror	r18
     1ac:	36 95       	lsr	r19
     1ae:	27 95       	ror	r18
     1b0:	a5 ec       	ldi	r26, 0xC5	; 197
     1b2:	b0 e2       	ldi	r27, 0x20	; 32
     1b4:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
     1b8:	92 95       	swap	r25
     1ba:	82 95       	swap	r24
     1bc:	8f 70       	andi	r24, 0x0F	; 15
     1be:	89 27       	eor	r24, r25
     1c0:	9f 70       	andi	r25, 0x0F	; 15
     1c2:	89 27       	eor	r24, r25
     1c4:	80 5d       	subi	r24, 0xD0	; 208
     1c6:	80 33       	cpi	r24, 0x30	; 48
     1c8:	11 f0       	breq	.+4      	; 0x1ce <UART_Print_Num+0x9e>
     1ca:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     1ce:	9e 01       	movw	r18, r28
     1d0:	36 95       	lsr	r19
     1d2:	27 95       	ror	r18
     1d4:	36 95       	lsr	r19
     1d6:	27 95       	ror	r18
     1d8:	36 95       	lsr	r19
     1da:	27 95       	ror	r18
     1dc:	a5 ec       	ldi	r26, 0xC5	; 197
     1de:	b0 e2       	ldi	r27, 0x20	; 32
     1e0:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
     1e4:	8c 01       	movw	r16, r24
     1e6:	12 95       	swap	r17
     1e8:	02 95       	swap	r16
     1ea:	0f 70       	andi	r16, 0x0F	; 15
     1ec:	01 27       	eor	r16, r17
     1ee:	1f 70       	andi	r17, 0x0F	; 15
     1f0:	01 27       	eor	r16, r17
     1f2:	28 ee       	ldi	r18, 0xE8	; 232
     1f4:	33 e0       	ldi	r19, 0x03	; 3
     1f6:	02 9f       	mul	r16, r18
     1f8:	c0 01       	movw	r24, r0
     1fa:	03 9f       	mul	r16, r19
     1fc:	90 0d       	add	r25, r0
     1fe:	12 9f       	mul	r17, r18
     200:	90 0d       	add	r25, r0
     202:	11 24       	eor	r1, r1
     204:	8e 01       	movw	r16, r28
     206:	08 1b       	sub	r16, r24
     208:	19 0b       	sbc	r17, r25
     20a:	98 01       	movw	r18, r16
     20c:	36 95       	lsr	r19
     20e:	27 95       	ror	r18
     210:	36 95       	lsr	r19
     212:	27 95       	ror	r18
     214:	ab e7       	ldi	r26, 0x7B	; 123
     216:	b4 e1       	ldi	r27, 0x14	; 20
     218:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
     21c:	96 95       	lsr	r25
     21e:	87 95       	ror	r24
     220:	80 5d       	subi	r24, 0xD0	; 208
     222:	80 33       	cpi	r24, 0x30	; 48
     224:	11 f0       	breq	.+4      	; 0x22a <UART_Print_Num+0xfa>
     226:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     22a:	98 01       	movw	r18, r16
     22c:	36 95       	lsr	r19
     22e:	27 95       	ror	r18
     230:	36 95       	lsr	r19
     232:	27 95       	ror	r18
     234:	ab e7       	ldi	r26, 0x7B	; 123
     236:	b4 e1       	ldi	r27, 0x14	; 20
     238:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
     23c:	ec 01       	movw	r28, r24
     23e:	d6 95       	lsr	r29
     240:	c7 95       	ror	r28
     242:	24 e6       	ldi	r18, 0x64	; 100
     244:	2c 9f       	mul	r18, r28
     246:	c0 01       	movw	r24, r0
     248:	2d 9f       	mul	r18, r29
     24a:	90 0d       	add	r25, r0
     24c:	11 24       	eor	r1, r1
     24e:	e8 01       	movw	r28, r16
     250:	c8 1b       	sub	r28, r24
     252:	d9 0b       	sbc	r29, r25
     254:	9e 01       	movw	r18, r28
     256:	ad ec       	ldi	r26, 0xCD	; 205
     258:	bc ec       	ldi	r27, 0xCC	; 204
     25a:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
     25e:	96 95       	lsr	r25
     260:	87 95       	ror	r24
     262:	96 95       	lsr	r25
     264:	87 95       	ror	r24
     266:	96 95       	lsr	r25
     268:	87 95       	ror	r24
     26a:	80 5d       	subi	r24, 0xD0	; 208
     26c:	80 33       	cpi	r24, 0x30	; 48
     26e:	11 f0       	breq	.+4      	; 0x274 <UART_Print_Num+0x144>
     270:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     274:	9e 01       	movw	r18, r28
     276:	ad ec       	ldi	r26, 0xCD	; 205
     278:	bc ec       	ldi	r27, 0xCC	; 204
     27a:	0e 94 bb 08 	call	0x1176	; 0x1176 <__umulhisi3>
     27e:	96 95       	lsr	r25
     280:	87 95       	ror	r24
     282:	96 95       	lsr	r25
     284:	87 95       	ror	r24
     286:	96 95       	lsr	r25
     288:	87 95       	ror	r24
     28a:	9c 01       	movw	r18, r24
     28c:	22 0f       	add	r18, r18
     28e:	33 1f       	adc	r19, r19
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	88 0f       	add	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	82 0f       	add	r24, r18
     29e:	93 1f       	adc	r25, r19
     2a0:	9e 01       	movw	r18, r28
     2a2:	28 1b       	sub	r18, r24
     2a4:	39 0b       	sbc	r19, r25
     2a6:	c9 01       	movw	r24, r18
     2a8:	80 5d       	subi	r24, 0xD0	; 208
     2aa:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2ae:	8a e0       	ldi	r24, 0x0A	; 10
     2b0:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	08 95       	ret

000002be <UART_Print_Numchar>:
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	d8 2f       	mov	r29, r24
     2c4:	c9 e2       	ldi	r28, 0x29	; 41
     2c6:	8c 9f       	mul	r24, r28
     2c8:	c1 2d       	mov	r28, r1
     2ca:	11 24       	eor	r1, r1
     2cc:	c2 95       	swap	r28
     2ce:	cf 70       	andi	r28, 0x0F	; 15
     2d0:	80 e3       	ldi	r24, 0x30	; 48
     2d2:	8c 0f       	add	r24, r28
     2d4:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2d8:	84 e6       	ldi	r24, 0x64	; 100
     2da:	c8 9f       	mul	r28, r24
     2dc:	d0 19       	sub	r29, r0
     2de:	11 24       	eor	r1, r1
     2e0:	cd ec       	ldi	r28, 0xCD	; 205
     2e2:	dc 9f       	mul	r29, r28
     2e4:	c1 2d       	mov	r28, r1
     2e6:	11 24       	eor	r1, r1
     2e8:	c6 95       	lsr	r28
     2ea:	c6 95       	lsr	r28
     2ec:	c6 95       	lsr	r28
     2ee:	80 e3       	ldi	r24, 0x30	; 48
     2f0:	8c 0f       	add	r24, r28
     2f2:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2f6:	cc 0f       	add	r28, r28
     2f8:	8c 2f       	mov	r24, r28
     2fa:	88 0f       	add	r24, r24
     2fc:	88 0f       	add	r24, r24
     2fe:	c8 0f       	add	r28, r24
     300:	8d 2f       	mov	r24, r29
     302:	8c 1b       	sub	r24, r28
     304:	80 5d       	subi	r24, 0xD0	; 208
     306:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     30a:	8a e0       	ldi	r24, 0x0A	; 10
     30c:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <UART_Print_Byte>:
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	8c 01       	movw	r16, r24
     31e:	fc 01       	movw	r30, r24
     320:	80 81       	ld	r24, Z
     322:	88 23       	and	r24, r24
     324:	51 f0       	breq	.+20     	; 0x33a <UART_Print_Byte+0x24>
     326:	c0 e0       	ldi	r28, 0x00	; 0
     328:	0e 94 5f 01 	call	0x2be	; 0x2be <UART_Print_Numchar>
     32c:	cf 5f       	subi	r28, 0xFF	; 255
     32e:	f8 01       	movw	r30, r16
     330:	ec 0f       	add	r30, r28
     332:	f1 1d       	adc	r31, r1
     334:	80 81       	ld	r24, Z
     336:	81 11       	cpse	r24, r1
     338:	f7 cf       	rjmp	.-18     	; 0x328 <UART_Print_Byte+0x12>
     33a:	8a e0       	ldi	r24, 0x0A	; 10
     33c:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	08 95       	ret

00000348 <Set_pin>:
     348:	61 30       	cpi	r22, 0x01	; 1
     34a:	71 05       	cpc	r23, r1
     34c:	f1 f4       	brne	.+60     	; 0x38a <Set_pin+0x42>
     34e:	88 30       	cpi	r24, 0x08	; 8
     350:	91 05       	cpc	r25, r1
     352:	70 f0       	brcs	.+28     	; 0x370 <Set_pin+0x28>
     354:	44 b1       	in	r20, 0x04	; 4
     356:	08 97       	sbiw	r24, 0x08	; 8
     358:	21 e0       	ldi	r18, 0x01	; 1
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	b9 01       	movw	r22, r18
     35e:	02 c0       	rjmp	.+4      	; 0x364 <Set_pin+0x1c>
     360:	66 0f       	add	r22, r22
     362:	77 1f       	adc	r23, r23
     364:	8a 95       	dec	r24
     366:	e2 f7       	brpl	.-8      	; 0x360 <Set_pin+0x18>
     368:	cb 01       	movw	r24, r22
     36a:	84 2b       	or	r24, r20
     36c:	84 b9       	out	0x04, r24	; 4
     36e:	08 95       	ret
     370:	4a b1       	in	r20, 0x0a	; 10
     372:	21 e0       	ldi	r18, 0x01	; 1
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	b9 01       	movw	r22, r18
     378:	02 c0       	rjmp	.+4      	; 0x37e <Set_pin+0x36>
     37a:	66 0f       	add	r22, r22
     37c:	77 1f       	adc	r23, r23
     37e:	8a 95       	dec	r24
     380:	e2 f7       	brpl	.-8      	; 0x37a <Set_pin+0x32>
     382:	cb 01       	movw	r24, r22
     384:	84 2b       	or	r24, r20
     386:	8a b9       	out	0x0a, r24	; 10
     388:	08 95       	ret
     38a:	08 97       	sbiw	r24, 0x08	; 8
     38c:	18 f0       	brcs	.+6      	; 0x394 <Set_pin+0x4c>
     38e:	84 b1       	in	r24, 0x04	; 4
     390:	84 b9       	out	0x04, r24	; 4
     392:	08 95       	ret
     394:	8a b1       	in	r24, 0x0a	; 10
     396:	8a b9       	out	0x0a, r24	; 10
     398:	08 95       	ret

0000039a <Write_Digital>:
     39a:	66 23       	and	r22, r22
     39c:	f1 f0       	breq	.+60     	; 0x3da <Write_Digital+0x40>
     39e:	88 30       	cpi	r24, 0x08	; 8
     3a0:	91 05       	cpc	r25, r1
     3a2:	70 f0       	brcs	.+28     	; 0x3c0 <Write_Digital+0x26>
     3a4:	45 b1       	in	r20, 0x05	; 5
     3a6:	08 97       	sbiw	r24, 0x08	; 8
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	b9 01       	movw	r22, r18
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <Write_Digital+0x1a>
     3b0:	66 0f       	add	r22, r22
     3b2:	77 1f       	adc	r23, r23
     3b4:	8a 95       	dec	r24
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <Write_Digital+0x16>
     3b8:	cb 01       	movw	r24, r22
     3ba:	84 2b       	or	r24, r20
     3bc:	85 b9       	out	0x05, r24	; 5
     3be:	08 95       	ret
     3c0:	4b b1       	in	r20, 0x0b	; 11
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	b9 01       	movw	r22, r18
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <Write_Digital+0x34>
     3ca:	66 0f       	add	r22, r22
     3cc:	77 1f       	adc	r23, r23
     3ce:	8a 95       	dec	r24
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <Write_Digital+0x30>
     3d2:	cb 01       	movw	r24, r22
     3d4:	84 2b       	or	r24, r20
     3d6:	8b b9       	out	0x0b, r24	; 11
     3d8:	08 95       	ret
     3da:	88 30       	cpi	r24, 0x08	; 8
     3dc:	91 05       	cpc	r25, r1
     3de:	78 f0       	brcs	.+30     	; 0x3fe <Write_Digital+0x64>
     3e0:	45 b1       	in	r20, 0x05	; 5
     3e2:	08 97       	sbiw	r24, 0x08	; 8
     3e4:	21 e0       	ldi	r18, 0x01	; 1
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	b9 01       	movw	r22, r18
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <Write_Digital+0x56>
     3ec:	66 0f       	add	r22, r22
     3ee:	77 1f       	adc	r23, r23
     3f0:	8a 95       	dec	r24
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <Write_Digital+0x52>
     3f4:	cb 01       	movw	r24, r22
     3f6:	80 95       	com	r24
     3f8:	84 23       	and	r24, r20
     3fa:	85 b9       	out	0x05, r24	; 5
     3fc:	08 95       	ret
     3fe:	4b b1       	in	r20, 0x0b	; 11
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	b9 01       	movw	r22, r18
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	66 0f       	add	r22, r22
     40a:	77 1f       	adc	r23, r23
     40c:	8a 95       	dec	r24
     40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     410:	cb 01       	movw	r24, r22
     412:	80 95       	com	r24
     414:	84 23       	and	r24, r20
     416:	8b b9       	out	0x0b, r24	; 11
     418:	08 95       	ret

0000041a <__vector_14>:
     41a:	1f 92       	push	r1
     41c:	0f 92       	push	r0
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	0f 92       	push	r0
     422:	11 24       	eor	r1, r1
     424:	8f 93       	push	r24
     426:	9f 93       	push	r25
     428:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     42c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     430:	01 96       	adiw	r24, 0x01	; 1
     432:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
     436:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
     43a:	9f 91       	pop	r25
     43c:	8f 91       	pop	r24
     43e:	0f 90       	pop	r0
     440:	0f be       	out	0x3f, r0	; 63
     442:	0f 90       	pop	r0
     444:	1f 90       	pop	r1
     446:	18 95       	reti

00000448 <__vector_6>:
////   ISR For WATCHDOG TIMER
ISR(WDT_vect)
{
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
	
};
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <main>:
//char data0[12] = ""; 
//char data1[12] = "";
//char data2[12] = "";
//char data3[12] = "";
int main(void)
{ 
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	00 d0       	rcall	.+0      	; 0x462 <main+0x6>
     462:	00 d0       	rcall	.+0      	; 0x464 <main+0x8>
     464:	00 d0       	rcall	.+0      	; 0x466 <main+0xa>
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
	/// initilazation setup function in arduino
	unsigned char status1;//to read a NRF24L01 particular register using SPI
	UART_Init(9600);	 
     46a:	60 e8       	ldi	r22, 0x80	; 128
     46c:	75 e2       	ldi	r23, 0x25	; 37
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_Init>
	radio.begin();
     476:	8e e1       	ldi	r24, 0x1E	; 30
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 f6 05 	call	0xbec	; 0xbec <_ZN4RF245beginEv>
	radio.setDataRate(RF24_250KBPS);
     47e:	62 e0       	ldi	r22, 0x02	; 2
     480:	8e e1       	ldi	r24, 0x1E	; 30
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	0e 94 b9 05 	call	0xb72	; 0xb72 <_ZN4RF2411setDataRateE15rf24_datarate_e>
	radio.setPALevel(RF24_PA_MAX);// 0dBm power level	
     488:	63 e0       	ldi	r22, 0x03	; 3
     48a:	8e e1       	ldi	r24, 0x1E	; 30
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN4RF2410setPALevelEh>
	//radio.openReadingPipe(0,pipes[0]);// receiver address must be same as transmitter
	radio.openReadingPipe(1,pipes[1]);// receiver address must be same as transmitter
     492:	0f 2e       	mov	r0, r31
     494:	f2 ee       	ldi	r31, 0xE2	; 226
     496:	ef 2e       	mov	r14, r31
     498:	f0 2d       	mov	r31, r0
     49a:	0f 2e       	mov	r0, r31
     49c:	f0 ef       	ldi	r31, 0xF0	; 240
     49e:	ff 2e       	mov	r15, r31
     4a0:	f0 2d       	mov	r31, r0
     4a2:	00 ef       	ldi	r16, 0xF0	; 240
     4a4:	10 ef       	ldi	r17, 0xF0	; 240
     4a6:	20 ef       	ldi	r18, 0xF0	; 240
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	8e e1       	ldi	r24, 0x1E	; 30
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 ba 04 	call	0x974	; 0x974 <_ZN4RF2415openReadingPipeEhy>
	radio.openReadingPipe(2,pipes[2]);// receiver address must be same as transmitter 
     4b8:	0f 2e       	mov	r0, r31
     4ba:	f3 ee       	ldi	r31, 0xE3	; 227
     4bc:	ef 2e       	mov	r14, r31
     4be:	f0 2d       	mov	r31, r0
     4c0:	20 ef       	ldi	r18, 0xF0	; 240
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	62 e0       	ldi	r22, 0x02	; 2
     4ca:	8e e1       	ldi	r24, 0x1E	; 30
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	0e 94 ba 04 	call	0x974	; 0x974 <_ZN4RF2415openReadingPipeEhy>
	//radio.openReadingPipe(3,pipes[3]);// receiver address must be same as transmitter
	radio.startListening();// make radio Receiver
     4d2:	8e e1       	ldi	r24, 0x1E	; 30
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	0e 94 50 05 	call	0xaa0	; 0xaa0 <_ZN4RF2414startListeningEv>
	// char data[] = "";
	while (1)
	{  
		 unsigned char pipenum=0;//to store number of particular pipe
		byte text[5] = "";// to store received data
     4da:	0f 2e       	mov	r0, r31
     4dc:	f3 e0       	ldi	r31, 0x03	; 3
     4de:	ff 2e       	mov	r15, r31
     4e0:	f0 2d       	mov	r31, r0
     4e2:	8e 01       	movw	r16, r28
     4e4:	0d 5f       	subi	r16, 0xFD	; 253
     4e6:	1f 4f       	sbci	r17, 0xFF	; 255
	//radio.openReadingPipe(3,pipes[3]);// receiver address must be same as transmitter
	radio.startListening();// make radio Receiver
	// char data[] = "";
	while (1)
	{  
		 unsigned char pipenum=0;//to store number of particular pipe
     4e8:	1e 82       	std	Y+6, r1	; 0x06
		byte text[5] = "";// to store received data
     4ea:	1a 82       	std	Y+2, r1	; 0x02
     4ec:	19 82       	std	Y+1, r1	; 0x01
     4ee:	f8 01       	movw	r30, r16
     4f0:	8f 2d       	mov	r24, r15
     4f2:	11 92       	st	Z+, r1
     4f4:	8a 95       	dec	r24
     4f6:	e9 f7       	brne	.-6      	; 0x4f2 <main+0x96>
		 sei();//enable global interrupt
     4f8:	78 94       	sei
		 while (radio.available(&pipenum))
     4fa:	be 01       	movw	r22, r28
     4fc:	6a 5f       	subi	r22, 0xFA	; 250
     4fe:	7f 4f       	sbci	r23, 0xFF	; 255
     500:	8e e1       	ldi	r24, 0x1E	; 30
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 8c 04 	call	0x918	; 0x918 <_ZN4RF249availableEPh>
     508:	88 23       	and	r24, r24
     50a:	71 f3       	breq	.-36     	; 0x4e8 <main+0x8c>
		 {	
			
			radio.read(text, sizeof(text));
     50c:	45 e0       	ldi	r20, 0x05	; 5
     50e:	be 01       	movw	r22, r28
     510:	6f 5f       	subi	r22, 0xFF	; 255
     512:	7f 4f       	sbci	r23, 0xFF	; 255
     514:	8e e1       	ldi	r24, 0x1E	; 30
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	0e 94 ad 04 	call	0x95a	; 0x95a <_ZN4RF244readEPvh>
			text[3] = pipenum;
     51c:	8e 81       	ldd	r24, Y+6	; 0x06
     51e:	8c 83       	std	Y+4, r24	; 0x04
			UART_Printf("Pipe NUM:");
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 82 00 	call	0x104	; 0x104 <UART_Printf>
			UART_Print_Num(pipenum);
     528:	8e 81       	ldd	r24, Y+6	; 0x06
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 98 00 	call	0x130	; 0x130 <UART_Print_Num>
			UART_Print_Byte(text);
     530:	ce 01       	movw	r24, r28
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	0e 94 8b 01 	call	0x316	; 0x316 <UART_Print_Byte>
	while (1)
	{  
		 unsigned char pipenum=0;//to store number of particular pipe
		byte text[5] = "";// to store received data
		 sei();//enable global interrupt
		 while (radio.available(&pipenum))
     538:	e0 cf       	rjmp	.-64     	; 0x4fa <main+0x9e>

0000053a <_GLOBAL__sub_I_radio>:
 * Author : sachin mahadevjadhav
 */ 
#include <avr/io.h>
#include "RF24.h"

RF24 radio(9, 10); // CE, CSN
     53a:	4a e0       	ldi	r20, 0x0A	; 10
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	69 e0       	ldi	r22, 0x09	; 9
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	8e e1       	ldi	r24, 0x1E	; 30
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN4RF24C1Ejj>
     54a:	08 95       	ret

0000054c <_ZN4RF243csnEb>:

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
}
     54c:	4f 92       	push	r4
     54e:	5f 92       	push	r5
     550:	6f 92       	push	r6
     552:	7f 92       	push	r7
     554:	8f 92       	push	r8
     556:	9f 92       	push	r9
     558:	af 92       	push	r10
     55a:	bf 92       	push	r11
     55c:	cf 92       	push	r12
     55e:	df 92       	push	r13
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	ec 01       	movw	r28, r24
     56c:	8a 81       	ldd	r24, Y+2	; 0x02
     56e:	9b 81       	ldd	r25, Y+3	; 0x03
     570:	0e 94 cd 01 	call	0x39a	; 0x39a <Write_Digital>
     574:	6c 89       	ldd	r22, Y+20	; 0x14
     576:	7d 89       	ldd	r23, Y+21	; 0x15
     578:	8e 89       	ldd	r24, Y+22	; 0x16
     57a:	9f 89       	ldd	r25, Y+23	; 0x17
     57c:	0e 94 97 07 	call	0xf2e	; 0xf2e <__floatunsisf>
     580:	6b 01       	movw	r12, r22
     582:	7c 01       	movw	r14, r24
     584:	2b ea       	ldi	r18, 0xAB	; 171
     586:	3a ea       	ldi	r19, 0xAA	; 170
     588:	4a e2       	ldi	r20, 0x2A	; 42
     58a:	50 e4       	ldi	r21, 0x40	; 64
     58c:	0e 94 4e 08 	call	0x109c	; 0x109c <__mulsf3>
     590:	4b 01       	movw	r8, r22
     592:	5c 01       	movw	r10, r24
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 e8       	ldi	r20, 0x80	; 128
     59a:	5f e3       	ldi	r21, 0x3F	; 63
     59c:	0e 94 f1 06 	call	0xde2	; 0xde2 <__cmpsf2>
     5a0:	88 23       	and	r24, r24
     5a2:	0c f4       	brge	.+2      	; 0x5a6 <_ZN4RF243csnEb+0x5a>
     5a4:	6e c0       	rjmp	.+220    	; 0x682 <_ZN4RF243csnEb+0x136>
     5a6:	a7 01       	movw	r20, r14
     5a8:	96 01       	movw	r18, r12
     5aa:	c7 01       	movw	r24, r14
     5ac:	b6 01       	movw	r22, r12
     5ae:	0e 94 85 06 	call	0xd0a	; 0xd0a <__addsf3>
     5b2:	2b 01       	movw	r4, r22
     5b4:	3c 01       	movw	r6, r24
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	3f ef       	ldi	r19, 0xFF	; 255
     5ba:	4f e7       	ldi	r20, 0x7F	; 127
     5bc:	57 e4       	ldi	r21, 0x47	; 71
     5be:	0e 94 49 08 	call	0x1092	; 0x1092 <__gesf2>
     5c2:	18 16       	cp	r1, r24
     5c4:	0c f0       	brlt	.+2      	; 0x5c8 <_ZN4RF243csnEb+0x7c>
     5c6:	45 c0       	rjmp	.+138    	; 0x652 <_ZN4RF243csnEb+0x106>
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	4a e7       	ldi	r20, 0x7A	; 122
     5ce:	54 e4       	ldi	r21, 0x44	; 68
     5d0:	c7 01       	movw	r24, r14
     5d2:	b6 01       	movw	r22, r12
     5d4:	0e 94 f6 06 	call	0xdec	; 0xdec <__divsf3>
     5d8:	4b 01       	movw	r8, r22
     5da:	5c 01       	movw	r10, r24
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	4a ef       	ldi	r20, 0xFA	; 250
     5e2:	54 e4       	ldi	r21, 0x44	; 68
     5e4:	0e 94 4e 08 	call	0x109c	; 0x109c <__mulsf3>
     5e8:	6b 01       	movw	r12, r22
     5ea:	7c 01       	movw	r14, r24
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e8       	ldi	r20, 0x80	; 128
     5f2:	5f e3       	ldi	r21, 0x3F	; 63
     5f4:	0e 94 f1 06 	call	0xde2	; 0xde2 <__cmpsf2>
     5f8:	88 23       	and	r24, r24
     5fa:	2c f1       	brlt	.+74     	; 0x646 <_ZN4RF243csnEb+0xfa>
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	3f ef       	ldi	r19, 0xFF	; 255
     600:	4f e7       	ldi	r20, 0x7F	; 127
     602:	57 e4       	ldi	r21, 0x47	; 71
     604:	c7 01       	movw	r24, r14
     606:	b6 01       	movw	r22, r12
     608:	0e 94 49 08 	call	0x1092	; 0x1092 <__gesf2>
     60c:	18 16       	cp	r1, r24
     60e:	b4 f4       	brge	.+44     	; 0x63c <_ZN4RF243csnEb+0xf0>
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	40 e2       	ldi	r20, 0x20	; 32
     616:	51 e4       	ldi	r21, 0x41	; 65
     618:	c5 01       	movw	r24, r10
     61a:	b4 01       	movw	r22, r8
     61c:	0e 94 4e 08 	call	0x109c	; 0x109c <__mulsf3>
     620:	0e 94 68 07 	call	0xed0	; 0xed0 <__fixunssfsi>
     624:	61 15       	cp	r22, r1
     626:	71 05       	cpc	r23, r1
     628:	69 f1       	breq	.+90     	; 0x684 <_ZN4RF243csnEb+0x138>
     62a:	28 ec       	ldi	r18, 0xC8	; 200
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	c9 01       	movw	r24, r18
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <_ZN4RF243csnEb+0xe4>
     634:	61 50       	subi	r22, 0x01	; 1
     636:	71 09       	sbc	r23, r1
     638:	d1 f7       	brne	.-12     	; 0x62e <_ZN4RF243csnEb+0xe2>
     63a:	24 c0       	rjmp	.+72     	; 0x684 <_ZN4RF243csnEb+0x138>
     63c:	c7 01       	movw	r24, r14
     63e:	b6 01       	movw	r22, r12
     640:	0e 94 68 07 	call	0xed0	; 0xed0 <__fixunssfsi>
     644:	02 c0       	rjmp	.+4      	; 0x64a <_ZN4RF243csnEb+0xfe>
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	cb 01       	movw	r24, r22
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <_ZN4RF243csnEb+0x100>
     650:	19 c0       	rjmp	.+50     	; 0x684 <_ZN4RF243csnEb+0x138>
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	4f e7       	ldi	r20, 0x7F	; 127
     658:	53 e4       	ldi	r21, 0x43	; 67
     65a:	c5 01       	movw	r24, r10
     65c:	b4 01       	movw	r22, r8
     65e:	0e 94 49 08 	call	0x1092	; 0x1092 <__gesf2>
     662:	18 16       	cp	r1, r24
     664:	44 f4       	brge	.+16     	; 0x676 <_ZN4RF243csnEb+0x12a>
     666:	c3 01       	movw	r24, r6
     668:	b2 01       	movw	r22, r4
     66a:	0e 94 68 07 	call	0xed0	; 0xed0 <__fixunssfsi>
     66e:	cb 01       	movw	r24, r22
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <_ZN4RF243csnEb+0x124>
     674:	0a c0       	rjmp	.+20     	; 0x68a <_ZN4RF243csnEb+0x13e>
     676:	c5 01       	movw	r24, r10
     678:	b4 01       	movw	r22, r8
     67a:	0e 94 68 07 	call	0xed0	; 0xed0 <__fixunssfsi>
     67e:	16 2f       	mov	r17, r22
     680:	01 c0       	rjmp	.+2      	; 0x684 <_ZN4RF243csnEb+0x138>
     682:	11 e0       	ldi	r17, 0x01	; 1
     684:	61 2f       	mov	r22, r17
     686:	6a 95       	dec	r22
     688:	f1 f7       	brne	.-4      	; 0x686 <_ZN4RF243csnEb+0x13a>
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	df 90       	pop	r13
     696:	cf 90       	pop	r12
     698:	bf 90       	pop	r11
     69a:	af 90       	pop	r10
     69c:	9f 90       	pop	r9
     69e:	8f 90       	pop	r8
     6a0:	7f 90       	pop	r7
     6a2:	6f 90       	pop	r6
     6a4:	5f 90       	pop	r5
     6a6:	4f 90       	pop	r4
     6a8:	08 95       	ret

000006aa <_ZN4RF242ceEb>:
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
     6ae:	91 81       	ldd	r25, Z+1	; 0x01
     6b0:	22 81       	ldd	r18, Z+2	; 0x02
     6b2:	33 81       	ldd	r19, Z+3	; 0x03
     6b4:	82 17       	cp	r24, r18
     6b6:	93 07       	cpc	r25, r19
     6b8:	11 f0       	breq	.+4      	; 0x6be <_ZN4RF242ceEb+0x14>
     6ba:	0e 94 cd 01 	call	0x39a	; 0x39a <Write_Digital>
     6be:	84 e0       	ldi	r24, 0x04	; 4
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <_ZN4RF242ceEb+0x18>
     6c6:	08 95       	ret

000006c8 <_ZN4RF2413read_registerEh>:
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	8c 01       	movw	r16, r24
     6d0:	c6 2f       	mov	r28, r22
     6d2:	80 e5       	ldi	r24, 0x50	; 80
     6d4:	8c bd       	out	0x2c, r24	; 44
     6d6:	1d bc       	out	0x2d, r1	; 45
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	c8 01       	movw	r24, r16
     6dc:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4RF243csnEb>
     6e0:	cf 71       	andi	r28, 0x1F	; 31
     6e2:	ce bd       	out	0x2e, r28	; 46
     6e4:	00 00       	nop
     6e6:	0d b4       	in	r0, 0x2d	; 45
     6e8:	07 fe       	sbrs	r0, 7
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <_ZN4RF2413read_registerEh+0x1e>
     6ec:	8e b5       	in	r24, 0x2e	; 46
     6ee:	8f ef       	ldi	r24, 0xFF	; 255
     6f0:	8e bd       	out	0x2e, r24	; 46
     6f2:	00 00       	nop
     6f4:	0d b4       	in	r0, 0x2d	; 45
     6f6:	07 fe       	sbrs	r0, 7
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <_ZN4RF2413read_registerEh+0x2c>
     6fa:	ce b5       	in	r28, 0x2e	; 46
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	c8 01       	movw	r24, r16
     700:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4RF243csnEb>
     704:	8c 2f       	mov	r24, r28
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	08 95       	ret

0000070e <_ZN4RF2414write_registerEhPKhh>:
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	8c 01       	movw	r16, r24
     71c:	c6 2f       	mov	r28, r22
     71e:	e4 2e       	mov	r14, r20
     720:	f5 2e       	mov	r15, r21
     722:	d2 2f       	mov	r29, r18
     724:	80 e5       	ldi	r24, 0x50	; 80
     726:	8c bd       	out	0x2c, r24	; 44
     728:	1d bc       	out	0x2d, r1	; 45
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	c8 01       	movw	r24, r16
     72e:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4RF243csnEb>
     732:	cf 71       	andi	r28, 0x1F	; 31
     734:	c0 62       	ori	r28, 0x20	; 32
     736:	ce bd       	out	0x2e, r28	; 46
     738:	00 00       	nop
     73a:	0d b4       	in	r0, 0x2d	; 45
     73c:	07 fe       	sbrs	r0, 7
     73e:	fd cf       	rjmp	.-6      	; 0x73a <_ZN4RF2414write_registerEhPKhh+0x2c>
     740:	ce b5       	in	r28, 0x2e	; 46
     742:	8f ef       	ldi	r24, 0xFF	; 255
     744:	8d 0f       	add	r24, r29
     746:	dd 23       	and	r29, r29
     748:	59 f0       	breq	.+22     	; 0x760 <_ZN4RF2414write_registerEhPKhh+0x52>
     74a:	ee 2d       	mov	r30, r14
     74c:	ff 2d       	mov	r31, r15
     74e:	91 91       	ld	r25, Z+
     750:	9e bd       	out	0x2e, r25	; 46
     752:	00 00       	nop
     754:	0d b4       	in	r0, 0x2d	; 45
     756:	07 fe       	sbrs	r0, 7
     758:	fd cf       	rjmp	.-6      	; 0x754 <_ZN4RF2414write_registerEhPKhh+0x46>
     75a:	9e b5       	in	r25, 0x2e	; 46
     75c:	81 50       	subi	r24, 0x01	; 1
     75e:	b8 f7       	brcc	.-18     	; 0x74e <_ZN4RF2414write_registerEhPKhh+0x40>
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	c8 01       	movw	r24, r16
     764:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4RF243csnEb>
     768:	8c 2f       	mov	r24, r28
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	08 95       	ret

00000778 <_ZN4RF2414write_registerEhh>:
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	8c 01       	movw	r16, r24
     782:	c6 2f       	mov	r28, r22
     784:	d4 2f       	mov	r29, r20
     786:	80 e5       	ldi	r24, 0x50	; 80
     788:	8c bd       	out	0x2c, r24	; 44
     78a:	1d bc       	out	0x2d, r1	; 45
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	c8 01       	movw	r24, r16
     790:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4RF243csnEb>
     794:	cf 71       	andi	r28, 0x1F	; 31
     796:	c0 62       	ori	r28, 0x20	; 32
     798:	ce bd       	out	0x2e, r28	; 46
     79a:	00 00       	nop
     79c:	0d b4       	in	r0, 0x2d	; 45
     79e:	07 fe       	sbrs	r0, 7
     7a0:	fd cf       	rjmp	.-6      	; 0x79c <_ZN4RF2414write_registerEhh+0x24>
     7a2:	ce b5       	in	r28, 0x2e	; 46
     7a4:	de bd       	out	0x2e, r29	; 46
     7a6:	00 00       	nop
     7a8:	0d b4       	in	r0, 0x2d	; 45
     7aa:	07 fe       	sbrs	r0, 7
     7ac:	fd cf       	rjmp	.-6      	; 0x7a8 <_ZN4RF2414write_registerEhh+0x30>
     7ae:	8e b5       	in	r24, 0x2e	; 46
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	c8 01       	movw	r24, r16
     7b4:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4RF243csnEb>
     7b8:	8c 2f       	mov	r24, r28
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	08 95       	ret

000007c4 <_ZN4RF2412read_payloadEPvh>:
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	ec 01       	movw	r28, r24
     7d4:	d6 2e       	mov	r13, r22
     7d6:	e7 2e       	mov	r14, r23
     7d8:	8f 81       	ldd	r24, Y+7	; 0x07
     7da:	08 2f       	mov	r16, r24
     7dc:	48 17       	cp	r20, r24
     7de:	08 f4       	brcc	.+2      	; 0x7e2 <_ZN4RF2412read_payloadEPvh+0x1e>
     7e0:	04 2f       	mov	r16, r20
     7e2:	98 85       	ldd	r25, Y+8	; 0x08
     7e4:	91 11       	cpse	r25, r1
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <_ZN4RF2412read_payloadEPvh+0x2a>
     7e8:	18 2f       	mov	r17, r24
     7ea:	10 1b       	sub	r17, r16
     7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <_ZN4RF2412read_payloadEPvh+0x2c>
     7ee:	10 e0       	ldi	r17, 0x00	; 0
     7f0:	80 e5       	ldi	r24, 0x50	; 80
     7f2:	8c bd       	out	0x2c, r24	; 44
     7f4:	1d bc       	out	0x2d, r1	; 45
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	ce 01       	movw	r24, r28
     7fa:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4RF243csnEb>
     7fe:	81 e6       	ldi	r24, 0x61	; 97
     800:	8e bd       	out	0x2e, r24	; 46
     802:	00 00       	nop
     804:	0d b4       	in	r0, 0x2d	; 45
     806:	07 fe       	sbrs	r0, 7
     808:	fd cf       	rjmp	.-6      	; 0x804 <_ZN4RF2412read_payloadEPvh+0x40>
     80a:	fe b4       	in	r15, 0x2e	; 46
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	80 0f       	add	r24, r16
     810:	01 11       	cpse	r16, r1
     812:	05 c0       	rjmp	.+10     	; 0x81e <_ZN4RF2412read_payloadEPvh+0x5a>
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	81 0f       	add	r24, r17
     818:	11 11       	cpse	r17, r1
     81a:	0e c0       	rjmp	.+28     	; 0x838 <_ZN4RF2412read_payloadEPvh+0x74>
     81c:	16 c0       	rjmp	.+44     	; 0x84a <_ZN4RF2412read_payloadEPvh+0x86>
     81e:	ed 2d       	mov	r30, r13
     820:	fe 2d       	mov	r31, r14
     822:	2f ef       	ldi	r18, 0xFF	; 255
     824:	2e bd       	out	0x2e, r18	; 46
     826:	00 00       	nop
     828:	0d b4       	in	r0, 0x2d	; 45
     82a:	07 fe       	sbrs	r0, 7
     82c:	fd cf       	rjmp	.-6      	; 0x828 <_ZN4RF2412read_payloadEPvh+0x64>
     82e:	9e b5       	in	r25, 0x2e	; 46
     830:	91 93       	st	Z+, r25
     832:	81 50       	subi	r24, 0x01	; 1
     834:	b8 f7       	brcc	.-18     	; 0x824 <_ZN4RF2412read_payloadEPvh+0x60>
     836:	ee cf       	rjmp	.-36     	; 0x814 <_ZN4RF2412read_payloadEPvh+0x50>
     838:	9f ef       	ldi	r25, 0xFF	; 255
     83a:	9e bd       	out	0x2e, r25	; 46
     83c:	00 00       	nop
     83e:	0d b4       	in	r0, 0x2d	; 45
     840:	07 fe       	sbrs	r0, 7
     842:	fd cf       	rjmp	.-6      	; 0x83e <_ZN4RF2412read_payloadEPvh+0x7a>
     844:	2e b5       	in	r18, 0x2e	; 46
     846:	81 50       	subi	r24, 0x01	; 1
     848:	c0 f7       	brcc	.-16     	; 0x83a <_ZN4RF2412read_payloadEPvh+0x76>
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	ce 01       	movw	r24, r28
     84e:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4RF243csnEb>
     852:	8f 2d       	mov	r24, r15
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	08 95       	ret

00000864 <_ZN4RF248spiTransEh>:
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	ec 01       	movw	r28, r24
     86c:	16 2f       	mov	r17, r22
     86e:	80 e5       	ldi	r24, 0x50	; 80
     870:	8c bd       	out	0x2c, r24	; 44
     872:	1d bc       	out	0x2d, r1	; 45
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	ce 01       	movw	r24, r28
     878:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4RF243csnEb>
     87c:	1e bd       	out	0x2e, r17	; 46
     87e:	00 00       	nop
     880:	0d b4       	in	r0, 0x2d	; 45
     882:	07 fe       	sbrs	r0, 7
     884:	fd cf       	rjmp	.-6      	; 0x880 <_ZN4RF248spiTransEh+0x1c>
     886:	1e b5       	in	r17, 0x2e	; 46
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	ce 01       	movw	r24, r28
     88c:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4RF243csnEb>
     890:	81 2f       	mov	r24, r17
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	08 95       	ret

0000089a <_ZN4RF248flush_rxEv>:
     89a:	62 ee       	ldi	r22, 0xE2	; 226
     89c:	0e 94 32 04 	call	0x864	; 0x864 <_ZN4RF248spiTransEh>
     8a0:	08 95       	ret

000008a2 <_ZN4RF248flush_txEv>:
     8a2:	61 ee       	ldi	r22, 0xE1	; 225
     8a4:	0e 94 32 04 	call	0x864	; 0x864 <_ZN4RF248spiTransEh>
     8a8:	08 95       	ret

000008aa <_ZN4RF2410get_statusEv>:
     8aa:	6f ef       	ldi	r22, 0xFF	; 255
     8ac:	0e 94 32 04 	call	0x864	; 0x864 <_ZN4RF248spiTransEh>
     8b0:	08 95       	ret

000008b2 <_ZN4RF24C1Ejj>:
     8b2:	fc 01       	movw	r30, r24
     8b4:	71 83       	std	Z+1, r23	; 0x01
     8b6:	60 83       	st	Z, r22
     8b8:	53 83       	std	Z+3, r21	; 0x03
     8ba:	42 83       	std	Z+2, r20	; 0x02
     8bc:	16 82       	std	Z+6, r1	; 0x06
     8be:	80 e2       	ldi	r24, 0x20	; 32
     8c0:	87 83       	std	Z+7, r24	; 0x07
     8c2:	10 86       	std	Z+8, r1	; 0x08
     8c4:	85 e0       	ldi	r24, 0x05	; 5
     8c6:	86 87       	std	Z+14, r24	; 0x0e
     8c8:	85 e0       	ldi	r24, 0x05	; 5
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	a0 e0       	ldi	r26, 0x00	; 0
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	84 8b       	std	Z+20, r24	; 0x14
     8d2:	95 8b       	std	Z+21, r25	; 0x15
     8d4:	a6 8b       	std	Z+22, r26	; 0x16
     8d6:	b7 8b       	std	Z+23, r27	; 0x17
     8d8:	11 86       	std	Z+9, r1	; 0x09
     8da:	08 95       	ret

000008dc <_ZN4RF2410setChannelEh>:
     8dc:	6d 37       	cpi	r22, 0x7D	; 125
     8de:	10 f4       	brcc	.+4      	; 0x8e4 <_ZN4RF2410setChannelEh+0x8>
     8e0:	46 2f       	mov	r20, r22
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <_ZN4RF2410setChannelEh+0xa>
     8e4:	4d e7       	ldi	r20, 0x7D	; 125
     8e6:	65 e0       	ldi	r22, 0x05	; 5
     8e8:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>
     8ec:	08 95       	ret

000008ee <_ZN4RF247powerUpEv>:
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	ec 01       	movw	r28, r24
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN4RF2413read_registerEh>
     8fa:	81 fd       	sbrc	r24, 1
     8fc:	0a c0       	rjmp	.+20     	; 0x912 <__stack+0x13>
     8fe:	48 2f       	mov	r20, r24
     900:	42 60       	ori	r20, 0x02	; 2
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	ce 01       	movw	r24, r28
     906:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>
     90a:	80 e1       	ldi	r24, 0x10	; 16
     90c:	97 e2       	ldi	r25, 0x27	; 39
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <__stack+0xf>
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <_ZN4RF249availableEPh>:
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	ec 01       	movw	r28, r24
     922:	8b 01       	movw	r16, r22
     924:	67 e1       	ldi	r22, 0x17	; 23
     926:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN4RF2413read_registerEh>
     92a:	80 fd       	sbrc	r24, 0
     92c:	0e c0       	rjmp	.+28     	; 0x94a <_ZN4RF249availableEPh+0x32>
     92e:	01 15       	cp	r16, r1
     930:	11 05       	cpc	r17, r1
     932:	69 f0       	breq	.+26     	; 0x94e <_ZN4RF249availableEPh+0x36>
     934:	ce 01       	movw	r24, r28
     936:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN4RF2410get_statusEv>
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	95 95       	asr	r25
     93e:	87 95       	ror	r24
     940:	87 70       	andi	r24, 0x07	; 7
     942:	f8 01       	movw	r30, r16
     944:	80 83       	st	Z, r24
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	03 c0       	rjmp	.+6      	; 0x950 <_ZN4RF249availableEPh+0x38>
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	01 c0       	rjmp	.+2      	; 0x950 <_ZN4RF249availableEPh+0x38>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	08 95       	ret

0000095a <_ZN4RF244readEPvh>:
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
     960:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_ZN4RF2412read_payloadEPvh>
     964:	40 e7       	ldi	r20, 0x70	; 112
     966:	67 e0       	ldi	r22, 0x07	; 7
     968:	ce 01       	movw	r24, r28
     96a:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <_ZN4RF2415openReadingPipeEhy>:
     974:	af 92       	push	r10
     976:	bf 92       	push	r11
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	28 97       	sbiw	r28, 0x08	; 8
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
     996:	5c 01       	movw	r10, r24
     998:	d6 2e       	mov	r13, r22
     99a:	e9 82       	std	Y+1, r14	; 0x01
     99c:	fa 82       	std	Y+2, r15	; 0x02
     99e:	0b 83       	std	Y+3, r16	; 0x03
     9a0:	1c 83       	std	Y+4, r17	; 0x04
     9a2:	2d 83       	std	Y+5, r18	; 0x05
     9a4:	3e 83       	std	Y+6, r19	; 0x06
     9a6:	4f 83       	std	Y+7, r20	; 0x07
     9a8:	58 87       	std	Y+8, r21	; 0x08
     9aa:	61 11       	cpse	r22, r1
     9ac:	0b c0       	rjmp	.+22     	; 0x9c4 <_ZN4RF2415openReadingPipeEhy+0x50>
     9ae:	dc 01       	movw	r26, r24
     9b0:	1e 96       	adiw	r26, 0x0e	; 14
     9b2:	4c 91       	ld	r20, X
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	be 01       	movw	r22, r28
     9b8:	6f 5f       	subi	r22, 0xFF	; 255
     9ba:	7f 4f       	sbci	r23, 0xFF	; 255
     9bc:	09 96       	adiw	r24, 0x09	; 9
     9be:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <memcpy>
     9c2:	06 c0       	rjmp	.+12     	; 0x9d0 <_ZN4RF2415openReadingPipeEhy+0x5c>
     9c4:	b6 e0       	ldi	r27, 0x06	; 6
     9c6:	b6 17       	cp	r27, r22
     9c8:	e8 f1       	brcs	.+122    	; 0xa44 <_ZN4RF2415openReadingPipeEhy+0xd0>
     9ca:	e1 e0       	ldi	r30, 0x01	; 1
     9cc:	e6 17       	cp	r30, r22
     9ce:	78 f0       	brcs	.+30     	; 0x9ee <_ZN4RF2415openReadingPipeEhy+0x7a>
     9d0:	ed 2d       	mov	r30, r13
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	e0 5f       	subi	r30, 0xF0	; 240
     9d6:	fe 4f       	sbci	r31, 0xFE	; 254
     9d8:	d5 01       	movw	r26, r10
     9da:	1e 96       	adiw	r26, 0x0e	; 14
     9dc:	2c 91       	ld	r18, X
     9de:	ae 01       	movw	r20, r28
     9e0:	4f 5f       	subi	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	60 81       	ld	r22, Z
     9e6:	c5 01       	movw	r24, r10
     9e8:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN4RF2414write_registerEhPKhh>
     9ec:	0b c0       	rjmp	.+22     	; 0xa04 <_ZN4RF2415openReadingPipeEhy+0x90>
     9ee:	e6 2f       	mov	r30, r22
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	e0 5f       	subi	r30, 0xF0	; 240
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	21 e0       	ldi	r18, 0x01	; 1
     9f8:	ae 01       	movw	r20, r28
     9fa:	4f 5f       	subi	r20, 0xFF	; 255
     9fc:	5f 4f       	sbci	r21, 0xFF	; 255
     9fe:	60 81       	ld	r22, Z
     a00:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN4RF2414write_registerEhPKhh>
     a04:	0d 2d       	mov	r16, r13
     a06:	10 e0       	ldi	r17, 0x00	; 0
     a08:	f8 01       	movw	r30, r16
     a0a:	e6 5f       	subi	r30, 0xF6	; 246
     a0c:	fe 4f       	sbci	r31, 0xFE	; 254
     a0e:	d5 01       	movw	r26, r10
     a10:	17 96       	adiw	r26, 0x07	; 7
     a12:	4c 91       	ld	r20, X
     a14:	60 81       	ld	r22, Z
     a16:	c5 01       	movw	r24, r10
     a18:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>
     a1c:	62 e0       	ldi	r22, 0x02	; 2
     a1e:	c5 01       	movw	r24, r10
     a20:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN4RF2413read_registerEh>
     a24:	f8 01       	movw	r30, r16
     a26:	ea 5e       	subi	r30, 0xEA	; 234
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	41 e0       	ldi	r20, 0x01	; 1
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	00 80       	ld	r0, Z
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <_ZN4RF2415openReadingPipeEhy+0xc2>
     a32:	44 0f       	add	r20, r20
     a34:	55 1f       	adc	r21, r21
     a36:	0a 94       	dec	r0
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <_ZN4RF2415openReadingPipeEhy+0xbe>
     a3a:	48 2b       	or	r20, r24
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	c5 01       	movw	r24, r10
     a40:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>
     a44:	28 96       	adiw	r28, 0x08	; 8
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	bf 90       	pop	r11
     a60:	af 90       	pop	r10
     a62:	08 95       	ret

00000a64 <_ZN4RF2416closeReadingPipeEh>:
     a64:	1f 93       	push	r17
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	ec 01       	movw	r28, r24
     a6c:	16 2f       	mov	r17, r22
     a6e:	62 e0       	ldi	r22, 0x02	; 2
     a70:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN4RF2413read_registerEh>
     a74:	e1 2f       	mov	r30, r17
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	ea 5e       	subi	r30, 0xEA	; 234
     a7a:	fe 4f       	sbci	r31, 0xFE	; 254
     a7c:	41 e0       	ldi	r20, 0x01	; 1
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	00 80       	ld	r0, Z
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <_ZN4RF2416closeReadingPipeEh+0x24>
     a84:	44 0f       	add	r20, r20
     a86:	55 1f       	adc	r21, r21
     a88:	0a 94       	dec	r0
     a8a:	e2 f7       	brpl	.-8      	; 0xa84 <_ZN4RF2416closeReadingPipeEh+0x20>
     a8c:	40 95       	com	r20
     a8e:	48 23       	and	r20, r24
     a90:	62 e0       	ldi	r22, 0x02	; 2
     a92:	ce 01       	movw	r24, r28
     a94:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	08 95       	ret

00000aa0 <_ZN4RF2414startListeningEv>:
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	ec 01       	movw	r28, r24
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN4RF2413read_registerEh>
     aac:	48 2f       	mov	r20, r24
     aae:	41 60       	ori	r20, 0x01	; 1
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	ce 01       	movw	r24, r28
     ab4:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>
     ab8:	40 e7       	ldi	r20, 0x70	; 112
     aba:	67 e0       	ldi	r22, 0x07	; 7
     abc:	ce 01       	movw	r24, r28
     abe:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	ce 01       	movw	r24, r28
     ac6:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN4RF242ceEb>
     aca:	89 85       	ldd	r24, Y+9	; 0x09
     acc:	88 23       	and	r24, r24
     ace:	49 f0       	breq	.+18     	; 0xae2 <_ZN4RF2414startListeningEv+0x42>
     ad0:	2e 85       	ldd	r18, Y+14	; 0x0e
     ad2:	ae 01       	movw	r20, r28
     ad4:	47 5f       	subi	r20, 0xF7	; 247
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	6a e0       	ldi	r22, 0x0A	; 10
     ada:	ce 01       	movw	r24, r28
     adc:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN4RF2414write_registerEhPKhh>
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <_ZN4RF2414startListeningEv+0x4a>
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	ce 01       	movw	r24, r28
     ae6:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN4RF2416closeReadingPipeEh>
     aea:	6d e1       	ldi	r22, 0x1D	; 29
     aec:	ce 01       	movw	r24, r28
     aee:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN4RF2413read_registerEh>
     af2:	81 ff       	sbrs	r24, 1
     af4:	03 c0       	rjmp	.+6      	; 0xafc <_ZN4RF2414startListeningEv+0x5c>
     af6:	ce 01       	movw	r24, r28
     af8:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN4RF248flush_txEv>
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	08 95       	ret

00000b02 <_ZN4RF2415toggle_featuresEv>:
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	ec 01       	movw	r28, r24
     b0a:	10 e5       	ldi	r17, 0x50	; 80
     b0c:	1c bd       	out	0x2c, r17	; 44
     b0e:	1d bc       	out	0x2d, r1	; 45
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4RF243csnEb>
     b16:	1e bd       	out	0x2e, r17	; 46
     b18:	00 00       	nop
     b1a:	0d b4       	in	r0, 0x2d	; 45
     b1c:	07 fe       	sbrs	r0, 7
     b1e:	fd cf       	rjmp	.-6      	; 0xb1a <_ZN4RF2415toggle_featuresEv+0x18>
     b20:	8e b5       	in	r24, 0x2e	; 46
     b22:	83 e7       	ldi	r24, 0x73	; 115
     b24:	8e bd       	out	0x2e, r24	; 46
     b26:	00 00       	nop
     b28:	0d b4       	in	r0, 0x2d	; 45
     b2a:	07 fe       	sbrs	r0, 7
     b2c:	fd cf       	rjmp	.-6      	; 0xb28 <_ZN4RF2415toggle_featuresEv+0x26>
     b2e:	8e b5       	in	r24, 0x2e	; 46
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	ce 01       	movw	r24, r28
     b34:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4RF243csnEb>
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	08 95       	ret

00000b40 <_ZN4RF2410setPALevelEh>:
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	8c 01       	movw	r16, r24
     b48:	c6 2f       	mov	r28, r22
     b4a:	66 e0       	ldi	r22, 0x06	; 6
     b4c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN4RF2413read_registerEh>
     b50:	88 7f       	andi	r24, 0xF8	; 248
     b52:	c4 30       	cpi	r28, 0x04	; 4
     b54:	18 f4       	brcc	.+6      	; 0xb5c <_ZN4RF2410setPALevelEh+0x1c>
     b56:	cc 0f       	add	r28, r28
     b58:	cf 5f       	subi	r28, 0xFF	; 255
     b5a:	01 c0       	rjmp	.+2      	; 0xb5e <_ZN4RF2410setPALevelEh+0x1e>
     b5c:	c7 e0       	ldi	r28, 0x07	; 7
     b5e:	4c 2f       	mov	r20, r28
     b60:	48 2b       	or	r20, r24
     b62:	66 e0       	ldi	r22, 0x06	; 6
     b64:	c8 01       	movw	r24, r16
     b66:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	08 95       	ret

00000b72 <_ZN4RF2411setDataRateE15rf24_datarate_e>:

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	ec 01       	movw	r28, r24
     b7c:	06 2f       	mov	r16, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     b7e:	66 e0       	ldi	r22, 0x06	; 6
     b80:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     b84:	18 2f       	mov	r17, r24
     b86:	17 7d       	andi	r17, 0xD7	; 215
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
  //#endif
  if( speed == RF24_250KBPS )
     b88:	02 30       	cpi	r16, 0x02	; 2
     b8a:	51 f4       	brne	.+20     	; 0xba0 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2e>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
     b8c:	10 62       	ori	r17, 0x20	; 32
 /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=450;
  #else //16Mhz Arduino*/
	txDelay=155;
     b8e:	8b e9       	ldi	r24, 0x9B	; 155
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	88 8b       	std	Y+16, r24	; 0x10
     b98:	99 8b       	std	Y+17, r25	; 0x11
     b9a:	aa 8b       	std	Y+18, r26	; 0x12
     b9c:	bb 8b       	std	Y+19, r27	; 0x13
     b9e:	14 c0       	rjmp	.+40     	; 0xbc8 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     ba0:	01 30       	cpi	r16, 0x01	; 1
     ba2:	49 f0       	breq	.+18     	; 0xbb6 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
/*  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
     ba4:	85 e5       	ldi	r24, 0x55	; 85
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	88 8b       	std	Y+16, r24	; 0x10
     bae:	99 8b       	std	Y+17, r25	; 0x11
     bb0:	aa 8b       	std	Y+18, r26	; 0x12
     bb2:	bb 8b       	std	Y+19, r27	; 0x13
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
     bb6:	18 60       	ori	r17, 0x08	; 8
     /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txDelay=190;
      #else //16Mhz Arduino	*/  
	 txDelay=65;
     bb8:	81 e4       	ldi	r24, 0x41	; 65
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	88 8b       	std	Y+16, r24	; 0x10
     bc2:	99 8b       	std	Y+17, r25	; 0x11
     bc4:	aa 8b       	std	Y+18, r26	; 0x12
     bc6:	bb 8b       	std	Y+19, r27	; 0x13
	  //#endif
    }
  }
  write_register(RF_SETUP,setup);
     bc8:	41 2f       	mov	r20, r17
     bca:	66 e0       	ldi	r22, 0x06	; 6
     bcc:	ce 01       	movw	r24, r28
     bce:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     bd2:	66 e0       	ldi	r22, 0x06	; 6
     bd4:	ce 01       	movw	r24, r28
     bd6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN4RF2413read_registerEh>
  {
    result = true;
  }
  return result;
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	18 13       	cpse	r17, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
}
     be0:	89 2f       	mov	r24, r25
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	08 95       	ret

00000bec <_ZN4RF245beginEv>:
}

/****************************************************************************/

bool RF24::begin(void)
{
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	ec 01       	movw	r28, r24
  uint8_t setup=0;

    if (ce_pin != csn_pin) Set_pin(ce_pin,OUT);  
     bf4:	88 81       	ld	r24, Y
     bf6:	99 81       	ldd	r25, Y+1	; 0x01
     bf8:	2a 81       	ldd	r18, Y+2	; 0x02
     bfa:	3b 81       	ldd	r19, Y+3	; 0x03
     bfc:	82 17       	cp	r24, r18
     bfe:	93 07       	cpc	r25, r19
     c00:	21 f0       	breq	.+8      	; 0xc0a <_ZN4RF245beginEv+0x1e>
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	0e 94 a4 01 	call	0x348	; 0x348 <Set_pin>
        Set_pin(csn_pin,OUT);
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	8a 81       	ldd	r24, Y+2	; 0x02
     c10:	9b 81       	ldd	r25, Y+3	; 0x03
     c12:	0e 94 a4 01 	call	0x348	; 0x348 <Set_pin>
    _SPI.begin();
     c16:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_ZN8SPIClass5beginEv>
    ce(low);
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	ce 01       	movw	r24, r28
     c1e:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN4RF242ceEb>
  	csn(high);
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	ce 01       	movw	r24, r28
     c26:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN4RF243csnEb>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     c2a:	80 e1       	ldi	r24, 0x10	; 16
     c2c:	97 e2       	ldi	r25, 0x27	; 39
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <_ZN4RF245beginEv+0x42>
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: _delay_ms is based on P-variant whereby non-P *may* require different timing.
  _delay_ms( 5 ) ;

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;
     c32:	4c e0       	ldi	r20, 0x0C	; 12
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	ce 01       	movw	r24, r28
     c38:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     c3c:	4f e5       	ldi	r20, 0x5F	; 95
     c3e:	64 e0       	ldi	r22, 0x04	; 4
     c40:	ce 01       	movw	r24, r28
     c42:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
     c46:	62 e0       	ldi	r22, 0x02	; 2
     c48:	ce 01       	movw	r24, r28
     c4a:	0e 94 b9 05 	call	0xb72	; 0xb72 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     c4e:	88 23       	and	r24, r24
     c50:	11 f0       	breq	.+4      	; 0xc56 <_ZN4RF245beginEv+0x6a>
  {
    p_variant = true ;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	8e 83       	std	Y+6, r24	; 0x06
  }
  setup = read_register(RF_SETUP);
     c56:	66 e0       	ldi	r22, 0x06	; 6
     c58:	ce 01       	movw	r24, r28
     c5a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN4RF2413read_registerEh>
     c5e:	18 2f       	mov	r17, r24
 if( setup == 0b00001110 )     // register default for nRF24L01P
     c60:	8e 30       	cpi	r24, 0x0E	; 14
     c62:	11 f4       	brne	.+4      	; 0xc68 <_ZN4RF245beginEv+0x7c>
  {
    p_variant = true ;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	8e 83       	std	Y+6, r24	; 0x06
  }
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	ce 01       	movw	r24, r28
     c6c:	0e 94 b9 05 	call	0xb72	; 0xb72 <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
     c70:	ce 01       	movw	r24, r28
     c72:	0e 94 81 05 	call	0xb02	; 0xb02 <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	6d e1       	ldi	r22, 0x1D	; 29
     c7a:	ce 01       	movw	r24, r28
     c7c:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	6c e1       	ldi	r22, 0x1C	; 28
     c84:	ce 01       	movw	r24, r28
     c86:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>
  dynamic_payloads_enabled = false;
     c8a:	18 86       	std	Y+8, r1	; 0x08

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     c8c:	40 e7       	ldi	r20, 0x70	; 112
     c8e:	67 e0       	ldi	r22, 0x07	; 7
     c90:	ce 01       	movw	r24, r28
     c92:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
     c96:	6c e4       	ldi	r22, 0x4C	; 76
     c98:	ce 01       	movw	r24, r28
     c9a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
     c9e:	ce 01       	movw	r24, r28
     ca0:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN4RF248flush_rxEv>
  flush_tx();
     ca4:	ce 01       	movw	r24, r28
     ca6:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
     caa:	ce 01       	movw	r24, r28
     cac:	0e 94 77 04 	call	0x8ee	; 0x8ee <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	ce 01       	movw	r24, r28
     cb4:	0e 94 64 03 	call	0x6c8	; 0x6c8 <_ZN4RF2413read_registerEh>
     cb8:	48 2f       	mov	r20, r24
     cba:	4e 7f       	andi	r20, 0xFE	; 254
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	ce 01       	movw	r24, r28
     cc0:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
     cc4:	11 50       	subi	r17, 0x01	; 1
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	1e 3f       	cpi	r17, 0xFE	; 254
     cca:	08 f0       	brcs	.+2      	; 0xcce <_ZN4RF245beginEv+0xe2>
     ccc:	80 e0       	ldi	r24, 0x00	; 0
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <_ZN8SPIClass5beginEv>:
void SPIClass::begin()
{
 //  cli();//noInterrupts(); // Protect from a scheduler and prevent transactionBegin
 
    
    Set_pin(SS, OUT);
     cd6:	61 e0       	ldi	r22, 0x01	; 1
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	8a e0       	ldi	r24, 0x0A	; 10
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 a4 01 	call	0x348	; 0x348 <Set_pin>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUT.
    SPCR |= _BV(MSTR);
     ce2:	8c b5       	in	r24, 0x2c	; 44
     ce4:	80 61       	ori	r24, 0x10	; 16
     ce6:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     ce8:	8c b5       	in	r24, 0x2c	; 44
     cea:	80 64       	ori	r24, 0x40	; 64
     cec:	8c bd       	out	0x2c, r24	; 44
    // Set direction register for SCK and MOSI pin.
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    Set_pin(SCK, OUT);
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	8d e0       	ldi	r24, 0x0D	; 13
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 a4 01 	call	0x348	; 0x348 <Set_pin>
    Set_pin(MOSI, OUT);
     cfa:	61 e0       	ldi	r22, 0x01	; 1
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	8b e0       	ldi	r24, 0x0B	; 11
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 a4 01 	call	0x348	; 0x348 <Set_pin>
     d06:	08 95       	ret

00000d08 <__subsf3>:
     d08:	50 58       	subi	r21, 0x80	; 128

00000d0a <__addsf3>:
     d0a:	bb 27       	eor	r27, r27
     d0c:	aa 27       	eor	r26, r26
     d0e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__addsf3x>
     d12:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_round>
     d16:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_pscA>
     d1a:	38 f0       	brcs	.+14     	; 0xd2a <__addsf3+0x20>
     d1c:	0e 94 08 08 	call	0x1010	; 0x1010 <__fp_pscB>
     d20:	20 f0       	brcs	.+8      	; 0xd2a <__addsf3+0x20>
     d22:	39 f4       	brne	.+14     	; 0xd32 <__addsf3+0x28>
     d24:	9f 3f       	cpi	r25, 0xFF	; 255
     d26:	19 f4       	brne	.+6      	; 0xd2e <__addsf3+0x24>
     d28:	26 f4       	brtc	.+8      	; 0xd32 <__addsf3+0x28>
     d2a:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__fp_nan>
     d2e:	0e f4       	brtc	.+2      	; 0xd32 <__addsf3+0x28>
     d30:	e0 95       	com	r30
     d32:	e7 fb       	bst	r30, 7
     d34:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_inf>

00000d38 <__addsf3x>:
     d38:	e9 2f       	mov	r30, r25
     d3a:	0e 94 20 08 	call	0x1040	; 0x1040 <__fp_split3>
     d3e:	58 f3       	brcs	.-42     	; 0xd16 <__addsf3+0xc>
     d40:	ba 17       	cp	r27, r26
     d42:	62 07       	cpc	r22, r18
     d44:	73 07       	cpc	r23, r19
     d46:	84 07       	cpc	r24, r20
     d48:	95 07       	cpc	r25, r21
     d4a:	20 f0       	brcs	.+8      	; 0xd54 <__addsf3x+0x1c>
     d4c:	79 f4       	brne	.+30     	; 0xd6c <__addsf3x+0x34>
     d4e:	a6 f5       	brtc	.+104    	; 0xdb8 <__addsf3x+0x80>
     d50:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__fp_zero>
     d54:	0e f4       	brtc	.+2      	; 0xd58 <__addsf3x+0x20>
     d56:	e0 95       	com	r30
     d58:	0b 2e       	mov	r0, r27
     d5a:	ba 2f       	mov	r27, r26
     d5c:	a0 2d       	mov	r26, r0
     d5e:	0b 01       	movw	r0, r22
     d60:	b9 01       	movw	r22, r18
     d62:	90 01       	movw	r18, r0
     d64:	0c 01       	movw	r0, r24
     d66:	ca 01       	movw	r24, r20
     d68:	a0 01       	movw	r20, r0
     d6a:	11 24       	eor	r1, r1
     d6c:	ff 27       	eor	r31, r31
     d6e:	59 1b       	sub	r21, r25
     d70:	99 f0       	breq	.+38     	; 0xd98 <__addsf3x+0x60>
     d72:	59 3f       	cpi	r21, 0xF9	; 249
     d74:	50 f4       	brcc	.+20     	; 0xd8a <__addsf3x+0x52>
     d76:	50 3e       	cpi	r21, 0xE0	; 224
     d78:	68 f1       	brcs	.+90     	; 0xdd4 <__addsf3x+0x9c>
     d7a:	1a 16       	cp	r1, r26
     d7c:	f0 40       	sbci	r31, 0x00	; 0
     d7e:	a2 2f       	mov	r26, r18
     d80:	23 2f       	mov	r18, r19
     d82:	34 2f       	mov	r19, r20
     d84:	44 27       	eor	r20, r20
     d86:	58 5f       	subi	r21, 0xF8	; 248
     d88:	f3 cf       	rjmp	.-26     	; 0xd70 <__addsf3x+0x38>
     d8a:	46 95       	lsr	r20
     d8c:	37 95       	ror	r19
     d8e:	27 95       	ror	r18
     d90:	a7 95       	ror	r26
     d92:	f0 40       	sbci	r31, 0x00	; 0
     d94:	53 95       	inc	r21
     d96:	c9 f7       	brne	.-14     	; 0xd8a <__addsf3x+0x52>
     d98:	7e f4       	brtc	.+30     	; 0xdb8 <__addsf3x+0x80>
     d9a:	1f 16       	cp	r1, r31
     d9c:	ba 0b       	sbc	r27, r26
     d9e:	62 0b       	sbc	r22, r18
     da0:	73 0b       	sbc	r23, r19
     da2:	84 0b       	sbc	r24, r20
     da4:	ba f0       	brmi	.+46     	; 0xdd4 <__addsf3x+0x9c>
     da6:	91 50       	subi	r25, 0x01	; 1
     da8:	a1 f0       	breq	.+40     	; 0xdd2 <__addsf3x+0x9a>
     daa:	ff 0f       	add	r31, r31
     dac:	bb 1f       	adc	r27, r27
     dae:	66 1f       	adc	r22, r22
     db0:	77 1f       	adc	r23, r23
     db2:	88 1f       	adc	r24, r24
     db4:	c2 f7       	brpl	.-16     	; 0xda6 <__addsf3x+0x6e>
     db6:	0e c0       	rjmp	.+28     	; 0xdd4 <__addsf3x+0x9c>
     db8:	ba 0f       	add	r27, r26
     dba:	62 1f       	adc	r22, r18
     dbc:	73 1f       	adc	r23, r19
     dbe:	84 1f       	adc	r24, r20
     dc0:	48 f4       	brcc	.+18     	; 0xdd4 <__addsf3x+0x9c>
     dc2:	87 95       	ror	r24
     dc4:	77 95       	ror	r23
     dc6:	67 95       	ror	r22
     dc8:	b7 95       	ror	r27
     dca:	f7 95       	ror	r31
     dcc:	9e 3f       	cpi	r25, 0xFE	; 254
     dce:	08 f0       	brcs	.+2      	; 0xdd2 <__addsf3x+0x9a>
     dd0:	b0 cf       	rjmp	.-160    	; 0xd32 <__addsf3+0x28>
     dd2:	93 95       	inc	r25
     dd4:	88 0f       	add	r24, r24
     dd6:	08 f0       	brcs	.+2      	; 0xdda <__addsf3x+0xa2>
     dd8:	99 27       	eor	r25, r25
     dda:	ee 0f       	add	r30, r30
     ddc:	97 95       	ror	r25
     dde:	87 95       	ror	r24
     de0:	08 95       	ret

00000de2 <__cmpsf2>:
     de2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__fp_cmp>
     de6:	08 f4       	brcc	.+2      	; 0xdea <__cmpsf2+0x8>
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	08 95       	ret

00000dec <__divsf3>:
     dec:	0e 94 0a 07 	call	0xe14	; 0xe14 <__divsf3x>
     df0:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_round>
     df4:	0e 94 08 08 	call	0x1010	; 0x1010 <__fp_pscB>
     df8:	58 f0       	brcs	.+22     	; 0xe10 <__divsf3+0x24>
     dfa:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_pscA>
     dfe:	40 f0       	brcs	.+16     	; 0xe10 <__divsf3+0x24>
     e00:	29 f4       	brne	.+10     	; 0xe0c <__divsf3+0x20>
     e02:	5f 3f       	cpi	r21, 0xFF	; 255
     e04:	29 f0       	breq	.+10     	; 0xe10 <__divsf3+0x24>
     e06:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_inf>
     e0a:	51 11       	cpse	r21, r1
     e0c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__fp_szero>
     e10:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__fp_nan>

00000e14 <__divsf3x>:
     e14:	0e 94 20 08 	call	0x1040	; 0x1040 <__fp_split3>
     e18:	68 f3       	brcs	.-38     	; 0xdf4 <__divsf3+0x8>

00000e1a <__divsf3_pse>:
     e1a:	99 23       	and	r25, r25
     e1c:	b1 f3       	breq	.-20     	; 0xe0a <__divsf3+0x1e>
     e1e:	55 23       	and	r21, r21
     e20:	91 f3       	breq	.-28     	; 0xe06 <__divsf3+0x1a>
     e22:	95 1b       	sub	r25, r21
     e24:	55 0b       	sbc	r21, r21
     e26:	bb 27       	eor	r27, r27
     e28:	aa 27       	eor	r26, r26
     e2a:	62 17       	cp	r22, r18
     e2c:	73 07       	cpc	r23, r19
     e2e:	84 07       	cpc	r24, r20
     e30:	38 f0       	brcs	.+14     	; 0xe40 <__divsf3_pse+0x26>
     e32:	9f 5f       	subi	r25, 0xFF	; 255
     e34:	5f 4f       	sbci	r21, 0xFF	; 255
     e36:	22 0f       	add	r18, r18
     e38:	33 1f       	adc	r19, r19
     e3a:	44 1f       	adc	r20, r20
     e3c:	aa 1f       	adc	r26, r26
     e3e:	a9 f3       	breq	.-22     	; 0xe2a <__divsf3_pse+0x10>
     e40:	35 d0       	rcall	.+106    	; 0xeac <__divsf3_pse+0x92>
     e42:	0e 2e       	mov	r0, r30
     e44:	3a f0       	brmi	.+14     	; 0xe54 <__divsf3_pse+0x3a>
     e46:	e0 e8       	ldi	r30, 0x80	; 128
     e48:	32 d0       	rcall	.+100    	; 0xeae <__divsf3_pse+0x94>
     e4a:	91 50       	subi	r25, 0x01	; 1
     e4c:	50 40       	sbci	r21, 0x00	; 0
     e4e:	e6 95       	lsr	r30
     e50:	00 1c       	adc	r0, r0
     e52:	ca f7       	brpl	.-14     	; 0xe46 <__divsf3_pse+0x2c>
     e54:	2b d0       	rcall	.+86     	; 0xeac <__divsf3_pse+0x92>
     e56:	fe 2f       	mov	r31, r30
     e58:	29 d0       	rcall	.+82     	; 0xeac <__divsf3_pse+0x92>
     e5a:	66 0f       	add	r22, r22
     e5c:	77 1f       	adc	r23, r23
     e5e:	88 1f       	adc	r24, r24
     e60:	bb 1f       	adc	r27, r27
     e62:	26 17       	cp	r18, r22
     e64:	37 07       	cpc	r19, r23
     e66:	48 07       	cpc	r20, r24
     e68:	ab 07       	cpc	r26, r27
     e6a:	b0 e8       	ldi	r27, 0x80	; 128
     e6c:	09 f0       	breq	.+2      	; 0xe70 <__divsf3_pse+0x56>
     e6e:	bb 0b       	sbc	r27, r27
     e70:	80 2d       	mov	r24, r0
     e72:	bf 01       	movw	r22, r30
     e74:	ff 27       	eor	r31, r31
     e76:	93 58       	subi	r25, 0x83	; 131
     e78:	5f 4f       	sbci	r21, 0xFF	; 255
     e7a:	3a f0       	brmi	.+14     	; 0xe8a <__divsf3_pse+0x70>
     e7c:	9e 3f       	cpi	r25, 0xFE	; 254
     e7e:	51 05       	cpc	r21, r1
     e80:	78 f0       	brcs	.+30     	; 0xea0 <__divsf3_pse+0x86>
     e82:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_inf>
     e86:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__fp_szero>
     e8a:	5f 3f       	cpi	r21, 0xFF	; 255
     e8c:	e4 f3       	brlt	.-8      	; 0xe86 <__divsf3_pse+0x6c>
     e8e:	98 3e       	cpi	r25, 0xE8	; 232
     e90:	d4 f3       	brlt	.-12     	; 0xe86 <__divsf3_pse+0x6c>
     e92:	86 95       	lsr	r24
     e94:	77 95       	ror	r23
     e96:	67 95       	ror	r22
     e98:	b7 95       	ror	r27
     e9a:	f7 95       	ror	r31
     e9c:	9f 5f       	subi	r25, 0xFF	; 255
     e9e:	c9 f7       	brne	.-14     	; 0xe92 <__divsf3_pse+0x78>
     ea0:	88 0f       	add	r24, r24
     ea2:	91 1d       	adc	r25, r1
     ea4:	96 95       	lsr	r25
     ea6:	87 95       	ror	r24
     ea8:	97 f9       	bld	r25, 7
     eaa:	08 95       	ret
     eac:	e1 e0       	ldi	r30, 0x01	; 1
     eae:	66 0f       	add	r22, r22
     eb0:	77 1f       	adc	r23, r23
     eb2:	88 1f       	adc	r24, r24
     eb4:	bb 1f       	adc	r27, r27
     eb6:	62 17       	cp	r22, r18
     eb8:	73 07       	cpc	r23, r19
     eba:	84 07       	cpc	r24, r20
     ebc:	ba 07       	cpc	r27, r26
     ebe:	20 f0       	brcs	.+8      	; 0xec8 <__divsf3_pse+0xae>
     ec0:	62 1b       	sub	r22, r18
     ec2:	73 0b       	sbc	r23, r19
     ec4:	84 0b       	sbc	r24, r20
     ec6:	ba 0b       	sbc	r27, r26
     ec8:	ee 1f       	adc	r30, r30
     eca:	88 f7       	brcc	.-30     	; 0xeae <__divsf3_pse+0x94>
     ecc:	e0 95       	com	r30
     ece:	08 95       	ret

00000ed0 <__fixunssfsi>:
     ed0:	0e 94 28 08 	call	0x1050	; 0x1050 <__fp_splitA>
     ed4:	88 f0       	brcs	.+34     	; 0xef8 <__fixunssfsi+0x28>
     ed6:	9f 57       	subi	r25, 0x7F	; 127
     ed8:	98 f0       	brcs	.+38     	; 0xf00 <__fixunssfsi+0x30>
     eda:	b9 2f       	mov	r27, r25
     edc:	99 27       	eor	r25, r25
     ede:	b7 51       	subi	r27, 0x17	; 23
     ee0:	b0 f0       	brcs	.+44     	; 0xf0e <__fixunssfsi+0x3e>
     ee2:	e1 f0       	breq	.+56     	; 0xf1c <__fixunssfsi+0x4c>
     ee4:	66 0f       	add	r22, r22
     ee6:	77 1f       	adc	r23, r23
     ee8:	88 1f       	adc	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	1a f0       	brmi	.+6      	; 0xef4 <__fixunssfsi+0x24>
     eee:	ba 95       	dec	r27
     ef0:	c9 f7       	brne	.-14     	; 0xee4 <__fixunssfsi+0x14>
     ef2:	14 c0       	rjmp	.+40     	; 0xf1c <__fixunssfsi+0x4c>
     ef4:	b1 30       	cpi	r27, 0x01	; 1
     ef6:	91 f0       	breq	.+36     	; 0xf1c <__fixunssfsi+0x4c>
     ef8:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_zero>
     efc:	b1 e0       	ldi	r27, 0x01	; 1
     efe:	08 95       	ret
     f00:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__fp_zero>
     f04:	67 2f       	mov	r22, r23
     f06:	78 2f       	mov	r23, r24
     f08:	88 27       	eor	r24, r24
     f0a:	b8 5f       	subi	r27, 0xF8	; 248
     f0c:	39 f0       	breq	.+14     	; 0xf1c <__fixunssfsi+0x4c>
     f0e:	b9 3f       	cpi	r27, 0xF9	; 249
     f10:	cc f3       	brlt	.-14     	; 0xf04 <__fixunssfsi+0x34>
     f12:	86 95       	lsr	r24
     f14:	77 95       	ror	r23
     f16:	67 95       	ror	r22
     f18:	b3 95       	inc	r27
     f1a:	d9 f7       	brne	.-10     	; 0xf12 <__fixunssfsi+0x42>
     f1c:	3e f4       	brtc	.+14     	; 0xf2c <__fixunssfsi+0x5c>
     f1e:	90 95       	com	r25
     f20:	80 95       	com	r24
     f22:	70 95       	com	r23
     f24:	61 95       	neg	r22
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	8f 4f       	sbci	r24, 0xFF	; 255
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
     f2c:	08 95       	ret

00000f2e <__floatunsisf>:
     f2e:	e8 94       	clt
     f30:	09 c0       	rjmp	.+18     	; 0xf44 <__floatsisf+0x12>

00000f32 <__floatsisf>:
     f32:	97 fb       	bst	r25, 7
     f34:	3e f4       	brtc	.+14     	; 0xf44 <__floatsisf+0x12>
     f36:	90 95       	com	r25
     f38:	80 95       	com	r24
     f3a:	70 95       	com	r23
     f3c:	61 95       	neg	r22
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	8f 4f       	sbci	r24, 0xFF	; 255
     f42:	9f 4f       	sbci	r25, 0xFF	; 255
     f44:	99 23       	and	r25, r25
     f46:	a9 f0       	breq	.+42     	; 0xf72 <__floatsisf+0x40>
     f48:	f9 2f       	mov	r31, r25
     f4a:	96 e9       	ldi	r25, 0x96	; 150
     f4c:	bb 27       	eor	r27, r27
     f4e:	93 95       	inc	r25
     f50:	f6 95       	lsr	r31
     f52:	87 95       	ror	r24
     f54:	77 95       	ror	r23
     f56:	67 95       	ror	r22
     f58:	b7 95       	ror	r27
     f5a:	f1 11       	cpse	r31, r1
     f5c:	f8 cf       	rjmp	.-16     	; 0xf4e <__floatsisf+0x1c>
     f5e:	fa f4       	brpl	.+62     	; 0xf9e <__floatsisf+0x6c>
     f60:	bb 0f       	add	r27, r27
     f62:	11 f4       	brne	.+4      	; 0xf68 <__floatsisf+0x36>
     f64:	60 ff       	sbrs	r22, 0
     f66:	1b c0       	rjmp	.+54     	; 0xf9e <__floatsisf+0x6c>
     f68:	6f 5f       	subi	r22, 0xFF	; 255
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	8f 4f       	sbci	r24, 0xFF	; 255
     f6e:	9f 4f       	sbci	r25, 0xFF	; 255
     f70:	16 c0       	rjmp	.+44     	; 0xf9e <__floatsisf+0x6c>
     f72:	88 23       	and	r24, r24
     f74:	11 f0       	breq	.+4      	; 0xf7a <__floatsisf+0x48>
     f76:	96 e9       	ldi	r25, 0x96	; 150
     f78:	11 c0       	rjmp	.+34     	; 0xf9c <__floatsisf+0x6a>
     f7a:	77 23       	and	r23, r23
     f7c:	21 f0       	breq	.+8      	; 0xf86 <__floatsisf+0x54>
     f7e:	9e e8       	ldi	r25, 0x8E	; 142
     f80:	87 2f       	mov	r24, r23
     f82:	76 2f       	mov	r23, r22
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <__floatsisf+0x5e>
     f86:	66 23       	and	r22, r22
     f88:	71 f0       	breq	.+28     	; 0xfa6 <__floatsisf+0x74>
     f8a:	96 e8       	ldi	r25, 0x86	; 134
     f8c:	86 2f       	mov	r24, r22
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	2a f0       	brmi	.+10     	; 0xf9e <__floatsisf+0x6c>
     f94:	9a 95       	dec	r25
     f96:	66 0f       	add	r22, r22
     f98:	77 1f       	adc	r23, r23
     f9a:	88 1f       	adc	r24, r24
     f9c:	da f7       	brpl	.-10     	; 0xf94 <__floatsisf+0x62>
     f9e:	88 0f       	add	r24, r24
     fa0:	96 95       	lsr	r25
     fa2:	87 95       	ror	r24
     fa4:	97 f9       	bld	r25, 7
     fa6:	08 95       	ret

00000fa8 <__fp_cmp>:
     fa8:	99 0f       	add	r25, r25
     faa:	00 08       	sbc	r0, r0
     fac:	55 0f       	add	r21, r21
     fae:	aa 0b       	sbc	r26, r26
     fb0:	e0 e8       	ldi	r30, 0x80	; 128
     fb2:	fe ef       	ldi	r31, 0xFE	; 254
     fb4:	16 16       	cp	r1, r22
     fb6:	17 06       	cpc	r1, r23
     fb8:	e8 07       	cpc	r30, r24
     fba:	f9 07       	cpc	r31, r25
     fbc:	c0 f0       	brcs	.+48     	; 0xfee <__fp_cmp+0x46>
     fbe:	12 16       	cp	r1, r18
     fc0:	13 06       	cpc	r1, r19
     fc2:	e4 07       	cpc	r30, r20
     fc4:	f5 07       	cpc	r31, r21
     fc6:	98 f0       	brcs	.+38     	; 0xfee <__fp_cmp+0x46>
     fc8:	62 1b       	sub	r22, r18
     fca:	73 0b       	sbc	r23, r19
     fcc:	84 0b       	sbc	r24, r20
     fce:	95 0b       	sbc	r25, r21
     fd0:	39 f4       	brne	.+14     	; 0xfe0 <__fp_cmp+0x38>
     fd2:	0a 26       	eor	r0, r26
     fd4:	61 f0       	breq	.+24     	; 0xfee <__fp_cmp+0x46>
     fd6:	23 2b       	or	r18, r19
     fd8:	24 2b       	or	r18, r20
     fda:	25 2b       	or	r18, r21
     fdc:	21 f4       	brne	.+8      	; 0xfe6 <__fp_cmp+0x3e>
     fde:	08 95       	ret
     fe0:	0a 26       	eor	r0, r26
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <__fp_cmp+0x3e>
     fe4:	a1 40       	sbci	r26, 0x01	; 1
     fe6:	a6 95       	lsr	r26
     fe8:	8f ef       	ldi	r24, 0xFF	; 255
     fea:	81 1d       	adc	r24, r1
     fec:	81 1d       	adc	r24, r1
     fee:	08 95       	ret

00000ff0 <__fp_inf>:
     ff0:	97 f9       	bld	r25, 7
     ff2:	9f 67       	ori	r25, 0x7F	; 127
     ff4:	80 e8       	ldi	r24, 0x80	; 128
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	08 95       	ret

00000ffc <__fp_nan>:
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
     ffe:	80 ec       	ldi	r24, 0xC0	; 192
    1000:	08 95       	ret

00001002 <__fp_pscA>:
    1002:	00 24       	eor	r0, r0
    1004:	0a 94       	dec	r0
    1006:	16 16       	cp	r1, r22
    1008:	17 06       	cpc	r1, r23
    100a:	18 06       	cpc	r1, r24
    100c:	09 06       	cpc	r0, r25
    100e:	08 95       	ret

00001010 <__fp_pscB>:
    1010:	00 24       	eor	r0, r0
    1012:	0a 94       	dec	r0
    1014:	12 16       	cp	r1, r18
    1016:	13 06       	cpc	r1, r19
    1018:	14 06       	cpc	r1, r20
    101a:	05 06       	cpc	r0, r21
    101c:	08 95       	ret

0000101e <__fp_round>:
    101e:	09 2e       	mov	r0, r25
    1020:	03 94       	inc	r0
    1022:	00 0c       	add	r0, r0
    1024:	11 f4       	brne	.+4      	; 0x102a <__fp_round+0xc>
    1026:	88 23       	and	r24, r24
    1028:	52 f0       	brmi	.+20     	; 0x103e <__fp_round+0x20>
    102a:	bb 0f       	add	r27, r27
    102c:	40 f4       	brcc	.+16     	; 0x103e <__fp_round+0x20>
    102e:	bf 2b       	or	r27, r31
    1030:	11 f4       	brne	.+4      	; 0x1036 <__fp_round+0x18>
    1032:	60 ff       	sbrs	r22, 0
    1034:	04 c0       	rjmp	.+8      	; 0x103e <__fp_round+0x20>
    1036:	6f 5f       	subi	r22, 0xFF	; 255
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	8f 4f       	sbci	r24, 0xFF	; 255
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	08 95       	ret

00001040 <__fp_split3>:
    1040:	57 fd       	sbrc	r21, 7
    1042:	90 58       	subi	r25, 0x80	; 128
    1044:	44 0f       	add	r20, r20
    1046:	55 1f       	adc	r21, r21
    1048:	59 f0       	breq	.+22     	; 0x1060 <__fp_splitA+0x10>
    104a:	5f 3f       	cpi	r21, 0xFF	; 255
    104c:	71 f0       	breq	.+28     	; 0x106a <__fp_splitA+0x1a>
    104e:	47 95       	ror	r20

00001050 <__fp_splitA>:
    1050:	88 0f       	add	r24, r24
    1052:	97 fb       	bst	r25, 7
    1054:	99 1f       	adc	r25, r25
    1056:	61 f0       	breq	.+24     	; 0x1070 <__fp_splitA+0x20>
    1058:	9f 3f       	cpi	r25, 0xFF	; 255
    105a:	79 f0       	breq	.+30     	; 0x107a <__fp_splitA+0x2a>
    105c:	87 95       	ror	r24
    105e:	08 95       	ret
    1060:	12 16       	cp	r1, r18
    1062:	13 06       	cpc	r1, r19
    1064:	14 06       	cpc	r1, r20
    1066:	55 1f       	adc	r21, r21
    1068:	f2 cf       	rjmp	.-28     	; 0x104e <__fp_split3+0xe>
    106a:	46 95       	lsr	r20
    106c:	f1 df       	rcall	.-30     	; 0x1050 <__fp_splitA>
    106e:	08 c0       	rjmp	.+16     	; 0x1080 <__fp_splitA+0x30>
    1070:	16 16       	cp	r1, r22
    1072:	17 06       	cpc	r1, r23
    1074:	18 06       	cpc	r1, r24
    1076:	99 1f       	adc	r25, r25
    1078:	f1 cf       	rjmp	.-30     	; 0x105c <__fp_splitA+0xc>
    107a:	86 95       	lsr	r24
    107c:	71 05       	cpc	r23, r1
    107e:	61 05       	cpc	r22, r1
    1080:	08 94       	sec
    1082:	08 95       	ret

00001084 <__fp_zero>:
    1084:	e8 94       	clt

00001086 <__fp_szero>:
    1086:	bb 27       	eor	r27, r27
    1088:	66 27       	eor	r22, r22
    108a:	77 27       	eor	r23, r23
    108c:	cb 01       	movw	r24, r22
    108e:	97 f9       	bld	r25, 7
    1090:	08 95       	ret

00001092 <__gesf2>:
    1092:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__fp_cmp>
    1096:	08 f4       	brcc	.+2      	; 0x109a <__gesf2+0x8>
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	08 95       	ret

0000109c <__mulsf3>:
    109c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__mulsf3x>
    10a0:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_round>
    10a4:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_pscA>
    10a8:	38 f0       	brcs	.+14     	; 0x10b8 <__mulsf3+0x1c>
    10aa:	0e 94 08 08 	call	0x1010	; 0x1010 <__fp_pscB>
    10ae:	20 f0       	brcs	.+8      	; 0x10b8 <__mulsf3+0x1c>
    10b0:	95 23       	and	r25, r21
    10b2:	11 f0       	breq	.+4      	; 0x10b8 <__mulsf3+0x1c>
    10b4:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_inf>
    10b8:	0c 94 fe 07 	jmp	0xffc	; 0xffc <__fp_nan>
    10bc:	11 24       	eor	r1, r1
    10be:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__fp_szero>

000010c2 <__mulsf3x>:
    10c2:	0e 94 20 08 	call	0x1040	; 0x1040 <__fp_split3>
    10c6:	70 f3       	brcs	.-36     	; 0x10a4 <__mulsf3+0x8>

000010c8 <__mulsf3_pse>:
    10c8:	95 9f       	mul	r25, r21
    10ca:	c1 f3       	breq	.-16     	; 0x10bc <__mulsf3+0x20>
    10cc:	95 0f       	add	r25, r21
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	55 1f       	adc	r21, r21
    10d2:	62 9f       	mul	r22, r18
    10d4:	f0 01       	movw	r30, r0
    10d6:	72 9f       	mul	r23, r18
    10d8:	bb 27       	eor	r27, r27
    10da:	f0 0d       	add	r31, r0
    10dc:	b1 1d       	adc	r27, r1
    10de:	63 9f       	mul	r22, r19
    10e0:	aa 27       	eor	r26, r26
    10e2:	f0 0d       	add	r31, r0
    10e4:	b1 1d       	adc	r27, r1
    10e6:	aa 1f       	adc	r26, r26
    10e8:	64 9f       	mul	r22, r20
    10ea:	66 27       	eor	r22, r22
    10ec:	b0 0d       	add	r27, r0
    10ee:	a1 1d       	adc	r26, r1
    10f0:	66 1f       	adc	r22, r22
    10f2:	82 9f       	mul	r24, r18
    10f4:	22 27       	eor	r18, r18
    10f6:	b0 0d       	add	r27, r0
    10f8:	a1 1d       	adc	r26, r1
    10fa:	62 1f       	adc	r22, r18
    10fc:	73 9f       	mul	r23, r19
    10fe:	b0 0d       	add	r27, r0
    1100:	a1 1d       	adc	r26, r1
    1102:	62 1f       	adc	r22, r18
    1104:	83 9f       	mul	r24, r19
    1106:	a0 0d       	add	r26, r0
    1108:	61 1d       	adc	r22, r1
    110a:	22 1f       	adc	r18, r18
    110c:	74 9f       	mul	r23, r20
    110e:	33 27       	eor	r19, r19
    1110:	a0 0d       	add	r26, r0
    1112:	61 1d       	adc	r22, r1
    1114:	23 1f       	adc	r18, r19
    1116:	84 9f       	mul	r24, r20
    1118:	60 0d       	add	r22, r0
    111a:	21 1d       	adc	r18, r1
    111c:	82 2f       	mov	r24, r18
    111e:	76 2f       	mov	r23, r22
    1120:	6a 2f       	mov	r22, r26
    1122:	11 24       	eor	r1, r1
    1124:	9f 57       	subi	r25, 0x7F	; 127
    1126:	50 40       	sbci	r21, 0x00	; 0
    1128:	9a f0       	brmi	.+38     	; 0x1150 <__mulsf3_pse+0x88>
    112a:	f1 f0       	breq	.+60     	; 0x1168 <__mulsf3_pse+0xa0>
    112c:	88 23       	and	r24, r24
    112e:	4a f0       	brmi	.+18     	; 0x1142 <__mulsf3_pse+0x7a>
    1130:	ee 0f       	add	r30, r30
    1132:	ff 1f       	adc	r31, r31
    1134:	bb 1f       	adc	r27, r27
    1136:	66 1f       	adc	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	91 50       	subi	r25, 0x01	; 1
    113e:	50 40       	sbci	r21, 0x00	; 0
    1140:	a9 f7       	brne	.-22     	; 0x112c <__mulsf3_pse+0x64>
    1142:	9e 3f       	cpi	r25, 0xFE	; 254
    1144:	51 05       	cpc	r21, r1
    1146:	80 f0       	brcs	.+32     	; 0x1168 <__mulsf3_pse+0xa0>
    1148:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__fp_inf>
    114c:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__fp_szero>
    1150:	5f 3f       	cpi	r21, 0xFF	; 255
    1152:	e4 f3       	brlt	.-8      	; 0x114c <__mulsf3_pse+0x84>
    1154:	98 3e       	cpi	r25, 0xE8	; 232
    1156:	d4 f3       	brlt	.-12     	; 0x114c <__mulsf3_pse+0x84>
    1158:	86 95       	lsr	r24
    115a:	77 95       	ror	r23
    115c:	67 95       	ror	r22
    115e:	b7 95       	ror	r27
    1160:	f7 95       	ror	r31
    1162:	e7 95       	ror	r30
    1164:	9f 5f       	subi	r25, 0xFF	; 255
    1166:	c1 f7       	brne	.-16     	; 0x1158 <__mulsf3_pse+0x90>
    1168:	fe 2b       	or	r31, r30
    116a:	88 0f       	add	r24, r24
    116c:	91 1d       	adc	r25, r1
    116e:	96 95       	lsr	r25
    1170:	87 95       	ror	r24
    1172:	97 f9       	bld	r25, 7
    1174:	08 95       	ret

00001176 <__umulhisi3>:
    1176:	a2 9f       	mul	r26, r18
    1178:	b0 01       	movw	r22, r0
    117a:	b3 9f       	mul	r27, r19
    117c:	c0 01       	movw	r24, r0
    117e:	a3 9f       	mul	r26, r19
    1180:	70 0d       	add	r23, r0
    1182:	81 1d       	adc	r24, r1
    1184:	11 24       	eor	r1, r1
    1186:	91 1d       	adc	r25, r1
    1188:	b2 9f       	mul	r27, r18
    118a:	70 0d       	add	r23, r0
    118c:	81 1d       	adc	r24, r1
    118e:	11 24       	eor	r1, r1
    1190:	91 1d       	adc	r25, r1
    1192:	08 95       	ret

00001194 <__tablejump2__>:
    1194:	ee 0f       	add	r30, r30
    1196:	ff 1f       	adc	r31, r31
    1198:	05 90       	lpm	r0, Z+
    119a:	f4 91       	lpm	r31, Z
    119c:	e0 2d       	mov	r30, r0
    119e:	09 94       	ijmp

000011a0 <memcpy>:
    11a0:	fb 01       	movw	r30, r22
    11a2:	dc 01       	movw	r26, r24
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <memcpy+0xa>
    11a6:	01 90       	ld	r0, Z+
    11a8:	0d 92       	st	X+, r0
    11aa:	41 50       	subi	r20, 0x01	; 1
    11ac:	50 40       	sbci	r21, 0x00	; 0
    11ae:	d8 f7       	brcc	.-10     	; 0x11a6 <memcpy+0x6>
    11b0:	08 95       	ret

000011b2 <_exit>:
    11b2:	f8 94       	cli

000011b4 <__stop_program>:
    11b4:	ff cf       	rjmp	.-2      	; 0x11b4 <__stop_program>
