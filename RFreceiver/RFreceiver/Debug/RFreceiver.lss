
RFreceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00001112  000011a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800142  00800142  000011e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005c89  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f7e  00000000  00000000  000071c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a6e  00000000  00000000  00008147  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a54  00000000  00000000  00009bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013c6  00000000  00000000  0000a60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004117  00000000  00000000  0000b9d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000fae9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_14>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	6b 02       	muls	r22, r27

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e2 e1       	ldi	r30, 0x12	; 18
      7e:	f1 e1       	ldi	r31, 0x11	; 17
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a2 34       	cpi	r26, 0x42	; 66
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a2 e4       	ldi	r26, 0x42	; 66
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	ad 35       	cpi	r26, 0x5D	; 93
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
      b6:	0c 94 87 08 	jmp	0x110e	; 0x110e <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <UART_Init>:
	 // turn on CTC mode
	 TCCR0A |= (1 << WGM01);
	 // Set CS01 and CS00 bits for 64 prescaler
	 TCCR0B |= (1 << CS01) | (1 << CS00);
	 // enable timer compare interrupt
	 TIMSK0 |= (1 << OCIE0A);
      be:	e1 ec       	ldi	r30, 0xC1	; 193
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	10 82       	st	Z, r1
      c4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      c8:	a2 ec       	ldi	r26, 0xC2	; 194
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	8c 91       	ld	r24, X
      ce:	8e 60       	ori	r24, 0x0E	; 14
      d0:	8c 93       	st	X, r24
      d2:	83 e3       	ldi	r24, 0x33	; 51
      d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      dc:	80 81       	ld	r24, Z
      de:	88 61       	ori	r24, 0x18	; 24
      e0:	80 83       	st	Z, r24
      e2:	08 95       	ret

000000e4 <UART_Transmit>:
      e4:	90 e4       	ldi	r25, 0x40	; 64
      e6:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      ea:	e0 ec       	ldi	r30, 0xC0	; 192
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	90 81       	ld	r25, Z
      f0:	95 ff       	sbrs	r25, 5
      f2:	fd cf       	rjmp	.-6      	; 0xee <UART_Transmit+0xa>
      f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      f8:	e0 ec       	ldi	r30, 0xC0	; 192
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	86 ff       	sbrs	r24, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <UART_Transmit+0x18>
     102:	08 95       	ret

00000104 <UART_Printfln>:
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	8c 01       	movw	r16, r24
     10c:	fc 01       	movw	r30, r24
     10e:	80 81       	ld	r24, Z
     110:	88 23       	and	r24, r24
     112:	51 f0       	breq	.+20     	; 0x128 <UART_Printfln+0x24>
     114:	c0 e0       	ldi	r28, 0x00	; 0
     116:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     11a:	cf 5f       	subi	r28, 0xFF	; 255
     11c:	f8 01       	movw	r30, r16
     11e:	ec 0f       	add	r30, r28
     120:	f1 1d       	adc	r31, r1
     122:	80 81       	ld	r24, Z
     124:	81 11       	cpse	r24, r1
     126:	f7 cf       	rjmp	.-18     	; 0x116 <UART_Printfln+0x12>
     128:	8a e0       	ldi	r24, 0x0A	; 10
     12a:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     12e:	cf 91       	pop	r28
     130:	1f 91       	pop	r17
     132:	0f 91       	pop	r16
     134:	08 95       	ret

00000136 <UART_Printf>:
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	fc 01       	movw	r30, r24
     13e:	80 81       	ld	r24, Z
     140:	88 23       	and	r24, r24
     142:	59 f0       	breq	.+22     	; 0x15a <UART_Printf+0x24>
     144:	8f 01       	movw	r16, r30
     146:	c0 e0       	ldi	r28, 0x00	; 0
     148:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     14c:	cf 5f       	subi	r28, 0xFF	; 255
     14e:	f8 01       	movw	r30, r16
     150:	ec 0f       	add	r30, r28
     152:	f1 1d       	adc	r31, r1
     154:	80 81       	ld	r24, Z
     156:	81 11       	cpse	r24, r1
     158:	f7 cf       	rjmp	.-18     	; 0x148 <UART_Printf+0x12>
     15a:	cf 91       	pop	r28
     15c:	1f 91       	pop	r17
     15e:	0f 91       	pop	r16
     160:	08 95       	ret

00000162 <UART_Print_Num>:
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	8c 01       	movw	r16, r24
     16c:	9c 01       	movw	r18, r24
     16e:	32 95       	swap	r19
     170:	22 95       	swap	r18
     172:	2f 70       	andi	r18, 0x0F	; 15
     174:	23 27       	eor	r18, r19
     176:	3f 70       	andi	r19, 0x0F	; 15
     178:	23 27       	eor	r18, r19
     17a:	a7 e4       	ldi	r26, 0x47	; 71
     17c:	b3 e0       	ldi	r27, 0x03	; 3
     17e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__umulhisi3>
     182:	96 95       	lsr	r25
     184:	87 95       	ror	r24
     186:	96 95       	lsr	r25
     188:	87 95       	ror	r24
     18a:	96 95       	lsr	r25
     18c:	87 95       	ror	r24
     18e:	80 5d       	subi	r24, 0xD0	; 208
     190:	80 33       	cpi	r24, 0x30	; 48
     192:	11 f0       	breq	.+4      	; 0x198 <UART_Print_Num+0x36>
     194:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     198:	98 01       	movw	r18, r16
     19a:	32 95       	swap	r19
     19c:	22 95       	swap	r18
     19e:	2f 70       	andi	r18, 0x0F	; 15
     1a0:	23 27       	eor	r18, r19
     1a2:	3f 70       	andi	r19, 0x0F	; 15
     1a4:	23 27       	eor	r18, r19
     1a6:	a7 e4       	ldi	r26, 0x47	; 71
     1a8:	b3 e0       	ldi	r27, 0x03	; 3
     1aa:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__umulhisi3>
     1ae:	ec 01       	movw	r28, r24
     1b0:	d6 95       	lsr	r29
     1b2:	c7 95       	ror	r28
     1b4:	d6 95       	lsr	r29
     1b6:	c7 95       	ror	r28
     1b8:	d6 95       	lsr	r29
     1ba:	c7 95       	ror	r28
     1bc:	20 e1       	ldi	r18, 0x10	; 16
     1be:	37 e2       	ldi	r19, 0x27	; 39
     1c0:	c2 9f       	mul	r28, r18
     1c2:	c0 01       	movw	r24, r0
     1c4:	c3 9f       	mul	r28, r19
     1c6:	90 0d       	add	r25, r0
     1c8:	d2 9f       	mul	r29, r18
     1ca:	90 0d       	add	r25, r0
     1cc:	11 24       	eor	r1, r1
     1ce:	e8 01       	movw	r28, r16
     1d0:	c8 1b       	sub	r28, r24
     1d2:	d9 0b       	sbc	r29, r25
     1d4:	9e 01       	movw	r18, r28
     1d6:	36 95       	lsr	r19
     1d8:	27 95       	ror	r18
     1da:	36 95       	lsr	r19
     1dc:	27 95       	ror	r18
     1de:	36 95       	lsr	r19
     1e0:	27 95       	ror	r18
     1e2:	a5 ec       	ldi	r26, 0xC5	; 197
     1e4:	b0 e2       	ldi	r27, 0x20	; 32
     1e6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__umulhisi3>
     1ea:	92 95       	swap	r25
     1ec:	82 95       	swap	r24
     1ee:	8f 70       	andi	r24, 0x0F	; 15
     1f0:	89 27       	eor	r24, r25
     1f2:	9f 70       	andi	r25, 0x0F	; 15
     1f4:	89 27       	eor	r24, r25
     1f6:	80 5d       	subi	r24, 0xD0	; 208
     1f8:	80 33       	cpi	r24, 0x30	; 48
     1fa:	11 f0       	breq	.+4      	; 0x200 <UART_Print_Num+0x9e>
     1fc:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     200:	9e 01       	movw	r18, r28
     202:	36 95       	lsr	r19
     204:	27 95       	ror	r18
     206:	36 95       	lsr	r19
     208:	27 95       	ror	r18
     20a:	36 95       	lsr	r19
     20c:	27 95       	ror	r18
     20e:	a5 ec       	ldi	r26, 0xC5	; 197
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__umulhisi3>
     216:	8c 01       	movw	r16, r24
     218:	12 95       	swap	r17
     21a:	02 95       	swap	r16
     21c:	0f 70       	andi	r16, 0x0F	; 15
     21e:	01 27       	eor	r16, r17
     220:	1f 70       	andi	r17, 0x0F	; 15
     222:	01 27       	eor	r16, r17
     224:	28 ee       	ldi	r18, 0xE8	; 232
     226:	33 e0       	ldi	r19, 0x03	; 3
     228:	02 9f       	mul	r16, r18
     22a:	c0 01       	movw	r24, r0
     22c:	03 9f       	mul	r16, r19
     22e:	90 0d       	add	r25, r0
     230:	12 9f       	mul	r17, r18
     232:	90 0d       	add	r25, r0
     234:	11 24       	eor	r1, r1
     236:	8e 01       	movw	r16, r28
     238:	08 1b       	sub	r16, r24
     23a:	19 0b       	sbc	r17, r25
     23c:	98 01       	movw	r18, r16
     23e:	36 95       	lsr	r19
     240:	27 95       	ror	r18
     242:	36 95       	lsr	r19
     244:	27 95       	ror	r18
     246:	ab e7       	ldi	r26, 0x7B	; 123
     248:	b4 e1       	ldi	r27, 0x14	; 20
     24a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__umulhisi3>
     24e:	96 95       	lsr	r25
     250:	87 95       	ror	r24
     252:	80 5d       	subi	r24, 0xD0	; 208
     254:	80 33       	cpi	r24, 0x30	; 48
     256:	11 f0       	breq	.+4      	; 0x25c <UART_Print_Num+0xfa>
     258:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     25c:	98 01       	movw	r18, r16
     25e:	36 95       	lsr	r19
     260:	27 95       	ror	r18
     262:	36 95       	lsr	r19
     264:	27 95       	ror	r18
     266:	ab e7       	ldi	r26, 0x7B	; 123
     268:	b4 e1       	ldi	r27, 0x14	; 20
     26a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__umulhisi3>
     26e:	ec 01       	movw	r28, r24
     270:	d6 95       	lsr	r29
     272:	c7 95       	ror	r28
     274:	24 e6       	ldi	r18, 0x64	; 100
     276:	2c 9f       	mul	r18, r28
     278:	c0 01       	movw	r24, r0
     27a:	2d 9f       	mul	r18, r29
     27c:	90 0d       	add	r25, r0
     27e:	11 24       	eor	r1, r1
     280:	e8 01       	movw	r28, r16
     282:	c8 1b       	sub	r28, r24
     284:	d9 0b       	sbc	r29, r25
     286:	9e 01       	movw	r18, r28
     288:	ad ec       	ldi	r26, 0xCD	; 205
     28a:	bc ec       	ldi	r27, 0xCC	; 204
     28c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__umulhisi3>
     290:	96 95       	lsr	r25
     292:	87 95       	ror	r24
     294:	96 95       	lsr	r25
     296:	87 95       	ror	r24
     298:	96 95       	lsr	r25
     29a:	87 95       	ror	r24
     29c:	80 5d       	subi	r24, 0xD0	; 208
     29e:	80 33       	cpi	r24, 0x30	; 48
     2a0:	11 f0       	breq	.+4      	; 0x2a6 <UART_Print_Num+0x144>
     2a2:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2a6:	9e 01       	movw	r18, r28
     2a8:	ad ec       	ldi	r26, 0xCD	; 205
     2aa:	bc ec       	ldi	r27, 0xCC	; 204
     2ac:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__umulhisi3>
     2b0:	96 95       	lsr	r25
     2b2:	87 95       	ror	r24
     2b4:	96 95       	lsr	r25
     2b6:	87 95       	ror	r24
     2b8:	96 95       	lsr	r25
     2ba:	87 95       	ror	r24
     2bc:	9c 01       	movw	r18, r24
     2be:	22 0f       	add	r18, r18
     2c0:	33 1f       	adc	r19, r19
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	82 0f       	add	r24, r18
     2d0:	93 1f       	adc	r25, r19
     2d2:	9e 01       	movw	r18, r28
     2d4:	28 1b       	sub	r18, r24
     2d6:	39 0b       	sbc	r19, r25
     2d8:	c9 01       	movw	r24, r18
     2da:	80 5d       	subi	r24, 0xD0	; 208
     2dc:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2e0:	8a e0       	ldi	r24, 0x0A	; 10
     2e2:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <Set_pin>:
     2f0:	61 30       	cpi	r22, 0x01	; 1
     2f2:	71 05       	cpc	r23, r1
     2f4:	f1 f4       	brne	.+60     	; 0x332 <Set_pin+0x42>
     2f6:	88 30       	cpi	r24, 0x08	; 8
     2f8:	91 05       	cpc	r25, r1
     2fa:	70 f0       	brcs	.+28     	; 0x318 <Set_pin+0x28>
     2fc:	44 b1       	in	r20, 0x04	; 4
     2fe:	08 97       	sbiw	r24, 0x08	; 8
     300:	21 e0       	ldi	r18, 0x01	; 1
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	b9 01       	movw	r22, r18
     306:	02 c0       	rjmp	.+4      	; 0x30c <Set_pin+0x1c>
     308:	66 0f       	add	r22, r22
     30a:	77 1f       	adc	r23, r23
     30c:	8a 95       	dec	r24
     30e:	e2 f7       	brpl	.-8      	; 0x308 <Set_pin+0x18>
     310:	cb 01       	movw	r24, r22
     312:	84 2b       	or	r24, r20
     314:	84 b9       	out	0x04, r24	; 4
     316:	08 95       	ret
     318:	4a b1       	in	r20, 0x0a	; 10
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	b9 01       	movw	r22, r18
     320:	02 c0       	rjmp	.+4      	; 0x326 <Set_pin+0x36>
     322:	66 0f       	add	r22, r22
     324:	77 1f       	adc	r23, r23
     326:	8a 95       	dec	r24
     328:	e2 f7       	brpl	.-8      	; 0x322 <Set_pin+0x32>
     32a:	cb 01       	movw	r24, r22
     32c:	84 2b       	or	r24, r20
     32e:	8a b9       	out	0x0a, r24	; 10
     330:	08 95       	ret
     332:	08 97       	sbiw	r24, 0x08	; 8
     334:	18 f0       	brcs	.+6      	; 0x33c <Set_pin+0x4c>
     336:	84 b1       	in	r24, 0x04	; 4
     338:	84 b9       	out	0x04, r24	; 4
     33a:	08 95       	ret
     33c:	8a b1       	in	r24, 0x0a	; 10
     33e:	8a b9       	out	0x0a, r24	; 10
     340:	08 95       	ret

00000342 <Write_Digital>:
     342:	66 23       	and	r22, r22
     344:	f1 f0       	breq	.+60     	; 0x382 <Write_Digital+0x40>
     346:	88 30       	cpi	r24, 0x08	; 8
     348:	91 05       	cpc	r25, r1
     34a:	70 f0       	brcs	.+28     	; 0x368 <Write_Digital+0x26>
     34c:	45 b1       	in	r20, 0x05	; 5
     34e:	08 97       	sbiw	r24, 0x08	; 8
     350:	21 e0       	ldi	r18, 0x01	; 1
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	b9 01       	movw	r22, r18
     356:	02 c0       	rjmp	.+4      	; 0x35c <Write_Digital+0x1a>
     358:	66 0f       	add	r22, r22
     35a:	77 1f       	adc	r23, r23
     35c:	8a 95       	dec	r24
     35e:	e2 f7       	brpl	.-8      	; 0x358 <Write_Digital+0x16>
     360:	cb 01       	movw	r24, r22
     362:	84 2b       	or	r24, r20
     364:	85 b9       	out	0x05, r24	; 5
     366:	08 95       	ret
     368:	4b b1       	in	r20, 0x0b	; 11
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	b9 01       	movw	r22, r18
     370:	02 c0       	rjmp	.+4      	; 0x376 <Write_Digital+0x34>
     372:	66 0f       	add	r22, r22
     374:	77 1f       	adc	r23, r23
     376:	8a 95       	dec	r24
     378:	e2 f7       	brpl	.-8      	; 0x372 <Write_Digital+0x30>
     37a:	cb 01       	movw	r24, r22
     37c:	84 2b       	or	r24, r20
     37e:	8b b9       	out	0x0b, r24	; 11
     380:	08 95       	ret
     382:	88 30       	cpi	r24, 0x08	; 8
     384:	91 05       	cpc	r25, r1
     386:	78 f0       	brcs	.+30     	; 0x3a6 <Write_Digital+0x64>
     388:	45 b1       	in	r20, 0x05	; 5
     38a:	08 97       	sbiw	r24, 0x08	; 8
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	b9 01       	movw	r22, r18
     392:	02 c0       	rjmp	.+4      	; 0x398 <Write_Digital+0x56>
     394:	66 0f       	add	r22, r22
     396:	77 1f       	adc	r23, r23
     398:	8a 95       	dec	r24
     39a:	e2 f7       	brpl	.-8      	; 0x394 <Write_Digital+0x52>
     39c:	cb 01       	movw	r24, r22
     39e:	80 95       	com	r24
     3a0:	84 23       	and	r24, r20
     3a2:	85 b9       	out	0x05, r24	; 5
     3a4:	08 95       	ret
     3a6:	4b b1       	in	r20, 0x0b	; 11
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	b9 01       	movw	r22, r18
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <Write_Digital+0x72>
     3b0:	66 0f       	add	r22, r22
     3b2:	77 1f       	adc	r23, r23
     3b4:	8a 95       	dec	r24
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <Write_Digital+0x6e>
     3b8:	cb 01       	movw	r24, r22
     3ba:	80 95       	com	r24
     3bc:	84 23       	and	r24, r20
     3be:	8b b9       	out	0x0b, r24	; 11
     3c0:	08 95       	ret

000003c2 <__vector_14>:
}
// ISR for timer 0
ISR(TIMER0_COMPA_vect)
{
     3c2:	1f 92       	push	r1
     3c4:	0f 92       	push	r0
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	0f 92       	push	r0
     3ca:	11 24       	eor	r1, r1
     3cc:	8f 93       	push	r24
     3ce:	9f 93       	push	r25
	cnt++;
     3d0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     3d4:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     3d8:	01 96       	adiw	r24, 0x01	; 1
     3da:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x1>
     3de:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
}
     3e2:	9f 91       	pop	r25
     3e4:	8f 91       	pop	r24
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <main>:
//uint64_t pipes[3] = {0xF0F0F0F0E1LL,0xF0F0F0F0E2LL,0xF0F0F0F0E3LL };
const byte address[6] = "00001"; //5 Byte address of nrf device	
unsigned char count=1;
unsigned char p=0;
int main(void)
{ 
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	a1 97       	sbiw	r28, 0x21	; 33
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
	unsigned char status1;
	UART_Init(9600);	 
     404:	60 e8       	ldi	r22, 0x80	; 128
     406:	75 e2       	ldi	r23, 0x25	; 37
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_Init>
	radio.begin();	 
     410:	85 e4       	ldi	r24, 0x45	; 69
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN4RF245beginEv>
	//radio.openWritingPipe(address);// transmitter address
	radio.openReadingPipe(0,address);// receiver address must be same as transmitter 
     418:	49 e2       	ldi	r20, 0x29	; 41
     41a:	51 e0       	ldi	r21, 0x01	; 1
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	85 e4       	ldi	r24, 0x45	; 69
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 88 04 	call	0x910	; 0x910 <_ZN4RF2415openReadingPipeEhPKh>
	radio.setPALevel(RF24_PA_MAX);// 0dBm power level
     426:	63 e0       	ldi	r22, 0x03	; 3
     428:	85 e4       	ldi	r24, 0x45	; 69
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 48 05 	call	0xa90	; 0xa90 <_ZN4RF2410setPALevelEh>
	radio.setDataRate(RF24_250KBPS);
     430:	62 e0       	ldi	r22, 0x02	; 2
     432:	85 e4       	ldi	r24, 0x45	; 69
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 67 05 	call	0xace	; 0xace <_ZN4RF2411setDataRateE15rf24_datarate_e>
	//radio.stopListening();//make radio  transmitter
	radio.startListening();
     43a:	85 e4       	ldi	r24, 0x45	; 69
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN4RF2414startListeningEv>
		//status1= radio.read_register(RF_SETUP);
		 //UART_Print_Num(status1);
		while(radio.available(&pipenum))
	//	if (radio.available())
		 {
			 char text[32] = "";
     442:	0f 2e       	mov	r0, r31
     444:	fe e1       	ldi	r31, 0x1E	; 30
     446:	ff 2e       	mov	r15, r31
     448:	f0 2d       	mov	r31, r0
     44a:	8e 01       	movw	r16, r28
     44c:	0d 5f       	subi	r16, 0xFD	; 253
     44e:	1f 4f       	sbci	r17, 0xFF	; 255
		//UART_Print_Num(status1);
	while (1)
	{  
		// status1 = radio.read_register(NRF_STATUS);
		//UART_Print_Num(status1);
		 unsigned char pipenum = 0;
     450:	19 a2       	std	Y+33, r1	; 0x21
		// UART_Printfln("JUST TESt");
	  // code for receiver		
			
		//status1= radio.read_register(RF_SETUP);
		 //UART_Print_Num(status1);
		while(radio.available(&pipenum))
     452:	be 01       	movw	r22, r28
     454:	6f 5d       	subi	r22, 0xDF	; 223
     456:	7f 4f       	sbci	r23, 0xFF	; 255
     458:	85 e4       	ldi	r24, 0x45	; 69
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN4RF249availableEPh>
     460:	88 23       	and	r24, r24
     462:	b1 f3       	breq	.-20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	//	if (radio.available())
		 {
			 char text[32] = "";
     464:	1a 82       	std	Y+2, r1	; 0x02
     466:	19 82       	std	Y+1, r1	; 0x01
     468:	f8 01       	movw	r30, r16
     46a:	8f 2d       	mov	r24, r15
     46c:	11 92       	st	Z+, r1
     46e:	8a 95       	dec	r24
     470:	e9 f7       	brne	.-6      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			 radio.read(&text, sizeof(text));
     472:	40 e2       	ldi	r20, 0x20	; 32
     474:	be 01       	movw	r22, r28
     476:	6f 5f       	subi	r22, 0xFF	; 255
     478:	7f 4f       	sbci	r23, 0xFF	; 255
     47a:	85 e4       	ldi	r24, 0x45	; 69
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN4RF244readEPvh>
			 UART_Printfln(text);
     482:	ce 01       	movw	r24, r28
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	0e 94 82 00 	call	0x104	; 0x104 <UART_Printfln>
			 UART_Printf("Packet count:");
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 9b 00 	call	0x136	; 0x136 <UART_Printf>
			 UART_Print_Num(count);
     492:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 b1 00 	call	0x162	; 0x162 <UART_Print_Num>
			 UART_Printf("Pipe Number:");
     49c:	8f e0       	ldi	r24, 0x0F	; 15
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	0e 94 9b 00 	call	0x136	; 0x136 <UART_Printf>
			 UART_Print_Num(pipenum);
     4a4:	89 a1       	ldd	r24, Y+33	; 0x21
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 b1 00 	call	0x162	; 0x162 <UART_Print_Num>
			 count++;
     4ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4b0:	8f 5f       	subi	r24, 0xFF	; 255
     4b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			 p=radio.getPALevel();
     4b6:	85 e4       	ldi	r24, 0x45	; 69
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN4RF2410getPALevelEv>
     4be:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <p>
			 UART_Printf("Power Level:");
     4c2:	8c e1       	ldi	r24, 0x1C	; 28
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 9b 00 	call	0x136	; 0x136 <UART_Printf>
			 UART_Print_Num(p);
     4ca:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <p>
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 b1 00 	call	0x162	; 0x162 <UART_Print_Num>
		// UART_Printfln("JUST TESt");
	  // code for receiver		
			
		//status1= radio.read_register(RF_SETUP);
		 //UART_Print_Num(status1);
		while(radio.available(&pipenum))
     4d4:	be cf       	rjmp	.-132    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>

000004d6 <_GLOBAL__sub_I_radio>:
 * Created: 12-06-2018 13:57:12
 * Author : sachin mahadevjadhav
 */ 
#include <avr/io.h>
#include "RF24.h"
RF24 radio(9, 10); // CE, CSN
     4d6:	4a e0       	ldi	r20, 0x0A	; 10
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	69 e0       	ldi	r22, 0x09	; 9
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	85 e4       	ldi	r24, 0x45	; 69
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN4RF24C1Ejj>
     4e6:	08 95       	ret

000004e8 <_ZN4RF243csnEb>:
/****************************************************************************/

bool RF24::testRPD(void)
{
  return ( read_register(RPD) & 1 ) ;
}
     4e8:	4f 92       	push	r4
     4ea:	5f 92       	push	r5
     4ec:	6f 92       	push	r6
     4ee:	7f 92       	push	r7
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	ec 01       	movw	r28, r24
     508:	8a 81       	ldd	r24, Y+2	; 0x02
     50a:	9b 81       	ldd	r25, Y+3	; 0x03
     50c:	0e 94 a1 01 	call	0x342	; 0x342 <Write_Digital>
     510:	6c 89       	ldd	r22, Y+20	; 0x14
     512:	7d 89       	ldd	r23, Y+21	; 0x15
     514:	8e 89       	ldd	r24, Y+22	; 0x16
     516:	9f 89       	ldd	r25, Y+23	; 0x17
     518:	0e 94 45 07 	call	0xe8a	; 0xe8a <__floatunsisf>
     51c:	6b 01       	movw	r12, r22
     51e:	7c 01       	movw	r14, r24
     520:	2b ea       	ldi	r18, 0xAB	; 171
     522:	3a ea       	ldi	r19, 0xAA	; 170
     524:	4a e2       	ldi	r20, 0x2A	; 42
     526:	50 e4       	ldi	r21, 0x40	; 64
     528:	0e 94 fc 07 	call	0xff8	; 0xff8 <__mulsf3>
     52c:	4b 01       	movw	r8, r22
     52e:	5c 01       	movw	r10, r24
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	40 e8       	ldi	r20, 0x80	; 128
     536:	5f e3       	ldi	r21, 0x3F	; 63
     538:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__cmpsf2>
     53c:	88 23       	and	r24, r24
     53e:	0c f4       	brge	.+2      	; 0x542 <_ZN4RF243csnEb+0x5a>
     540:	6e c0       	rjmp	.+220    	; 0x61e <_ZN4RF243csnEb+0x136>
     542:	a7 01       	movw	r20, r14
     544:	96 01       	movw	r18, r12
     546:	c7 01       	movw	r24, r14
     548:	b6 01       	movw	r22, r12
     54a:	0e 94 33 06 	call	0xc66	; 0xc66 <__addsf3>
     54e:	2b 01       	movw	r4, r22
     550:	3c 01       	movw	r6, r24
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	3f ef       	ldi	r19, 0xFF	; 255
     556:	4f e7       	ldi	r20, 0x7F	; 127
     558:	57 e4       	ldi	r21, 0x47	; 71
     55a:	0e 94 f7 07 	call	0xfee	; 0xfee <__gesf2>
     55e:	18 16       	cp	r1, r24
     560:	0c f0       	brlt	.+2      	; 0x564 <_ZN4RF243csnEb+0x7c>
     562:	45 c0       	rjmp	.+138    	; 0x5ee <_ZN4RF243csnEb+0x106>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	4a e7       	ldi	r20, 0x7A	; 122
     56a:	54 e4       	ldi	r21, 0x44	; 68
     56c:	c7 01       	movw	r24, r14
     56e:	b6 01       	movw	r22, r12
     570:	0e 94 a4 06 	call	0xd48	; 0xd48 <__divsf3>
     574:	4b 01       	movw	r8, r22
     576:	5c 01       	movw	r10, r24
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	4a ef       	ldi	r20, 0xFA	; 250
     57e:	54 e4       	ldi	r21, 0x44	; 68
     580:	0e 94 fc 07 	call	0xff8	; 0xff8 <__mulsf3>
     584:	6b 01       	movw	r12, r22
     586:	7c 01       	movw	r14, r24
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e8       	ldi	r20, 0x80	; 128
     58e:	5f e3       	ldi	r21, 0x3F	; 63
     590:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__cmpsf2>
     594:	88 23       	and	r24, r24
     596:	2c f1       	brlt	.+74     	; 0x5e2 <_ZN4RF243csnEb+0xfa>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	3f ef       	ldi	r19, 0xFF	; 255
     59c:	4f e7       	ldi	r20, 0x7F	; 127
     59e:	57 e4       	ldi	r21, 0x47	; 71
     5a0:	c7 01       	movw	r24, r14
     5a2:	b6 01       	movw	r22, r12
     5a4:	0e 94 f7 07 	call	0xfee	; 0xfee <__gesf2>
     5a8:	18 16       	cp	r1, r24
     5aa:	b4 f4       	brge	.+44     	; 0x5d8 <_ZN4RF243csnEb+0xf0>
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	40 e2       	ldi	r20, 0x20	; 32
     5b2:	51 e4       	ldi	r21, 0x41	; 65
     5b4:	c5 01       	movw	r24, r10
     5b6:	b4 01       	movw	r22, r8
     5b8:	0e 94 fc 07 	call	0xff8	; 0xff8 <__mulsf3>
     5bc:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fixunssfsi>
     5c0:	61 15       	cp	r22, r1
     5c2:	71 05       	cpc	r23, r1
     5c4:	69 f1       	breq	.+90     	; 0x620 <_ZN4RF243csnEb+0x138>
     5c6:	28 ec       	ldi	r18, 0xC8	; 200
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	c9 01       	movw	r24, r18
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <_ZN4RF243csnEb+0xe4>
     5d0:	61 50       	subi	r22, 0x01	; 1
     5d2:	71 09       	sbc	r23, r1
     5d4:	d1 f7       	brne	.-12     	; 0x5ca <_ZN4RF243csnEb+0xe2>
     5d6:	24 c0       	rjmp	.+72     	; 0x620 <_ZN4RF243csnEb+0x138>
     5d8:	c7 01       	movw	r24, r14
     5da:	b6 01       	movw	r22, r12
     5dc:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fixunssfsi>
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <_ZN4RF243csnEb+0xfe>
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	cb 01       	movw	r24, r22
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <_ZN4RF243csnEb+0x100>
     5ec:	19 c0       	rjmp	.+50     	; 0x620 <_ZN4RF243csnEb+0x138>
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	4f e7       	ldi	r20, 0x7F	; 127
     5f4:	53 e4       	ldi	r21, 0x43	; 67
     5f6:	c5 01       	movw	r24, r10
     5f8:	b4 01       	movw	r22, r8
     5fa:	0e 94 f7 07 	call	0xfee	; 0xfee <__gesf2>
     5fe:	18 16       	cp	r1, r24
     600:	44 f4       	brge	.+16     	; 0x612 <_ZN4RF243csnEb+0x12a>
     602:	c3 01       	movw	r24, r6
     604:	b2 01       	movw	r22, r4
     606:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fixunssfsi>
     60a:	cb 01       	movw	r24, r22
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <_ZN4RF243csnEb+0x124>
     610:	0a c0       	rjmp	.+20     	; 0x626 <_ZN4RF243csnEb+0x13e>
     612:	c5 01       	movw	r24, r10
     614:	b4 01       	movw	r22, r8
     616:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fixunssfsi>
     61a:	16 2f       	mov	r17, r22
     61c:	01 c0       	rjmp	.+2      	; 0x620 <_ZN4RF243csnEb+0x138>
     61e:	11 e0       	ldi	r17, 0x01	; 1
     620:	61 2f       	mov	r22, r17
     622:	6a 95       	dec	r22
     624:	f1 f7       	brne	.-4      	; 0x622 <_ZN4RF243csnEb+0x13a>
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	bf 90       	pop	r11
     636:	af 90       	pop	r10
     638:	9f 90       	pop	r9
     63a:	8f 90       	pop	r8
     63c:	7f 90       	pop	r7
     63e:	6f 90       	pop	r6
     640:	5f 90       	pop	r5
     642:	4f 90       	pop	r4
     644:	08 95       	ret

00000646 <_ZN4RF242ceEb>:
     646:	fc 01       	movw	r30, r24
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	22 81       	ldd	r18, Z+2	; 0x02
     64e:	33 81       	ldd	r19, Z+3	; 0x03
     650:	82 17       	cp	r24, r18
     652:	93 07       	cpc	r25, r19
     654:	11 f0       	breq	.+4      	; 0x65a <_ZN4RF242ceEb+0x14>
     656:	0e 94 a1 01 	call	0x342	; 0x342 <Write_Digital>
     65a:	84 e0       	ldi	r24, 0x04	; 4
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <_ZN4RF242ceEb+0x18>
     662:	08 95       	ret

00000664 <_ZN4RF2413read_registerEh>:
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	8c 01       	movw	r16, r24
     66c:	c6 2f       	mov	r28, r22
     66e:	80 e5       	ldi	r24, 0x50	; 80
     670:	8c bd       	out	0x2c, r24	; 44
     672:	1d bc       	out	0x2d, r1	; 45
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	c8 01       	movw	r24, r16
     678:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF243csnEb>
     67c:	cf 71       	andi	r28, 0x1F	; 31
     67e:	ce bd       	out	0x2e, r28	; 46
     680:	00 00       	nop
     682:	0d b4       	in	r0, 0x2d	; 45
     684:	07 fe       	sbrs	r0, 7
     686:	fd cf       	rjmp	.-6      	; 0x682 <_ZN4RF2413read_registerEh+0x1e>
     688:	8e b5       	in	r24, 0x2e	; 46
     68a:	8f ef       	ldi	r24, 0xFF	; 255
     68c:	8e bd       	out	0x2e, r24	; 46
     68e:	00 00       	nop
     690:	0d b4       	in	r0, 0x2d	; 45
     692:	07 fe       	sbrs	r0, 7
     694:	fd cf       	rjmp	.-6      	; 0x690 <_ZN4RF2413read_registerEh+0x2c>
     696:	ce b5       	in	r28, 0x2e	; 46
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	c8 01       	movw	r24, r16
     69c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF243csnEb>
     6a0:	8c 2f       	mov	r24, r28
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	08 95       	ret

000006aa <_ZN4RF2414write_registerEhPKhh>:
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	8c 01       	movw	r16, r24
     6b8:	c6 2f       	mov	r28, r22
     6ba:	e4 2e       	mov	r14, r20
     6bc:	f5 2e       	mov	r15, r21
     6be:	d2 2f       	mov	r29, r18
     6c0:	80 e5       	ldi	r24, 0x50	; 80
     6c2:	8c bd       	out	0x2c, r24	; 44
     6c4:	1d bc       	out	0x2d, r1	; 45
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	c8 01       	movw	r24, r16
     6ca:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF243csnEb>
     6ce:	cf 71       	andi	r28, 0x1F	; 31
     6d0:	c0 62       	ori	r28, 0x20	; 32
     6d2:	ce bd       	out	0x2e, r28	; 46
     6d4:	00 00       	nop
     6d6:	0d b4       	in	r0, 0x2d	; 45
     6d8:	07 fe       	sbrs	r0, 7
     6da:	fd cf       	rjmp	.-6      	; 0x6d6 <_ZN4RF2414write_registerEhPKhh+0x2c>
     6dc:	ce b5       	in	r28, 0x2e	; 46
     6de:	8f ef       	ldi	r24, 0xFF	; 255
     6e0:	8d 0f       	add	r24, r29
     6e2:	dd 23       	and	r29, r29
     6e4:	59 f0       	breq	.+22     	; 0x6fc <_ZN4RF2414write_registerEhPKhh+0x52>
     6e6:	ee 2d       	mov	r30, r14
     6e8:	ff 2d       	mov	r31, r15
     6ea:	91 91       	ld	r25, Z+
     6ec:	9e bd       	out	0x2e, r25	; 46
     6ee:	00 00       	nop
     6f0:	0d b4       	in	r0, 0x2d	; 45
     6f2:	07 fe       	sbrs	r0, 7
     6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <_ZN4RF2414write_registerEhPKhh+0x46>
     6f6:	9e b5       	in	r25, 0x2e	; 46
     6f8:	81 50       	subi	r24, 0x01	; 1
     6fa:	b8 f7       	brcc	.-18     	; 0x6ea <_ZN4RF2414write_registerEhPKhh+0x40>
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	c8 01       	movw	r24, r16
     700:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF243csnEb>
     704:	8c 2f       	mov	r24, r28
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	08 95       	ret

00000714 <_ZN4RF2414write_registerEhh>:
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	8c 01       	movw	r16, r24
     71e:	c6 2f       	mov	r28, r22
     720:	d4 2f       	mov	r29, r20
     722:	80 e5       	ldi	r24, 0x50	; 80
     724:	8c bd       	out	0x2c, r24	; 44
     726:	1d bc       	out	0x2d, r1	; 45
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	c8 01       	movw	r24, r16
     72c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF243csnEb>
     730:	cf 71       	andi	r28, 0x1F	; 31
     732:	c0 62       	ori	r28, 0x20	; 32
     734:	ce bd       	out	0x2e, r28	; 46
     736:	00 00       	nop
     738:	0d b4       	in	r0, 0x2d	; 45
     73a:	07 fe       	sbrs	r0, 7
     73c:	fd cf       	rjmp	.-6      	; 0x738 <_ZN4RF2414write_registerEhh+0x24>
     73e:	ce b5       	in	r28, 0x2e	; 46
     740:	de bd       	out	0x2e, r29	; 46
     742:	00 00       	nop
     744:	0d b4       	in	r0, 0x2d	; 45
     746:	07 fe       	sbrs	r0, 7
     748:	fd cf       	rjmp	.-6      	; 0x744 <_ZN4RF2414write_registerEhh+0x30>
     74a:	8e b5       	in	r24, 0x2e	; 46
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	c8 01       	movw	r24, r16
     750:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF243csnEb>
     754:	8c 2f       	mov	r24, r28
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	08 95       	ret

00000760 <_ZN4RF2412read_payloadEPvh>:
     760:	df 92       	push	r13
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	ec 01       	movw	r28, r24
     770:	d6 2e       	mov	r13, r22
     772:	e7 2e       	mov	r14, r23
     774:	8f 81       	ldd	r24, Y+7	; 0x07
     776:	08 2f       	mov	r16, r24
     778:	48 17       	cp	r20, r24
     77a:	08 f4       	brcc	.+2      	; 0x77e <_ZN4RF2412read_payloadEPvh+0x1e>
     77c:	04 2f       	mov	r16, r20
     77e:	98 85       	ldd	r25, Y+8	; 0x08
     780:	91 11       	cpse	r25, r1
     782:	03 c0       	rjmp	.+6      	; 0x78a <_ZN4RF2412read_payloadEPvh+0x2a>
     784:	18 2f       	mov	r17, r24
     786:	10 1b       	sub	r17, r16
     788:	01 c0       	rjmp	.+2      	; 0x78c <_ZN4RF2412read_payloadEPvh+0x2c>
     78a:	10 e0       	ldi	r17, 0x00	; 0
     78c:	80 e5       	ldi	r24, 0x50	; 80
     78e:	8c bd       	out	0x2c, r24	; 44
     790:	1d bc       	out	0x2d, r1	; 45
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	ce 01       	movw	r24, r28
     796:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF243csnEb>
     79a:	81 e6       	ldi	r24, 0x61	; 97
     79c:	8e bd       	out	0x2e, r24	; 46
     79e:	00 00       	nop
     7a0:	0d b4       	in	r0, 0x2d	; 45
     7a2:	07 fe       	sbrs	r0, 7
     7a4:	fd cf       	rjmp	.-6      	; 0x7a0 <_ZN4RF2412read_payloadEPvh+0x40>
     7a6:	fe b4       	in	r15, 0x2e	; 46
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	80 0f       	add	r24, r16
     7ac:	01 11       	cpse	r16, r1
     7ae:	05 c0       	rjmp	.+10     	; 0x7ba <_ZN4RF2412read_payloadEPvh+0x5a>
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	81 0f       	add	r24, r17
     7b4:	11 11       	cpse	r17, r1
     7b6:	0e c0       	rjmp	.+28     	; 0x7d4 <_ZN4RF2412read_payloadEPvh+0x74>
     7b8:	16 c0       	rjmp	.+44     	; 0x7e6 <_ZN4RF2412read_payloadEPvh+0x86>
     7ba:	ed 2d       	mov	r30, r13
     7bc:	fe 2d       	mov	r31, r14
     7be:	2f ef       	ldi	r18, 0xFF	; 255
     7c0:	2e bd       	out	0x2e, r18	; 46
     7c2:	00 00       	nop
     7c4:	0d b4       	in	r0, 0x2d	; 45
     7c6:	07 fe       	sbrs	r0, 7
     7c8:	fd cf       	rjmp	.-6      	; 0x7c4 <_ZN4RF2412read_payloadEPvh+0x64>
     7ca:	9e b5       	in	r25, 0x2e	; 46
     7cc:	91 93       	st	Z+, r25
     7ce:	81 50       	subi	r24, 0x01	; 1
     7d0:	b8 f7       	brcc	.-18     	; 0x7c0 <_ZN4RF2412read_payloadEPvh+0x60>
     7d2:	ee cf       	rjmp	.-36     	; 0x7b0 <_ZN4RF2412read_payloadEPvh+0x50>
     7d4:	9f ef       	ldi	r25, 0xFF	; 255
     7d6:	9e bd       	out	0x2e, r25	; 46
     7d8:	00 00       	nop
     7da:	0d b4       	in	r0, 0x2d	; 45
     7dc:	07 fe       	sbrs	r0, 7
     7de:	fd cf       	rjmp	.-6      	; 0x7da <_ZN4RF2412read_payloadEPvh+0x7a>
     7e0:	2e b5       	in	r18, 0x2e	; 46
     7e2:	81 50       	subi	r24, 0x01	; 1
     7e4:	c0 f7       	brcc	.-16     	; 0x7d6 <_ZN4RF2412read_payloadEPvh+0x76>
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	ce 01       	movw	r24, r28
     7ea:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF243csnEb>
     7ee:	8f 2d       	mov	r24, r15
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	08 95       	ret

00000800 <_ZN4RF248spiTransEh>:
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	ec 01       	movw	r28, r24
     808:	16 2f       	mov	r17, r22
     80a:	80 e5       	ldi	r24, 0x50	; 80
     80c:	8c bd       	out	0x2c, r24	; 44
     80e:	1d bc       	out	0x2d, r1	; 45
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	ce 01       	movw	r24, r28
     814:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF243csnEb>
     818:	1e bd       	out	0x2e, r17	; 46
     81a:	00 00       	nop
     81c:	0d b4       	in	r0, 0x2d	; 45
     81e:	07 fe       	sbrs	r0, 7
     820:	fd cf       	rjmp	.-6      	; 0x81c <_ZN4RF248spiTransEh+0x1c>
     822:	1e b5       	in	r17, 0x2e	; 46
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	ce 01       	movw	r24, r28
     828:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF243csnEb>
     82c:	81 2f       	mov	r24, r17
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	08 95       	ret

00000836 <_ZN4RF248flush_rxEv>:
     836:	62 ee       	ldi	r22, 0xE2	; 226
     838:	0e 94 00 04 	call	0x800	; 0x800 <_ZN4RF248spiTransEh>
     83c:	08 95       	ret

0000083e <_ZN4RF248flush_txEv>:
     83e:	61 ee       	ldi	r22, 0xE1	; 225
     840:	0e 94 00 04 	call	0x800	; 0x800 <_ZN4RF248spiTransEh>
     844:	08 95       	ret

00000846 <_ZN4RF2410get_statusEv>:
     846:	6f ef       	ldi	r22, 0xFF	; 255
     848:	0e 94 00 04 	call	0x800	; 0x800 <_ZN4RF248spiTransEh>
     84c:	08 95       	ret

0000084e <_ZN4RF24C1Ejj>:
     84e:	fc 01       	movw	r30, r24
     850:	71 83       	std	Z+1, r23	; 0x01
     852:	60 83       	st	Z, r22
     854:	53 83       	std	Z+3, r21	; 0x03
     856:	42 83       	std	Z+2, r20	; 0x02
     858:	16 82       	std	Z+6, r1	; 0x06
     85a:	80 e2       	ldi	r24, 0x20	; 32
     85c:	87 83       	std	Z+7, r24	; 0x07
     85e:	10 86       	std	Z+8, r1	; 0x08
     860:	85 e0       	ldi	r24, 0x05	; 5
     862:	86 87       	std	Z+14, r24	; 0x0e
     864:	85 e0       	ldi	r24, 0x05	; 5
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	84 8b       	std	Z+20, r24	; 0x14
     86e:	95 8b       	std	Z+21, r25	; 0x15
     870:	a6 8b       	std	Z+22, r26	; 0x16
     872:	b7 8b       	std	Z+23, r27	; 0x17
     874:	11 86       	std	Z+9, r1	; 0x09
     876:	08 95       	ret

00000878 <_ZN4RF2410setChannelEh>:
     878:	6d 37       	cpi	r22, 0x7D	; 125
     87a:	10 f4       	brcc	.+4      	; 0x880 <_ZN4RF2410setChannelEh+0x8>
     87c:	46 2f       	mov	r20, r22
     87e:	01 c0       	rjmp	.+2      	; 0x882 <_ZN4RF2410setChannelEh+0xa>
     880:	4d e7       	ldi	r20, 0x7D	; 125
     882:	65 e0       	ldi	r22, 0x05	; 5
     884:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>
     888:	08 95       	ret

0000088a <_ZN4RF247powerUpEv>:
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	ec 01       	movw	r28, r24
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	0e 94 32 03 	call	0x664	; 0x664 <_ZN4RF2413read_registerEh>
     896:	81 fd       	sbrc	r24, 1
     898:	0a c0       	rjmp	.+20     	; 0x8ae <_ZN4RF247powerUpEv+0x24>
     89a:	48 2f       	mov	r20, r24
     89c:	42 60       	ori	r20, 0x02	; 2
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	ce 01       	movw	r24, r28
     8a2:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>
     8a6:	80 e1       	ldi	r24, 0x10	; 16
     8a8:	97 e2       	ldi	r25, 0x27	; 39
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <_ZN4RF247powerUpEv+0x20>
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <_ZN4RF249availableEPh>:
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24
     8be:	8b 01       	movw	r16, r22
     8c0:	67 e1       	ldi	r22, 0x17	; 23
     8c2:	0e 94 32 03 	call	0x664	; 0x664 <_ZN4RF2413read_registerEh>
     8c6:	80 fd       	sbrc	r24, 0
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <_ZN4RF249availableEPh+0x32>
     8ca:	01 15       	cp	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	69 f0       	breq	.+26     	; 0x8ea <_ZN4RF249availableEPh+0x36>
     8d0:	ce 01       	movw	r24, r28
     8d2:	0e 94 23 04 	call	0x846	; 0x846 <_ZN4RF2410get_statusEv>
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	95 95       	asr	r25
     8da:	87 95       	ror	r24
     8dc:	87 70       	andi	r24, 0x07	; 7
     8de:	f8 01       	movw	r30, r16
     8e0:	80 83       	st	Z, r24
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <_ZN4RF249availableEPh+0x38>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <_ZN4RF249availableEPh+0x38>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	08 95       	ret

000008f6 <_ZN4RF244readEPvh>:
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	ec 01       	movw	r28, r24
     8fc:	0e 94 b0 03 	call	0x760	; 0x760 <_ZN4RF2412read_payloadEPvh>
     900:	40 e7       	ldi	r20, 0x70	; 112
     902:	67 e0       	ldi	r22, 0x07	; 7
     904:	ce 01       	movw	r24, r28
     906:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <_ZN4RF2415openReadingPipeEhPKh>:
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	8c 01       	movw	r16, r24
     91e:	c6 2f       	mov	r28, r22
     920:	7a 01       	movw	r14, r20
     922:	61 11       	cpse	r22, r1
     924:	08 c0       	rjmp	.+16     	; 0x936 <_ZN4RF2415openReadingPipeEhPKh+0x26>
     926:	fc 01       	movw	r30, r24
     928:	46 85       	ldd	r20, Z+14	; 0x0e
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	b7 01       	movw	r22, r14
     92e:	09 96       	adiw	r24, 0x09	; 9
     930:	0e 94 7e 08 	call	0x10fc	; 0x10fc <memcpy>
     934:	05 c0       	rjmp	.+10     	; 0x940 <_ZN4RF2415openReadingPipeEhPKh+0x30>
     936:	67 30       	cpi	r22, 0x07	; 7
     938:	08 f0       	brcs	.+2      	; 0x93c <_ZN4RF2415openReadingPipeEhPKh+0x2c>
     93a:	34 c0       	rjmp	.+104    	; 0x9a4 <_ZN4RF2415openReadingPipeEhPKh+0x94>
     93c:	62 30       	cpi	r22, 0x02	; 2
     93e:	60 f4       	brcc	.+24     	; 0x958 <_ZN4RF2415openReadingPipeEhPKh+0x48>
     940:	ec 2f       	mov	r30, r28
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	eb 5c       	subi	r30, 0xCB	; 203
     946:	fe 4f       	sbci	r31, 0xFE	; 254
     948:	64 91       	lpm	r22, Z
     94a:	f8 01       	movw	r30, r16
     94c:	26 85       	ldd	r18, Z+14	; 0x0e
     94e:	a7 01       	movw	r20, r14
     950:	c8 01       	movw	r24, r16
     952:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN4RF2414write_registerEhPKhh>
     956:	08 c0       	rjmp	.+16     	; 0x968 <_ZN4RF2415openReadingPipeEhPKh+0x58>
     958:	e6 2f       	mov	r30, r22
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	eb 5c       	subi	r30, 0xCB	; 203
     95e:	fe 4f       	sbci	r31, 0xFE	; 254
     960:	64 91       	lpm	r22, Z
     962:	21 e0       	ldi	r18, 0x01	; 1
     964:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN4RF2414write_registerEhPKhh>
     968:	d0 e0       	ldi	r29, 0x00	; 0
     96a:	fe 01       	movw	r30, r28
     96c:	e1 5d       	subi	r30, 0xD1	; 209
     96e:	fe 4f       	sbci	r31, 0xFE	; 254
     970:	64 91       	lpm	r22, Z
     972:	f8 01       	movw	r30, r16
     974:	47 81       	ldd	r20, Z+7	; 0x07
     976:	c8 01       	movw	r24, r16
     978:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>
     97c:	62 e0       	ldi	r22, 0x02	; 2
     97e:	c8 01       	movw	r24, r16
     980:	0e 94 32 03 	call	0x664	; 0x664 <_ZN4RF2413read_registerEh>
     984:	fe 01       	movw	r30, r28
     986:	e5 5c       	subi	r30, 0xC5	; 197
     988:	fe 4f       	sbci	r31, 0xFE	; 254
     98a:	e4 91       	lpm	r30, Z
     98c:	41 e0       	ldi	r20, 0x01	; 1
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	02 c0       	rjmp	.+4      	; 0x996 <_ZN4RF2415openReadingPipeEhPKh+0x86>
     992:	44 0f       	add	r20, r20
     994:	55 1f       	adc	r21, r21
     996:	ea 95       	dec	r30
     998:	e2 f7       	brpl	.-8      	; 0x992 <_ZN4RF2415openReadingPipeEhPKh+0x82>
     99a:	48 2b       	or	r20, r24
     99c:	62 e0       	ldi	r22, 0x02	; 2
     99e:	c8 01       	movw	r24, r16
     9a0:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	08 95       	ret

000009b2 <_ZN4RF2416closeReadingPipeEh>:
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	8c 01       	movw	r16, r24
     9ba:	c6 2f       	mov	r28, r22
     9bc:	62 e0       	ldi	r22, 0x02	; 2
     9be:	0e 94 32 03 	call	0x664	; 0x664 <_ZN4RF2413read_registerEh>
     9c2:	ec 2f       	mov	r30, r28
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	e5 5c       	subi	r30, 0xC5	; 197
     9c8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ca:	e4 91       	lpm	r30, Z
     9cc:	21 e0       	ldi	r18, 0x01	; 1
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <_ZN4RF2416closeReadingPipeEh+0x24>
     9d2:	22 0f       	add	r18, r18
     9d4:	33 1f       	adc	r19, r19
     9d6:	ea 95       	dec	r30
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <_ZN4RF2416closeReadingPipeEh+0x20>
     9da:	20 95       	com	r18
     9dc:	42 2f       	mov	r20, r18
     9de:	48 23       	and	r20, r24
     9e0:	62 e0       	ldi	r22, 0x02	; 2
     9e2:	c8 01       	movw	r24, r16
     9e4:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	08 95       	ret

000009f0 <_ZN4RF2414startListeningEv>:
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	ec 01       	movw	r28, r24
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	0e 94 32 03 	call	0x664	; 0x664 <_ZN4RF2413read_registerEh>
     9fc:	48 2f       	mov	r20, r24
     9fe:	41 60       	ori	r20, 0x01	; 1
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	ce 01       	movw	r24, r28
     a04:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>
     a08:	40 e7       	ldi	r20, 0x70	; 112
     a0a:	67 e0       	ldi	r22, 0x07	; 7
     a0c:	ce 01       	movw	r24, r28
     a0e:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	ce 01       	movw	r24, r28
     a16:	0e 94 23 03 	call	0x646	; 0x646 <_ZN4RF242ceEb>
     a1a:	89 85       	ldd	r24, Y+9	; 0x09
     a1c:	88 23       	and	r24, r24
     a1e:	49 f0       	breq	.+18     	; 0xa32 <_ZN4RF2414startListeningEv+0x42>
     a20:	2e 85       	ldd	r18, Y+14	; 0x0e
     a22:	ae 01       	movw	r20, r28
     a24:	47 5f       	subi	r20, 0xF7	; 247
     a26:	5f 4f       	sbci	r21, 0xFF	; 255
     a28:	6a e0       	ldi	r22, 0x0A	; 10
     a2a:	ce 01       	movw	r24, r28
     a2c:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN4RF2414write_registerEhPKhh>
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <_ZN4RF2414startListeningEv+0x4a>
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	ce 01       	movw	r24, r28
     a36:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_ZN4RF2416closeReadingPipeEh>
     a3a:	6d e1       	ldi	r22, 0x1D	; 29
     a3c:	ce 01       	movw	r24, r28
     a3e:	0e 94 32 03 	call	0x664	; 0x664 <_ZN4RF2413read_registerEh>
     a42:	81 ff       	sbrs	r24, 1
     a44:	03 c0       	rjmp	.+6      	; 0xa4c <_ZN4RF2414startListeningEv+0x5c>
     a46:	ce 01       	movw	r24, r28
     a48:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN4RF248flush_txEv>
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <_ZN4RF2415toggle_featuresEv>:
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	ec 01       	movw	r28, r24
     a5a:	10 e5       	ldi	r17, 0x50	; 80
     a5c:	1c bd       	out	0x2c, r17	; 44
     a5e:	1d bc       	out	0x2d, r1	; 45
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF243csnEb>
     a66:	1e bd       	out	0x2e, r17	; 46
     a68:	00 00       	nop
     a6a:	0d b4       	in	r0, 0x2d	; 45
     a6c:	07 fe       	sbrs	r0, 7
     a6e:	fd cf       	rjmp	.-6      	; 0xa6a <_ZN4RF2415toggle_featuresEv+0x18>
     a70:	8e b5       	in	r24, 0x2e	; 46
     a72:	83 e7       	ldi	r24, 0x73	; 115
     a74:	8e bd       	out	0x2e, r24	; 46
     a76:	00 00       	nop
     a78:	0d b4       	in	r0, 0x2d	; 45
     a7a:	07 fe       	sbrs	r0, 7
     a7c:	fd cf       	rjmp	.-6      	; 0xa78 <_ZN4RF2415toggle_featuresEv+0x26>
     a7e:	8e b5       	in	r24, 0x2e	; 46
     a80:	61 e0       	ldi	r22, 0x01	; 1
     a82:	ce 01       	movw	r24, r28
     a84:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF243csnEb>
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	08 95       	ret

00000a90 <_ZN4RF2410setPALevelEh>:

/****************************************************************************/

void RF24::setPALevel(uint8_t level)
{
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	8c 01       	movw	r16, r24
     a98:	c6 2f       	mov	r28, r22

  uint8_t setup = read_register(RF_SETUP) & 0xF8;
     a9a:	66 e0       	ldi	r22, 0x06	; 6
     a9c:	0e 94 32 03 	call	0x664	; 0x664 <_ZN4RF2413read_registerEh>
     aa0:	88 7f       	andi	r24, 0xF8	; 248

  if(level > 3){  						// If invalid level, go to max PA
     aa2:	c4 30       	cpi	r28, 0x04	; 4
     aa4:	18 f4       	brcc	.+6      	; 0xaac <_ZN4RF2410setPALevelEh+0x1c>
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
     aa6:	cc 0f       	add	r28, r28
     aa8:	cf 5f       	subi	r28, 0xFF	; 255
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <_ZN4RF2410setPALevelEh+0x1e>
{

  uint8_t setup = read_register(RF_SETUP) & 0xF8;

  if(level > 3){  						// If invalid level, go to max PA
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
     aac:	c7 e0       	ldi	r28, 0x07	; 7
  }else{
	  level = (level << 1) + 1;	 		// Else set level as requested
  }


  write_register( RF_SETUP, setup |= level ) ;	// Write it to the chip
     aae:	4c 2f       	mov	r20, r28
     ab0:	48 2b       	or	r20, r24
     ab2:	66 e0       	ldi	r22, 0x06	; 6
     ab4:	c8 01       	movw	r24, r16
     ab6:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>
}
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	08 95       	ret

00000ac2 <_ZN4RF2410getPALevelEv>:
/****************************************************************************/

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
     ac2:	66 e0       	ldi	r22, 0x06	; 6
     ac4:	0e 94 32 03 	call	0x664	; 0x664 <_ZN4RF2413read_registerEh>
     ac8:	86 70       	andi	r24, 0x06	; 6
}
     aca:	86 95       	lsr	r24
     acc:	08 95       	ret

00000ace <_ZN4RF2411setDataRateE15rf24_datarate_e>:

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	ec 01       	movw	r28, r24
     ad8:	06 2f       	mov	r16, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     ada:	66 e0       	ldi	r22, 0x06	; 6
     adc:	0e 94 32 03 	call	0x664	; 0x664 <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     ae0:	18 2f       	mov	r17, r24
     ae2:	17 7d       	andi	r17, 0xD7	; 215
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
  //#endif
  if( speed == RF24_250KBPS )
     ae4:	02 30       	cpi	r16, 0x02	; 2
     ae6:	51 f4       	brne	.+20     	; 0xafc <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2e>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
     ae8:	10 62       	ori	r17, 0x20	; 32
 /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=450;
  #else //16Mhz Arduino*/
	txDelay=155;
     aea:	8b e9       	ldi	r24, 0x9B	; 155
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	a0 e0       	ldi	r26, 0x00	; 0
     af0:	b0 e0       	ldi	r27, 0x00	; 0
     af2:	88 8b       	std	Y+16, r24	; 0x10
     af4:	99 8b       	std	Y+17, r25	; 0x11
     af6:	aa 8b       	std	Y+18, r26	; 0x12
     af8:	bb 8b       	std	Y+19, r27	; 0x13
     afa:	14 c0       	rjmp	.+40     	; 0xb24 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     afc:	01 30       	cpi	r16, 0x01	; 1
     afe:	49 f0       	breq	.+18     	; 0xb12 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
/*  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
     b00:	85 e5       	ldi	r24, 0x55	; 85
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	88 8b       	std	Y+16, r24	; 0x10
     b0a:	99 8b       	std	Y+17, r25	; 0x11
     b0c:	aa 8b       	std	Y+18, r26	; 0x12
     b0e:	bb 8b       	std	Y+19, r27	; 0x13
     b10:	09 c0       	rjmp	.+18     	; 0xb24 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
     b12:	18 60       	ori	r17, 0x08	; 8
     /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txDelay=190;
      #else //16Mhz Arduino	*/  
	 txDelay=65;
     b14:	81 e4       	ldi	r24, 0x41	; 65
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	a0 e0       	ldi	r26, 0x00	; 0
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	88 8b       	std	Y+16, r24	; 0x10
     b1e:	99 8b       	std	Y+17, r25	; 0x11
     b20:	aa 8b       	std	Y+18, r26	; 0x12
     b22:	bb 8b       	std	Y+19, r27	; 0x13
	  //#endif
    }
  }
  write_register(RF_SETUP,setup);
     b24:	41 2f       	mov	r20, r17
     b26:	66 e0       	ldi	r22, 0x06	; 6
     b28:	ce 01       	movw	r24, r28
     b2a:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     b2e:	66 e0       	ldi	r22, 0x06	; 6
     b30:	ce 01       	movw	r24, r28
     b32:	0e 94 32 03 	call	0x664	; 0x664 <_ZN4RF2413read_registerEh>
  {
    result = true;
  }
  return result;
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	18 13       	cpse	r17, r24
     b3a:	90 e0       	ldi	r25, 0x00	; 0
}
     b3c:	89 2f       	mov	r24, r25
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	08 95       	ret

00000b48 <_ZN4RF245beginEv>:
}

/****************************************************************************/

bool RF24::begin(void)
{
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	ec 01       	movw	r28, r24
  uint8_t setup=0;

    if (ce_pin != csn_pin) Set_pin(ce_pin,OUT);  
     b50:	88 81       	ld	r24, Y
     b52:	99 81       	ldd	r25, Y+1	; 0x01
     b54:	2a 81       	ldd	r18, Y+2	; 0x02
     b56:	3b 81       	ldd	r19, Y+3	; 0x03
     b58:	82 17       	cp	r24, r18
     b5a:	93 07       	cpc	r25, r19
     b5c:	21 f0       	breq	.+8      	; 0xb66 <_ZN4RF245beginEv+0x1e>
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Set_pin>
        Set_pin(csn_pin,OUT);
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	8a 81       	ldd	r24, Y+2	; 0x02
     b6c:	9b 81       	ldd	r25, Y+3	; 0x03
     b6e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Set_pin>
    _SPI.begin();
     b72:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN8SPIClass5beginEv>
    ce(low);
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	ce 01       	movw	r24, r28
     b7a:	0e 94 23 03 	call	0x646	; 0x646 <_ZN4RF242ceEb>
  	csn(high);
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	ce 01       	movw	r24, r28
     b82:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN4RF243csnEb>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     b86:	80 e1       	ldi	r24, 0x10	; 16
     b88:	97 e2       	ldi	r25, 0x27	; 39
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <_ZN4RF245beginEv+0x42>
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: _delay_ms is based on P-variant whereby non-P *may* require different timing.
  _delay_ms( 5 ) ;

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;
     b8e:	4c e0       	ldi	r20, 0x0C	; 12
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	ce 01       	movw	r24, r28
     b94:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     b98:	4f e5       	ldi	r20, 0x5F	; 95
     b9a:	64 e0       	ldi	r22, 0x04	; 4
     b9c:	ce 01       	movw	r24, r28
     b9e:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
     ba2:	62 e0       	ldi	r22, 0x02	; 2
     ba4:	ce 01       	movw	r24, r28
     ba6:	0e 94 67 05 	call	0xace	; 0xace <_ZN4RF2411setDataRateE15rf24_datarate_e>
     baa:	88 23       	and	r24, r24
     bac:	11 f0       	breq	.+4      	; 0xbb2 <_ZN4RF245beginEv+0x6a>
  {
    p_variant = true ;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	8e 83       	std	Y+6, r24	; 0x06
  }
  setup = read_register(RF_SETUP);
     bb2:	66 e0       	ldi	r22, 0x06	; 6
     bb4:	ce 01       	movw	r24, r28
     bb6:	0e 94 32 03 	call	0x664	; 0x664 <_ZN4RF2413read_registerEh>
     bba:	18 2f       	mov	r17, r24
 if( setup == 0b00001110 )     // register default for nRF24L01P
     bbc:	8e 30       	cpi	r24, 0x0E	; 14
     bbe:	11 f4       	brne	.+4      	; 0xbc4 <_ZN4RF245beginEv+0x7c>
  {
    p_variant = true ;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	8e 83       	std	Y+6, r24	; 0x06
  }
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	ce 01       	movw	r24, r28
     bc8:	0e 94 67 05 	call	0xace	; 0xace <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
     bcc:	ce 01       	movw	r24, r28
     bce:	0e 94 29 05 	call	0xa52	; 0xa52 <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	6d e1       	ldi	r22, 0x1D	; 29
     bd6:	ce 01       	movw	r24, r28
     bd8:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	6c e1       	ldi	r22, 0x1C	; 28
     be0:	ce 01       	movw	r24, r28
     be2:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>
  dynamic_payloads_enabled = false;
     be6:	18 86       	std	Y+8, r1	; 0x08

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     be8:	40 e7       	ldi	r20, 0x70	; 112
     bea:	67 e0       	ldi	r22, 0x07	; 7
     bec:	ce 01       	movw	r24, r28
     bee:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
     bf2:	6c e4       	ldi	r22, 0x4C	; 76
     bf4:	ce 01       	movw	r24, r28
     bf6:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
     bfa:	ce 01       	movw	r24, r28
     bfc:	0e 94 1b 04 	call	0x836	; 0x836 <_ZN4RF248flush_rxEv>
  flush_tx();
     c00:	ce 01       	movw	r24, r28
     c02:	0e 94 1f 04 	call	0x83e	; 0x83e <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
     c06:	ce 01       	movw	r24, r28
     c08:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	ce 01       	movw	r24, r28
     c10:	0e 94 32 03 	call	0x664	; 0x664 <_ZN4RF2413read_registerEh>
     c14:	48 2f       	mov	r20, r24
     c16:	4e 7f       	andi	r20, 0xFE	; 254
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	ce 01       	movw	r24, r28
     c1c:	0e 94 8a 03 	call	0x714	; 0x714 <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
     c20:	11 50       	subi	r17, 0x01	; 1
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	1e 3f       	cpi	r17, 0xFE	; 254
     c26:	08 f0       	brcs	.+2      	; 0xc2a <_ZN4RF245beginEv+0xe2>
     c28:	80 e0       	ldi	r24, 0x00	; 0
}
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	08 95       	ret

00000c32 <_ZN8SPIClass5beginEv>:
void SPIClass::begin()
{
 //  cli();//noInterrupts(); // Protect from a scheduler and prevent transactionBegin
 
    
    Set_pin(SS, OUT);
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	8a e0       	ldi	r24, 0x0A	; 10
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Set_pin>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUT.
    SPCR |= _BV(MSTR);
     c3e:	8c b5       	in	r24, 0x2c	; 44
     c40:	80 61       	ori	r24, 0x10	; 16
     c42:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     c44:	8c b5       	in	r24, 0x2c	; 44
     c46:	80 64       	ori	r24, 0x40	; 64
     c48:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    Set_pin(SCK, OUT);
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	8d e0       	ldi	r24, 0x0D	; 13
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Set_pin>
    Set_pin(MOSI, OUT);
     c56:	61 e0       	ldi	r22, 0x01	; 1
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	8b e0       	ldi	r24, 0x0B	; 11
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Set_pin>
     c62:	08 95       	ret

00000c64 <__subsf3>:
     c64:	50 58       	subi	r21, 0x80	; 128

00000c66 <__addsf3>:
     c66:	bb 27       	eor	r27, r27
     c68:	aa 27       	eor	r26, r26
     c6a:	0e 94 4a 06 	call	0xc94	; 0xc94 <__addsf3x>
     c6e:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_round>
     c72:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_pscA>
     c76:	38 f0       	brcs	.+14     	; 0xc86 <__addsf3+0x20>
     c78:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_pscB>
     c7c:	20 f0       	brcs	.+8      	; 0xc86 <__addsf3+0x20>
     c7e:	39 f4       	brne	.+14     	; 0xc8e <__addsf3+0x28>
     c80:	9f 3f       	cpi	r25, 0xFF	; 255
     c82:	19 f4       	brne	.+6      	; 0xc8a <__addsf3+0x24>
     c84:	26 f4       	brtc	.+8      	; 0xc8e <__addsf3+0x28>
     c86:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_nan>
     c8a:	0e f4       	brtc	.+2      	; 0xc8e <__addsf3+0x28>
     c8c:	e0 95       	com	r30
     c8e:	e7 fb       	bst	r30, 7
     c90:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>

00000c94 <__addsf3x>:
     c94:	e9 2f       	mov	r30, r25
     c96:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fp_split3>
     c9a:	58 f3       	brcs	.-42     	; 0xc72 <__addsf3+0xc>
     c9c:	ba 17       	cp	r27, r26
     c9e:	62 07       	cpc	r22, r18
     ca0:	73 07       	cpc	r23, r19
     ca2:	84 07       	cpc	r24, r20
     ca4:	95 07       	cpc	r25, r21
     ca6:	20 f0       	brcs	.+8      	; 0xcb0 <__addsf3x+0x1c>
     ca8:	79 f4       	brne	.+30     	; 0xcc8 <__addsf3x+0x34>
     caa:	a6 f5       	brtc	.+104    	; 0xd14 <__addsf3x+0x80>
     cac:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__fp_zero>
     cb0:	0e f4       	brtc	.+2      	; 0xcb4 <__addsf3x+0x20>
     cb2:	e0 95       	com	r30
     cb4:	0b 2e       	mov	r0, r27
     cb6:	ba 2f       	mov	r27, r26
     cb8:	a0 2d       	mov	r26, r0
     cba:	0b 01       	movw	r0, r22
     cbc:	b9 01       	movw	r22, r18
     cbe:	90 01       	movw	r18, r0
     cc0:	0c 01       	movw	r0, r24
     cc2:	ca 01       	movw	r24, r20
     cc4:	a0 01       	movw	r20, r0
     cc6:	11 24       	eor	r1, r1
     cc8:	ff 27       	eor	r31, r31
     cca:	59 1b       	sub	r21, r25
     ccc:	99 f0       	breq	.+38     	; 0xcf4 <__addsf3x+0x60>
     cce:	59 3f       	cpi	r21, 0xF9	; 249
     cd0:	50 f4       	brcc	.+20     	; 0xce6 <__addsf3x+0x52>
     cd2:	50 3e       	cpi	r21, 0xE0	; 224
     cd4:	68 f1       	brcs	.+90     	; 0xd30 <__addsf3x+0x9c>
     cd6:	1a 16       	cp	r1, r26
     cd8:	f0 40       	sbci	r31, 0x00	; 0
     cda:	a2 2f       	mov	r26, r18
     cdc:	23 2f       	mov	r18, r19
     cde:	34 2f       	mov	r19, r20
     ce0:	44 27       	eor	r20, r20
     ce2:	58 5f       	subi	r21, 0xF8	; 248
     ce4:	f3 cf       	rjmp	.-26     	; 0xccc <__addsf3x+0x38>
     ce6:	46 95       	lsr	r20
     ce8:	37 95       	ror	r19
     cea:	27 95       	ror	r18
     cec:	a7 95       	ror	r26
     cee:	f0 40       	sbci	r31, 0x00	; 0
     cf0:	53 95       	inc	r21
     cf2:	c9 f7       	brne	.-14     	; 0xce6 <__addsf3x+0x52>
     cf4:	7e f4       	brtc	.+30     	; 0xd14 <__addsf3x+0x80>
     cf6:	1f 16       	cp	r1, r31
     cf8:	ba 0b       	sbc	r27, r26
     cfa:	62 0b       	sbc	r22, r18
     cfc:	73 0b       	sbc	r23, r19
     cfe:	84 0b       	sbc	r24, r20
     d00:	ba f0       	brmi	.+46     	; 0xd30 <__addsf3x+0x9c>
     d02:	91 50       	subi	r25, 0x01	; 1
     d04:	a1 f0       	breq	.+40     	; 0xd2e <__addsf3x+0x9a>
     d06:	ff 0f       	add	r31, r31
     d08:	bb 1f       	adc	r27, r27
     d0a:	66 1f       	adc	r22, r22
     d0c:	77 1f       	adc	r23, r23
     d0e:	88 1f       	adc	r24, r24
     d10:	c2 f7       	brpl	.-16     	; 0xd02 <__addsf3x+0x6e>
     d12:	0e c0       	rjmp	.+28     	; 0xd30 <__addsf3x+0x9c>
     d14:	ba 0f       	add	r27, r26
     d16:	62 1f       	adc	r22, r18
     d18:	73 1f       	adc	r23, r19
     d1a:	84 1f       	adc	r24, r20
     d1c:	48 f4       	brcc	.+18     	; 0xd30 <__addsf3x+0x9c>
     d1e:	87 95       	ror	r24
     d20:	77 95       	ror	r23
     d22:	67 95       	ror	r22
     d24:	b7 95       	ror	r27
     d26:	f7 95       	ror	r31
     d28:	9e 3f       	cpi	r25, 0xFE	; 254
     d2a:	08 f0       	brcs	.+2      	; 0xd2e <__addsf3x+0x9a>
     d2c:	b0 cf       	rjmp	.-160    	; 0xc8e <__addsf3+0x28>
     d2e:	93 95       	inc	r25
     d30:	88 0f       	add	r24, r24
     d32:	08 f0       	brcs	.+2      	; 0xd36 <__addsf3x+0xa2>
     d34:	99 27       	eor	r25, r25
     d36:	ee 0f       	add	r30, r30
     d38:	97 95       	ror	r25
     d3a:	87 95       	ror	r24
     d3c:	08 95       	ret

00000d3e <__cmpsf2>:
     d3e:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_cmp>
     d42:	08 f4       	brcc	.+2      	; 0xd46 <__cmpsf2+0x8>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	08 95       	ret

00000d48 <__divsf3>:
     d48:	0e 94 b8 06 	call	0xd70	; 0xd70 <__divsf3x>
     d4c:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_round>
     d50:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_pscB>
     d54:	58 f0       	brcs	.+22     	; 0xd6c <__divsf3+0x24>
     d56:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_pscA>
     d5a:	40 f0       	brcs	.+16     	; 0xd6c <__divsf3+0x24>
     d5c:	29 f4       	brne	.+10     	; 0xd68 <__divsf3+0x20>
     d5e:	5f 3f       	cpi	r21, 0xFF	; 255
     d60:	29 f0       	breq	.+10     	; 0xd6c <__divsf3+0x24>
     d62:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
     d66:	51 11       	cpse	r21, r1
     d68:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_szero>
     d6c:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_nan>

00000d70 <__divsf3x>:
     d70:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fp_split3>
     d74:	68 f3       	brcs	.-38     	; 0xd50 <__divsf3+0x8>

00000d76 <__divsf3_pse>:
     d76:	99 23       	and	r25, r25
     d78:	b1 f3       	breq	.-20     	; 0xd66 <__divsf3+0x1e>
     d7a:	55 23       	and	r21, r21
     d7c:	91 f3       	breq	.-28     	; 0xd62 <__divsf3+0x1a>
     d7e:	95 1b       	sub	r25, r21
     d80:	55 0b       	sbc	r21, r21
     d82:	bb 27       	eor	r27, r27
     d84:	aa 27       	eor	r26, r26
     d86:	62 17       	cp	r22, r18
     d88:	73 07       	cpc	r23, r19
     d8a:	84 07       	cpc	r24, r20
     d8c:	38 f0       	brcs	.+14     	; 0xd9c <__divsf3_pse+0x26>
     d8e:	9f 5f       	subi	r25, 0xFF	; 255
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	44 1f       	adc	r20, r20
     d98:	aa 1f       	adc	r26, r26
     d9a:	a9 f3       	breq	.-22     	; 0xd86 <__divsf3_pse+0x10>
     d9c:	35 d0       	rcall	.+106    	; 0xe08 <__divsf3_pse+0x92>
     d9e:	0e 2e       	mov	r0, r30
     da0:	3a f0       	brmi	.+14     	; 0xdb0 <__divsf3_pse+0x3a>
     da2:	e0 e8       	ldi	r30, 0x80	; 128
     da4:	32 d0       	rcall	.+100    	; 0xe0a <__divsf3_pse+0x94>
     da6:	91 50       	subi	r25, 0x01	; 1
     da8:	50 40       	sbci	r21, 0x00	; 0
     daa:	e6 95       	lsr	r30
     dac:	00 1c       	adc	r0, r0
     dae:	ca f7       	brpl	.-14     	; 0xda2 <__divsf3_pse+0x2c>
     db0:	2b d0       	rcall	.+86     	; 0xe08 <__divsf3_pse+0x92>
     db2:	fe 2f       	mov	r31, r30
     db4:	29 d0       	rcall	.+82     	; 0xe08 <__divsf3_pse+0x92>
     db6:	66 0f       	add	r22, r22
     db8:	77 1f       	adc	r23, r23
     dba:	88 1f       	adc	r24, r24
     dbc:	bb 1f       	adc	r27, r27
     dbe:	26 17       	cp	r18, r22
     dc0:	37 07       	cpc	r19, r23
     dc2:	48 07       	cpc	r20, r24
     dc4:	ab 07       	cpc	r26, r27
     dc6:	b0 e8       	ldi	r27, 0x80	; 128
     dc8:	09 f0       	breq	.+2      	; 0xdcc <__divsf3_pse+0x56>
     dca:	bb 0b       	sbc	r27, r27
     dcc:	80 2d       	mov	r24, r0
     dce:	bf 01       	movw	r22, r30
     dd0:	ff 27       	eor	r31, r31
     dd2:	93 58       	subi	r25, 0x83	; 131
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	3a f0       	brmi	.+14     	; 0xde6 <__divsf3_pse+0x70>
     dd8:	9e 3f       	cpi	r25, 0xFE	; 254
     dda:	51 05       	cpc	r21, r1
     ddc:	78 f0       	brcs	.+30     	; 0xdfc <__divsf3_pse+0x86>
     dde:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
     de2:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_szero>
     de6:	5f 3f       	cpi	r21, 0xFF	; 255
     de8:	e4 f3       	brlt	.-8      	; 0xde2 <__divsf3_pse+0x6c>
     dea:	98 3e       	cpi	r25, 0xE8	; 232
     dec:	d4 f3       	brlt	.-12     	; 0xde2 <__divsf3_pse+0x6c>
     dee:	86 95       	lsr	r24
     df0:	77 95       	ror	r23
     df2:	67 95       	ror	r22
     df4:	b7 95       	ror	r27
     df6:	f7 95       	ror	r31
     df8:	9f 5f       	subi	r25, 0xFF	; 255
     dfa:	c9 f7       	brne	.-14     	; 0xdee <__divsf3_pse+0x78>
     dfc:	88 0f       	add	r24, r24
     dfe:	91 1d       	adc	r25, r1
     e00:	96 95       	lsr	r25
     e02:	87 95       	ror	r24
     e04:	97 f9       	bld	r25, 7
     e06:	08 95       	ret
     e08:	e1 e0       	ldi	r30, 0x01	; 1
     e0a:	66 0f       	add	r22, r22
     e0c:	77 1f       	adc	r23, r23
     e0e:	88 1f       	adc	r24, r24
     e10:	bb 1f       	adc	r27, r27
     e12:	62 17       	cp	r22, r18
     e14:	73 07       	cpc	r23, r19
     e16:	84 07       	cpc	r24, r20
     e18:	ba 07       	cpc	r27, r26
     e1a:	20 f0       	brcs	.+8      	; 0xe24 <__divsf3_pse+0xae>
     e1c:	62 1b       	sub	r22, r18
     e1e:	73 0b       	sbc	r23, r19
     e20:	84 0b       	sbc	r24, r20
     e22:	ba 0b       	sbc	r27, r26
     e24:	ee 1f       	adc	r30, r30
     e26:	88 f7       	brcc	.-30     	; 0xe0a <__divsf3_pse+0x94>
     e28:	e0 95       	com	r30
     e2a:	08 95       	ret

00000e2c <__fixunssfsi>:
     e2c:	0e 94 d6 07 	call	0xfac	; 0xfac <__fp_splitA>
     e30:	88 f0       	brcs	.+34     	; 0xe54 <__fixunssfsi+0x28>
     e32:	9f 57       	subi	r25, 0x7F	; 127
     e34:	98 f0       	brcs	.+38     	; 0xe5c <__fixunssfsi+0x30>
     e36:	b9 2f       	mov	r27, r25
     e38:	99 27       	eor	r25, r25
     e3a:	b7 51       	subi	r27, 0x17	; 23
     e3c:	b0 f0       	brcs	.+44     	; 0xe6a <__fixunssfsi+0x3e>
     e3e:	e1 f0       	breq	.+56     	; 0xe78 <__fixunssfsi+0x4c>
     e40:	66 0f       	add	r22, r22
     e42:	77 1f       	adc	r23, r23
     e44:	88 1f       	adc	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	1a f0       	brmi	.+6      	; 0xe50 <__fixunssfsi+0x24>
     e4a:	ba 95       	dec	r27
     e4c:	c9 f7       	brne	.-14     	; 0xe40 <__fixunssfsi+0x14>
     e4e:	14 c0       	rjmp	.+40     	; 0xe78 <__fixunssfsi+0x4c>
     e50:	b1 30       	cpi	r27, 0x01	; 1
     e52:	91 f0       	breq	.+36     	; 0xe78 <__fixunssfsi+0x4c>
     e54:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__fp_zero>
     e58:	b1 e0       	ldi	r27, 0x01	; 1
     e5a:	08 95       	ret
     e5c:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__fp_zero>
     e60:	67 2f       	mov	r22, r23
     e62:	78 2f       	mov	r23, r24
     e64:	88 27       	eor	r24, r24
     e66:	b8 5f       	subi	r27, 0xF8	; 248
     e68:	39 f0       	breq	.+14     	; 0xe78 <__fixunssfsi+0x4c>
     e6a:	b9 3f       	cpi	r27, 0xF9	; 249
     e6c:	cc f3       	brlt	.-14     	; 0xe60 <__fixunssfsi+0x34>
     e6e:	86 95       	lsr	r24
     e70:	77 95       	ror	r23
     e72:	67 95       	ror	r22
     e74:	b3 95       	inc	r27
     e76:	d9 f7       	brne	.-10     	; 0xe6e <__fixunssfsi+0x42>
     e78:	3e f4       	brtc	.+14     	; 0xe88 <__fixunssfsi+0x5c>
     e7a:	90 95       	com	r25
     e7c:	80 95       	com	r24
     e7e:	70 95       	com	r23
     e80:	61 95       	neg	r22
     e82:	7f 4f       	sbci	r23, 0xFF	; 255
     e84:	8f 4f       	sbci	r24, 0xFF	; 255
     e86:	9f 4f       	sbci	r25, 0xFF	; 255
     e88:	08 95       	ret

00000e8a <__floatunsisf>:
     e8a:	e8 94       	clt
     e8c:	09 c0       	rjmp	.+18     	; 0xea0 <__floatsisf+0x12>

00000e8e <__floatsisf>:
     e8e:	97 fb       	bst	r25, 7
     e90:	3e f4       	brtc	.+14     	; 0xea0 <__floatsisf+0x12>
     e92:	90 95       	com	r25
     e94:	80 95       	com	r24
     e96:	70 95       	com	r23
     e98:	61 95       	neg	r22
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	8f 4f       	sbci	r24, 0xFF	; 255
     e9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ea0:	99 23       	and	r25, r25
     ea2:	a9 f0       	breq	.+42     	; 0xece <__floatsisf+0x40>
     ea4:	f9 2f       	mov	r31, r25
     ea6:	96 e9       	ldi	r25, 0x96	; 150
     ea8:	bb 27       	eor	r27, r27
     eaa:	93 95       	inc	r25
     eac:	f6 95       	lsr	r31
     eae:	87 95       	ror	r24
     eb0:	77 95       	ror	r23
     eb2:	67 95       	ror	r22
     eb4:	b7 95       	ror	r27
     eb6:	f1 11       	cpse	r31, r1
     eb8:	f8 cf       	rjmp	.-16     	; 0xeaa <__floatsisf+0x1c>
     eba:	fa f4       	brpl	.+62     	; 0xefa <__floatsisf+0x6c>
     ebc:	bb 0f       	add	r27, r27
     ebe:	11 f4       	brne	.+4      	; 0xec4 <__floatsisf+0x36>
     ec0:	60 ff       	sbrs	r22, 0
     ec2:	1b c0       	rjmp	.+54     	; 0xefa <__floatsisf+0x6c>
     ec4:	6f 5f       	subi	r22, 0xFF	; 255
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	8f 4f       	sbci	r24, 0xFF	; 255
     eca:	9f 4f       	sbci	r25, 0xFF	; 255
     ecc:	16 c0       	rjmp	.+44     	; 0xefa <__floatsisf+0x6c>
     ece:	88 23       	and	r24, r24
     ed0:	11 f0       	breq	.+4      	; 0xed6 <__floatsisf+0x48>
     ed2:	96 e9       	ldi	r25, 0x96	; 150
     ed4:	11 c0       	rjmp	.+34     	; 0xef8 <__floatsisf+0x6a>
     ed6:	77 23       	and	r23, r23
     ed8:	21 f0       	breq	.+8      	; 0xee2 <__floatsisf+0x54>
     eda:	9e e8       	ldi	r25, 0x8E	; 142
     edc:	87 2f       	mov	r24, r23
     ede:	76 2f       	mov	r23, r22
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__floatsisf+0x5e>
     ee2:	66 23       	and	r22, r22
     ee4:	71 f0       	breq	.+28     	; 0xf02 <__floatsisf+0x74>
     ee6:	96 e8       	ldi	r25, 0x86	; 134
     ee8:	86 2f       	mov	r24, r22
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	2a f0       	brmi	.+10     	; 0xefa <__floatsisf+0x6c>
     ef0:	9a 95       	dec	r25
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	88 1f       	adc	r24, r24
     ef8:	da f7       	brpl	.-10     	; 0xef0 <__floatsisf+0x62>
     efa:	88 0f       	add	r24, r24
     efc:	96 95       	lsr	r25
     efe:	87 95       	ror	r24
     f00:	97 f9       	bld	r25, 7
     f02:	08 95       	ret

00000f04 <__fp_cmp>:
     f04:	99 0f       	add	r25, r25
     f06:	00 08       	sbc	r0, r0
     f08:	55 0f       	add	r21, r21
     f0a:	aa 0b       	sbc	r26, r26
     f0c:	e0 e8       	ldi	r30, 0x80	; 128
     f0e:	fe ef       	ldi	r31, 0xFE	; 254
     f10:	16 16       	cp	r1, r22
     f12:	17 06       	cpc	r1, r23
     f14:	e8 07       	cpc	r30, r24
     f16:	f9 07       	cpc	r31, r25
     f18:	c0 f0       	brcs	.+48     	; 0xf4a <__fp_cmp+0x46>
     f1a:	12 16       	cp	r1, r18
     f1c:	13 06       	cpc	r1, r19
     f1e:	e4 07       	cpc	r30, r20
     f20:	f5 07       	cpc	r31, r21
     f22:	98 f0       	brcs	.+38     	; 0xf4a <__fp_cmp+0x46>
     f24:	62 1b       	sub	r22, r18
     f26:	73 0b       	sbc	r23, r19
     f28:	84 0b       	sbc	r24, r20
     f2a:	95 0b       	sbc	r25, r21
     f2c:	39 f4       	brne	.+14     	; 0xf3c <__fp_cmp+0x38>
     f2e:	0a 26       	eor	r0, r26
     f30:	61 f0       	breq	.+24     	; 0xf4a <__fp_cmp+0x46>
     f32:	23 2b       	or	r18, r19
     f34:	24 2b       	or	r18, r20
     f36:	25 2b       	or	r18, r21
     f38:	21 f4       	brne	.+8      	; 0xf42 <__fp_cmp+0x3e>
     f3a:	08 95       	ret
     f3c:	0a 26       	eor	r0, r26
     f3e:	09 f4       	brne	.+2      	; 0xf42 <__fp_cmp+0x3e>
     f40:	a1 40       	sbci	r26, 0x01	; 1
     f42:	a6 95       	lsr	r26
     f44:	8f ef       	ldi	r24, 0xFF	; 255
     f46:	81 1d       	adc	r24, r1
     f48:	81 1d       	adc	r24, r1
     f4a:	08 95       	ret

00000f4c <__fp_inf>:
     f4c:	97 f9       	bld	r25, 7
     f4e:	9f 67       	ori	r25, 0x7F	; 127
     f50:	80 e8       	ldi	r24, 0x80	; 128
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	08 95       	ret

00000f58 <__fp_nan>:
     f58:	9f ef       	ldi	r25, 0xFF	; 255
     f5a:	80 ec       	ldi	r24, 0xC0	; 192
     f5c:	08 95       	ret

00000f5e <__fp_pscA>:
     f5e:	00 24       	eor	r0, r0
     f60:	0a 94       	dec	r0
     f62:	16 16       	cp	r1, r22
     f64:	17 06       	cpc	r1, r23
     f66:	18 06       	cpc	r1, r24
     f68:	09 06       	cpc	r0, r25
     f6a:	08 95       	ret

00000f6c <__fp_pscB>:
     f6c:	00 24       	eor	r0, r0
     f6e:	0a 94       	dec	r0
     f70:	12 16       	cp	r1, r18
     f72:	13 06       	cpc	r1, r19
     f74:	14 06       	cpc	r1, r20
     f76:	05 06       	cpc	r0, r21
     f78:	08 95       	ret

00000f7a <__fp_round>:
     f7a:	09 2e       	mov	r0, r25
     f7c:	03 94       	inc	r0
     f7e:	00 0c       	add	r0, r0
     f80:	11 f4       	brne	.+4      	; 0xf86 <__fp_round+0xc>
     f82:	88 23       	and	r24, r24
     f84:	52 f0       	brmi	.+20     	; 0xf9a <__fp_round+0x20>
     f86:	bb 0f       	add	r27, r27
     f88:	40 f4       	brcc	.+16     	; 0xf9a <__fp_round+0x20>
     f8a:	bf 2b       	or	r27, r31
     f8c:	11 f4       	brne	.+4      	; 0xf92 <__fp_round+0x18>
     f8e:	60 ff       	sbrs	r22, 0
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <__fp_round+0x20>
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	8f 4f       	sbci	r24, 0xFF	; 255
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	08 95       	ret

00000f9c <__fp_split3>:
     f9c:	57 fd       	sbrc	r21, 7
     f9e:	90 58       	subi	r25, 0x80	; 128
     fa0:	44 0f       	add	r20, r20
     fa2:	55 1f       	adc	r21, r21
     fa4:	59 f0       	breq	.+22     	; 0xfbc <__fp_splitA+0x10>
     fa6:	5f 3f       	cpi	r21, 0xFF	; 255
     fa8:	71 f0       	breq	.+28     	; 0xfc6 <__fp_splitA+0x1a>
     faa:	47 95       	ror	r20

00000fac <__fp_splitA>:
     fac:	88 0f       	add	r24, r24
     fae:	97 fb       	bst	r25, 7
     fb0:	99 1f       	adc	r25, r25
     fb2:	61 f0       	breq	.+24     	; 0xfcc <__fp_splitA+0x20>
     fb4:	9f 3f       	cpi	r25, 0xFF	; 255
     fb6:	79 f0       	breq	.+30     	; 0xfd6 <__fp_splitA+0x2a>
     fb8:	87 95       	ror	r24
     fba:	08 95       	ret
     fbc:	12 16       	cp	r1, r18
     fbe:	13 06       	cpc	r1, r19
     fc0:	14 06       	cpc	r1, r20
     fc2:	55 1f       	adc	r21, r21
     fc4:	f2 cf       	rjmp	.-28     	; 0xfaa <__fp_split3+0xe>
     fc6:	46 95       	lsr	r20
     fc8:	f1 df       	rcall	.-30     	; 0xfac <__fp_splitA>
     fca:	08 c0       	rjmp	.+16     	; 0xfdc <__fp_splitA+0x30>
     fcc:	16 16       	cp	r1, r22
     fce:	17 06       	cpc	r1, r23
     fd0:	18 06       	cpc	r1, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	f1 cf       	rjmp	.-30     	; 0xfb8 <__fp_splitA+0xc>
     fd6:	86 95       	lsr	r24
     fd8:	71 05       	cpc	r23, r1
     fda:	61 05       	cpc	r22, r1
     fdc:	08 94       	sec
     fde:	08 95       	ret

00000fe0 <__fp_zero>:
     fe0:	e8 94       	clt

00000fe2 <__fp_szero>:
     fe2:	bb 27       	eor	r27, r27
     fe4:	66 27       	eor	r22, r22
     fe6:	77 27       	eor	r23, r23
     fe8:	cb 01       	movw	r24, r22
     fea:	97 f9       	bld	r25, 7
     fec:	08 95       	ret

00000fee <__gesf2>:
     fee:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_cmp>
     ff2:	08 f4       	brcc	.+2      	; 0xff6 <__gesf2+0x8>
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	08 95       	ret

00000ff8 <__mulsf3>:
     ff8:	0e 94 0f 08 	call	0x101e	; 0x101e <__mulsf3x>
     ffc:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_round>
    1000:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_pscA>
    1004:	38 f0       	brcs	.+14     	; 0x1014 <__mulsf3+0x1c>
    1006:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_pscB>
    100a:	20 f0       	brcs	.+8      	; 0x1014 <__mulsf3+0x1c>
    100c:	95 23       	and	r25, r21
    100e:	11 f0       	breq	.+4      	; 0x1014 <__mulsf3+0x1c>
    1010:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
    1014:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_nan>
    1018:	11 24       	eor	r1, r1
    101a:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_szero>

0000101e <__mulsf3x>:
    101e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fp_split3>
    1022:	70 f3       	brcs	.-36     	; 0x1000 <__mulsf3+0x8>

00001024 <__mulsf3_pse>:
    1024:	95 9f       	mul	r25, r21
    1026:	c1 f3       	breq	.-16     	; 0x1018 <__mulsf3+0x20>
    1028:	95 0f       	add	r25, r21
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	55 1f       	adc	r21, r21
    102e:	62 9f       	mul	r22, r18
    1030:	f0 01       	movw	r30, r0
    1032:	72 9f       	mul	r23, r18
    1034:	bb 27       	eor	r27, r27
    1036:	f0 0d       	add	r31, r0
    1038:	b1 1d       	adc	r27, r1
    103a:	63 9f       	mul	r22, r19
    103c:	aa 27       	eor	r26, r26
    103e:	f0 0d       	add	r31, r0
    1040:	b1 1d       	adc	r27, r1
    1042:	aa 1f       	adc	r26, r26
    1044:	64 9f       	mul	r22, r20
    1046:	66 27       	eor	r22, r22
    1048:	b0 0d       	add	r27, r0
    104a:	a1 1d       	adc	r26, r1
    104c:	66 1f       	adc	r22, r22
    104e:	82 9f       	mul	r24, r18
    1050:	22 27       	eor	r18, r18
    1052:	b0 0d       	add	r27, r0
    1054:	a1 1d       	adc	r26, r1
    1056:	62 1f       	adc	r22, r18
    1058:	73 9f       	mul	r23, r19
    105a:	b0 0d       	add	r27, r0
    105c:	a1 1d       	adc	r26, r1
    105e:	62 1f       	adc	r22, r18
    1060:	83 9f       	mul	r24, r19
    1062:	a0 0d       	add	r26, r0
    1064:	61 1d       	adc	r22, r1
    1066:	22 1f       	adc	r18, r18
    1068:	74 9f       	mul	r23, r20
    106a:	33 27       	eor	r19, r19
    106c:	a0 0d       	add	r26, r0
    106e:	61 1d       	adc	r22, r1
    1070:	23 1f       	adc	r18, r19
    1072:	84 9f       	mul	r24, r20
    1074:	60 0d       	add	r22, r0
    1076:	21 1d       	adc	r18, r1
    1078:	82 2f       	mov	r24, r18
    107a:	76 2f       	mov	r23, r22
    107c:	6a 2f       	mov	r22, r26
    107e:	11 24       	eor	r1, r1
    1080:	9f 57       	subi	r25, 0x7F	; 127
    1082:	50 40       	sbci	r21, 0x00	; 0
    1084:	9a f0       	brmi	.+38     	; 0x10ac <__mulsf3_pse+0x88>
    1086:	f1 f0       	breq	.+60     	; 0x10c4 <__mulsf3_pse+0xa0>
    1088:	88 23       	and	r24, r24
    108a:	4a f0       	brmi	.+18     	; 0x109e <__mulsf3_pse+0x7a>
    108c:	ee 0f       	add	r30, r30
    108e:	ff 1f       	adc	r31, r31
    1090:	bb 1f       	adc	r27, r27
    1092:	66 1f       	adc	r22, r22
    1094:	77 1f       	adc	r23, r23
    1096:	88 1f       	adc	r24, r24
    1098:	91 50       	subi	r25, 0x01	; 1
    109a:	50 40       	sbci	r21, 0x00	; 0
    109c:	a9 f7       	brne	.-22     	; 0x1088 <__mulsf3_pse+0x64>
    109e:	9e 3f       	cpi	r25, 0xFE	; 254
    10a0:	51 05       	cpc	r21, r1
    10a2:	80 f0       	brcs	.+32     	; 0x10c4 <__mulsf3_pse+0xa0>
    10a4:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
    10a8:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_szero>
    10ac:	5f 3f       	cpi	r21, 0xFF	; 255
    10ae:	e4 f3       	brlt	.-8      	; 0x10a8 <__mulsf3_pse+0x84>
    10b0:	98 3e       	cpi	r25, 0xE8	; 232
    10b2:	d4 f3       	brlt	.-12     	; 0x10a8 <__mulsf3_pse+0x84>
    10b4:	86 95       	lsr	r24
    10b6:	77 95       	ror	r23
    10b8:	67 95       	ror	r22
    10ba:	b7 95       	ror	r27
    10bc:	f7 95       	ror	r31
    10be:	e7 95       	ror	r30
    10c0:	9f 5f       	subi	r25, 0xFF	; 255
    10c2:	c1 f7       	brne	.-16     	; 0x10b4 <__mulsf3_pse+0x90>
    10c4:	fe 2b       	or	r31, r30
    10c6:	88 0f       	add	r24, r24
    10c8:	91 1d       	adc	r25, r1
    10ca:	96 95       	lsr	r25
    10cc:	87 95       	ror	r24
    10ce:	97 f9       	bld	r25, 7
    10d0:	08 95       	ret

000010d2 <__umulhisi3>:
    10d2:	a2 9f       	mul	r26, r18
    10d4:	b0 01       	movw	r22, r0
    10d6:	b3 9f       	mul	r27, r19
    10d8:	c0 01       	movw	r24, r0
    10da:	a3 9f       	mul	r26, r19
    10dc:	70 0d       	add	r23, r0
    10de:	81 1d       	adc	r24, r1
    10e0:	11 24       	eor	r1, r1
    10e2:	91 1d       	adc	r25, r1
    10e4:	b2 9f       	mul	r27, r18
    10e6:	70 0d       	add	r23, r0
    10e8:	81 1d       	adc	r24, r1
    10ea:	11 24       	eor	r1, r1
    10ec:	91 1d       	adc	r25, r1
    10ee:	08 95       	ret

000010f0 <__tablejump2__>:
    10f0:	ee 0f       	add	r30, r30
    10f2:	ff 1f       	adc	r31, r31
    10f4:	05 90       	lpm	r0, Z+
    10f6:	f4 91       	lpm	r31, Z
    10f8:	e0 2d       	mov	r30, r0
    10fa:	09 94       	ijmp

000010fc <memcpy>:
    10fc:	fb 01       	movw	r30, r22
    10fe:	dc 01       	movw	r26, r24
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <memcpy+0xa>
    1102:	01 90       	ld	r0, Z+
    1104:	0d 92       	st	X+, r0
    1106:	41 50       	subi	r20, 0x01	; 1
    1108:	50 40       	sbci	r21, 0x00	; 0
    110a:	d8 f7       	brcc	.-10     	; 0x1102 <memcpy+0x6>
    110c:	08 95       	ret

0000110e <_exit>:
    110e:	f8 94       	cli

00001110 <__stop_program>:
    1110:	ff cf       	rjmp	.-2      	; 0x1110 <__stop_program>
