
uartrecevier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002b0  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  00000356  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df3  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c4  00000000  00000000  00001293  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000844  00000000  00000000  00001b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  0000239c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d1  00000000  00000000  00002598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bbd  00000000  00000000  00002b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003726  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  9e:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_Init>:
		// disable Brounout detection (BOD)
		MCUCR|=(3<<5);
		MCUCR = (MCUCR &~(1<<5)) | (1<<6);
		__asm__ __volatile__("sleep");// executes A sleep instruction
	}
}
  a6:	e1 ec       	ldi	r30, 0xC1	; 193
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
  ac:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  b0:	a2 ec       	ldi	r26, 0xC2	; 194
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	8c 91       	ld	r24, X
  b6:	8e 60       	ori	r24, 0x0E	; 14
  b8:	8c 93       	st	X, r24
  ba:	8e ec       	ldi	r24, 0xCE	; 206
  bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  c0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  c4:	80 81       	ld	r24, Z
  c6:	88 61       	ori	r24, 0x18	; 24
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <UART_Available>:
  cc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  d0:	80 72       	andi	r24, 0x20	; 32
  d2:	08 95       	ret

000000d4 <UART_Read>:
  d4:	e0 ec       	ldi	r30, 0xC0	; 192
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 23       	and	r24, r24
  dc:	ec f7       	brge	.-6      	; 0xd8 <UART_Read+0x4>
  de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  e2:	08 95       	ret

000000e4 <UART_TransmitByte>:
  e4:	90 e4       	ldi	r25, 0x40	; 64
  e6:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  ea:	e0 ec       	ldi	r30, 0xC0	; 192
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	90 81       	ld	r25, Z
  f0:	95 ff       	sbrs	r25, 5
  f2:	fd cf       	rjmp	.-6      	; 0xee <UART_TransmitByte+0xa>
  f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  f8:	e0 ec       	ldi	r30, 0xC0	; 192
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	86 ff       	sbrs	r24, 6
 100:	fd cf       	rjmp	.-6      	; 0xfc <UART_TransmitByte+0x18>
 102:	08 95       	ret

00000104 <Set_pin>:
 104:	61 30       	cpi	r22, 0x01	; 1
 106:	71 05       	cpc	r23, r1
 108:	f1 f4       	brne	.+60     	; 0x146 <Set_pin+0x42>
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	91 05       	cpc	r25, r1
 10e:	70 f0       	brcs	.+28     	; 0x12c <Set_pin+0x28>
 110:	44 b1       	in	r20, 0x04	; 4
 112:	08 97       	sbiw	r24, 0x08	; 8
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	b9 01       	movw	r22, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <Set_pin+0x1c>
 11c:	66 0f       	add	r22, r22
 11e:	77 1f       	adc	r23, r23
 120:	8a 95       	dec	r24
 122:	e2 f7       	brpl	.-8      	; 0x11c <Set_pin+0x18>
 124:	cb 01       	movw	r24, r22
 126:	84 2b       	or	r24, r20
 128:	84 b9       	out	0x04, r24	; 4
 12a:	08 95       	ret
 12c:	4a b1       	in	r20, 0x0a	; 10
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	b9 01       	movw	r22, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <Set_pin+0x36>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	8a 95       	dec	r24
 13c:	e2 f7       	brpl	.-8      	; 0x136 <Set_pin+0x32>
 13e:	cb 01       	movw	r24, r22
 140:	84 2b       	or	r24, r20
 142:	8a b9       	out	0x0a, r24	; 10
 144:	08 95       	ret
 146:	08 97       	sbiw	r24, 0x08	; 8
 148:	18 f0       	brcs	.+6      	; 0x150 <Set_pin+0x4c>
 14a:	84 b1       	in	r24, 0x04	; 4
 14c:	84 b9       	out	0x04, r24	; 4
 14e:	08 95       	ret
 150:	8a b1       	in	r24, 0x0a	; 10
 152:	8a b9       	out	0x0a, r24	; 10
 154:	08 95       	ret

00000156 <__vector_14>:
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 168:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 172:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_6>:
////   ISR For WATCHDOG TIMER
ISR(WDT_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
	
};
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <main>:
byte flg=1;//flag for sequence of node data
int main(void)
{
    /* Replace with your application code */
	char z=0;
	Set_pin(3,OUT);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 82 00 	call	0x104	; 0x104 <Set_pin>
	UART_Init();
 1a4:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Init>
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f5 e0       	ldi	r31, 0x05	; 5
 1ac:	cf 2e       	mov	r12, r31
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	df 2e       	mov	r13, r31
 1b2:	f0 2d       	mov	r31, r0
 1b4:	0f 2e       	mov	r0, r31
 1b6:	f9 e0       	ldi	r31, 0x09	; 9
 1b8:	ef 2e       	mov	r14, r31
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	ff 2e       	mov	r15, r31
 1be:	f0 2d       	mov	r31, r0
 1c0:	0d e0       	ldi	r16, 0x0D	; 13
 1c2:	11 e0       	ldi	r17, 0x01	; 1
 1c4:	0f 2e       	mov	r0, r31
 1c6:	f1 e1       	ldi	r31, 0x11	; 17
 1c8:	6f 2e       	mov	r6, r31
 1ca:	f1 e0       	ldi	r31, 0x01	; 1
 1cc:	7f 2e       	mov	r7, r31
 1ce:	f0 2d       	mov	r31, r0
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 1d0:	0f 2e       	mov	r0, r31
 1d2:	f8 ec       	ldi	r31, 0xC8	; 200
 1d4:	af 2e       	mov	r10, r31
 1d6:	b1 2c       	mov	r11, r1
 1d8:	f0 2d       	mov	r31, r0
    while (1) 
    {
	
		while(UART_Available())
 1da:	0e 94 66 00 	call	0xcc	; 0xcc <UART_Available>
 1de:	88 23       	and	r24, r24
 1e0:	e1 f3       	breq	.-8      	; 0x1da <main+0x42>
		{
				z = UART_Read();
 1e2:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_Read>
				//_delay_ms(100);
				//UART_Transmit(z);
			if ((z == 'C')&&(flg<5))
 1e6:	83 34       	cpi	r24, 0x43	; 67
 1e8:	09 f0       	breq	.+2      	; 0x1ec <main+0x54>
 1ea:	4e c0       	rjmp	.+156    	; 0x288 <main+0xf0>
 1ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1f0:	85 30       	cpi	r24, 0x05	; 5
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <main+0x5e>
 1f4:	49 c0       	rjmp	.+146    	; 0x288 <main+0xf0>
			{
				
				//send packet
				unsigned char i=0;
				//delay(1000);
				if (flg==1)
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	09 f0       	breq	.+2      	; 0x1fc <main+0x64>
 1fa:	4f c0       	rjmp	.+158    	; 0x29a <main+0x102>
 1fc:	cd e0       	ldi	r28, 0x0D	; 13
 1fe:	d1 e0       	ldi	r29, 0x01	; 1
				{
					for (i=0;i<4;i++)
					{
						UART_TransmitByte(sen1[i]);
 200:	89 91       	ld	r24, Y+
 202:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_TransmitByte>
				//send packet
				unsigned char i=0;
				//delay(1000);
				if (flg==1)
				{
					for (i=0;i<4;i++)
 206:	c6 15       	cp	r28, r6
 208:	d7 05       	cpc	r29, r7
 20a:	d1 f7       	brne	.-12     	; 0x200 <main+0x68>
						UART_TransmitByte(sen1[i]);
						//delay(1000);
					}	
						
				}//flg 1 end
				if (flg==2)
 20c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	09 f0       	breq	.+2      	; 0x216 <main+0x7e>
 214:	45 c0       	rjmp	.+138    	; 0x2a0 <main+0x108>
 216:	0f 2e       	mov	r0, r31
 218:	f9 e0       	ldi	r31, 0x09	; 9
 21a:	8f 2e       	mov	r8, r31
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	9f 2e       	mov	r9, r31
 220:	f0 2d       	mov	r31, r0
				{
					for (i=0;i<4;i++)
					{
						UART_TransmitByte(sen2[i]);
 222:	f4 01       	movw	r30, r8
 224:	81 91       	ld	r24, Z+
 226:	4f 01       	movw	r8, r30
 228:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_TransmitByte>
					}	
						
				}//flg 1 end
				if (flg==2)
				{
					for (i=0;i<4;i++)
 22c:	80 16       	cp	r8, r16
 22e:	91 06       	cpc	r9, r17
 230:	c1 f7       	brne	.-16     	; 0x222 <main+0x8a>
					{
						UART_TransmitByte(sen2[i]);
						//delay(1000);
					}
				}//flg 2 end
				if (flg==3)
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	b1 f5       	brne	.+108    	; 0x2a6 <main+0x10e>
 23a:	0f 2e       	mov	r0, r31
 23c:	f5 e0       	ldi	r31, 0x05	; 5
 23e:	8f 2e       	mov	r8, r31
 240:	f1 e0       	ldi	r31, 0x01	; 1
 242:	9f 2e       	mov	r9, r31
 244:	f0 2d       	mov	r31, r0
				{
					for (i=0;i<4;i++)
					{
						UART_TransmitByte(sen3[i]);
 246:	f4 01       	movw	r30, r8
 248:	81 91       	ld	r24, Z+
 24a:	4f 01       	movw	r8, r30
 24c:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_TransmitByte>
						//delay(1000);
					}
				}//flg 2 end
				if (flg==3)
				{
					for (i=0;i<4;i++)
 250:	8e 14       	cp	r8, r14
 252:	9f 04       	cpc	r9, r15
 254:	c1 f7       	brne	.-16     	; 0x246 <main+0xae>
					{
						UART_TransmitByte(sen3[i]);
						//delay(1000);
					}
				}//flg 3 end
				if (flg==4)
 256:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 25a:	84 30       	cpi	r24, 0x04	; 4
 25c:	81 f4       	brne	.+32     	; 0x27e <main+0xe6>
 25e:	0f 2e       	mov	r0, r31
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	8f 2e       	mov	r8, r31
 264:	f1 e0       	ldi	r31, 0x01	; 1
 266:	9f 2e       	mov	r9, r31
 268:	f0 2d       	mov	r31, r0
				{
					for (i=0;i<4;i++)
					{
						UART_TransmitByte(sen4[i]);
 26a:	f4 01       	movw	r30, r8
 26c:	81 91       	ld	r24, Z+
 26e:	4f 01       	movw	r8, r30
 270:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_TransmitByte>
						//delay(1000);
					}
				}//flg 3 end
				if (flg==4)
				{
					for (i=0;i<4;i++)
 274:	c8 14       	cp	r12, r8
 276:	d9 04       	cpc	r13, r9
 278:	c1 f7       	brne	.-16     	; 0x26a <main+0xd2>
					{
						UART_TransmitByte(sen4[i]);
						//delay(1000);
					}
					flg=0;//reset flag to zero
 27a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				}//flg  4 end	
			flg++;
 27e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 282:	8f 5f       	subi	r24, 0xFF	; 255
 284:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
byte sen2[]={35,85,33,2};
byte sen3[]={45,45,32,3};
byte sen4[]={55,45,31,4};
byte flg=1;//flag for sequence of node data
int main(void)
{
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	9f ef       	ldi	r25, 0xFF	; 255
 28c:	f5 01       	movw	r30, r10
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0xf6>
 292:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 294:	09 f4       	brne	.+2      	; 0x298 <main+0x100>
 296:	a1 cf       	rjmp	.-190    	; 0x1da <main+0x42>
 298:	f9 cf       	rjmp	.-14     	; 0x28c <main+0xf4>
						UART_TransmitByte(sen1[i]);
						//delay(1000);
					}	
						
				}//flg 1 end
				if (flg==2)
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	51 f6       	brne	.-108    	; 0x232 <main+0x9a>
 29e:	bb cf       	rjmp	.-138    	; 0x216 <main+0x7e>
					{
						UART_TransmitByte(sen2[i]);
						//delay(1000);
					}
				}//flg 2 end
				if (flg==3)
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	c9 f6       	brne	.-78     	; 0x256 <main+0xbe>
 2a4:	ca cf       	rjmp	.-108    	; 0x23a <main+0xa2>
					{
						UART_TransmitByte(sen3[i]);
						//delay(1000);
					}
				}//flg 3 end
				if (flg==4)
 2a6:	84 30       	cpi	r24, 0x04	; 4
 2a8:	51 f7       	brne	.-44     	; 0x27e <main+0xe6>
 2aa:	d9 cf       	rjmp	.-78     	; 0x25e <main+0xc6>

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
