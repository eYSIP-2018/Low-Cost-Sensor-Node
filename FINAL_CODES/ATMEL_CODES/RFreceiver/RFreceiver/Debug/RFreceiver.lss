
RFreceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001278  0000130c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800134  00800134  00001340  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005cce  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010ef  00000000  00000000  000073ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e4a  00000000  00000000  000084bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b54  00000000  00000000  0000a308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001357  00000000  00000000  0000ae5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000429d  00000000  00000000  0000c1b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_6>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_14>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	fe 02       	muls	r31, r30

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e8 e7       	ldi	r30, 0x78	; 120
      7e:	f2 e1       	ldi	r31, 0x12	; 18
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a4 33       	cpi	r26, 0x34	; 52
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a4 e3       	ldi	r26, 0x34	; 52
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a2 35       	cpi	r26, 0x52	; 82
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 2b 09 	call	0x1256	; 0x1256 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 32 02 	call	0x464	; 0x464 <main>
      b6:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <UART_Init>:
	ADCSRA |= _BV(ADSC) + _BV(ADEN); // Convert
	while (bit_is_set(ADCSRA,ADSC)); // wait till conversion Complete
	result = ADCL;// Read ADC result lower bytes
	result |= ADCH<<8;// Read ADC result higher bytes
	return result; // return unsigned int 16 bit ADC Conversion value
}
      be:	e1 ec       	ldi	r30, 0xC1	; 193
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	10 82       	st	Z, r1
      c4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      c8:	a2 ec       	ldi	r26, 0xC2	; 194
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	8c 91       	ld	r24, X
      ce:	8e 60       	ori	r24, 0x0E	; 14
      d0:	8c 93       	st	X, r24
      d2:	8e ec       	ldi	r24, 0xCE	; 206
      d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      dc:	80 81       	ld	r24, Z
      de:	88 61       	ori	r24, 0x18	; 24
      e0:	80 83       	st	Z, r24
      e2:	08 95       	ret

000000e4 <UART_Transmit>:
      e4:	90 e4       	ldi	r25, 0x40	; 64
      e6:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      ea:	e0 ec       	ldi	r30, 0xC0	; 192
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	90 81       	ld	r25, Z
      f0:	95 ff       	sbrs	r25, 5
      f2:	fd cf       	rjmp	.-6      	; 0xee <UART_Transmit+0xa>
      f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      f8:	e0 ec       	ldi	r30, 0xC0	; 192
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	86 ff       	sbrs	r24, 6
     100:	fd cf       	rjmp	.-6      	; 0xfc <UART_Transmit+0x18>
     102:	08 95       	ret

00000104 <UART_Printf>:
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	fc 01       	movw	r30, r24
     10c:	80 81       	ld	r24, Z
     10e:	88 23       	and	r24, r24
     110:	59 f0       	breq	.+22     	; 0x128 <UART_Printf+0x24>
     112:	8f 01       	movw	r16, r30
     114:	c0 e0       	ldi	r28, 0x00	; 0
     116:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     11a:	cf 5f       	subi	r28, 0xFF	; 255
     11c:	f8 01       	movw	r30, r16
     11e:	ec 0f       	add	r30, r28
     120:	f1 1d       	adc	r31, r1
     122:	80 81       	ld	r24, Z
     124:	81 11       	cpse	r24, r1
     126:	f7 cf       	rjmp	.-18     	; 0x116 <UART_Printf+0x12>
     128:	cf 91       	pop	r28
     12a:	1f 91       	pop	r17
     12c:	0f 91       	pop	r16
     12e:	08 95       	ret

00000130 <UART_Print_Num>:
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	8c 01       	movw	r16, r24
     13a:	9c 01       	movw	r18, r24
     13c:	32 95       	swap	r19
     13e:	22 95       	swap	r18
     140:	2f 70       	andi	r18, 0x0F	; 15
     142:	23 27       	eor	r18, r19
     144:	3f 70       	andi	r19, 0x0F	; 15
     146:	23 27       	eor	r18, r19
     148:	a7 e4       	ldi	r26, 0x47	; 71
     14a:	b3 e0       	ldi	r27, 0x03	; 3
     14c:	0e 94 1c 09 	call	0x1238	; 0x1238 <__umulhisi3>
     150:	96 95       	lsr	r25
     152:	87 95       	ror	r24
     154:	96 95       	lsr	r25
     156:	87 95       	ror	r24
     158:	96 95       	lsr	r25
     15a:	87 95       	ror	r24
     15c:	80 5d       	subi	r24, 0xD0	; 208
     15e:	80 33       	cpi	r24, 0x30	; 48
     160:	11 f0       	breq	.+4      	; 0x166 <UART_Print_Num+0x36>
     162:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     166:	98 01       	movw	r18, r16
     168:	32 95       	swap	r19
     16a:	22 95       	swap	r18
     16c:	2f 70       	andi	r18, 0x0F	; 15
     16e:	23 27       	eor	r18, r19
     170:	3f 70       	andi	r19, 0x0F	; 15
     172:	23 27       	eor	r18, r19
     174:	a7 e4       	ldi	r26, 0x47	; 71
     176:	b3 e0       	ldi	r27, 0x03	; 3
     178:	0e 94 1c 09 	call	0x1238	; 0x1238 <__umulhisi3>
     17c:	ec 01       	movw	r28, r24
     17e:	d6 95       	lsr	r29
     180:	c7 95       	ror	r28
     182:	d6 95       	lsr	r29
     184:	c7 95       	ror	r28
     186:	d6 95       	lsr	r29
     188:	c7 95       	ror	r28
     18a:	20 e1       	ldi	r18, 0x10	; 16
     18c:	37 e2       	ldi	r19, 0x27	; 39
     18e:	c2 9f       	mul	r28, r18
     190:	c0 01       	movw	r24, r0
     192:	c3 9f       	mul	r28, r19
     194:	90 0d       	add	r25, r0
     196:	d2 9f       	mul	r29, r18
     198:	90 0d       	add	r25, r0
     19a:	11 24       	eor	r1, r1
     19c:	e8 01       	movw	r28, r16
     19e:	c8 1b       	sub	r28, r24
     1a0:	d9 0b       	sbc	r29, r25
     1a2:	9e 01       	movw	r18, r28
     1a4:	36 95       	lsr	r19
     1a6:	27 95       	ror	r18
     1a8:	36 95       	lsr	r19
     1aa:	27 95       	ror	r18
     1ac:	36 95       	lsr	r19
     1ae:	27 95       	ror	r18
     1b0:	a5 ec       	ldi	r26, 0xC5	; 197
     1b2:	b0 e2       	ldi	r27, 0x20	; 32
     1b4:	0e 94 1c 09 	call	0x1238	; 0x1238 <__umulhisi3>
     1b8:	92 95       	swap	r25
     1ba:	82 95       	swap	r24
     1bc:	8f 70       	andi	r24, 0x0F	; 15
     1be:	89 27       	eor	r24, r25
     1c0:	9f 70       	andi	r25, 0x0F	; 15
     1c2:	89 27       	eor	r24, r25
     1c4:	80 5d       	subi	r24, 0xD0	; 208
     1c6:	80 33       	cpi	r24, 0x30	; 48
     1c8:	11 f0       	breq	.+4      	; 0x1ce <UART_Print_Num+0x9e>
     1ca:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     1ce:	9e 01       	movw	r18, r28
     1d0:	36 95       	lsr	r19
     1d2:	27 95       	ror	r18
     1d4:	36 95       	lsr	r19
     1d6:	27 95       	ror	r18
     1d8:	36 95       	lsr	r19
     1da:	27 95       	ror	r18
     1dc:	a5 ec       	ldi	r26, 0xC5	; 197
     1de:	b0 e2       	ldi	r27, 0x20	; 32
     1e0:	0e 94 1c 09 	call	0x1238	; 0x1238 <__umulhisi3>
     1e4:	8c 01       	movw	r16, r24
     1e6:	12 95       	swap	r17
     1e8:	02 95       	swap	r16
     1ea:	0f 70       	andi	r16, 0x0F	; 15
     1ec:	01 27       	eor	r16, r17
     1ee:	1f 70       	andi	r17, 0x0F	; 15
     1f0:	01 27       	eor	r16, r17
     1f2:	28 ee       	ldi	r18, 0xE8	; 232
     1f4:	33 e0       	ldi	r19, 0x03	; 3
     1f6:	02 9f       	mul	r16, r18
     1f8:	c0 01       	movw	r24, r0
     1fa:	03 9f       	mul	r16, r19
     1fc:	90 0d       	add	r25, r0
     1fe:	12 9f       	mul	r17, r18
     200:	90 0d       	add	r25, r0
     202:	11 24       	eor	r1, r1
     204:	8e 01       	movw	r16, r28
     206:	08 1b       	sub	r16, r24
     208:	19 0b       	sbc	r17, r25
     20a:	98 01       	movw	r18, r16
     20c:	36 95       	lsr	r19
     20e:	27 95       	ror	r18
     210:	36 95       	lsr	r19
     212:	27 95       	ror	r18
     214:	ab e7       	ldi	r26, 0x7B	; 123
     216:	b4 e1       	ldi	r27, 0x14	; 20
     218:	0e 94 1c 09 	call	0x1238	; 0x1238 <__umulhisi3>
     21c:	96 95       	lsr	r25
     21e:	87 95       	ror	r24
     220:	80 5d       	subi	r24, 0xD0	; 208
     222:	80 33       	cpi	r24, 0x30	; 48
     224:	11 f0       	breq	.+4      	; 0x22a <UART_Print_Num+0xfa>
     226:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     22a:	98 01       	movw	r18, r16
     22c:	36 95       	lsr	r19
     22e:	27 95       	ror	r18
     230:	36 95       	lsr	r19
     232:	27 95       	ror	r18
     234:	ab e7       	ldi	r26, 0x7B	; 123
     236:	b4 e1       	ldi	r27, 0x14	; 20
     238:	0e 94 1c 09 	call	0x1238	; 0x1238 <__umulhisi3>
     23c:	ec 01       	movw	r28, r24
     23e:	d6 95       	lsr	r29
     240:	c7 95       	ror	r28
     242:	24 e6       	ldi	r18, 0x64	; 100
     244:	2c 9f       	mul	r18, r28
     246:	c0 01       	movw	r24, r0
     248:	2d 9f       	mul	r18, r29
     24a:	90 0d       	add	r25, r0
     24c:	11 24       	eor	r1, r1
     24e:	e8 01       	movw	r28, r16
     250:	c8 1b       	sub	r28, r24
     252:	d9 0b       	sbc	r29, r25
     254:	9e 01       	movw	r18, r28
     256:	ad ec       	ldi	r26, 0xCD	; 205
     258:	bc ec       	ldi	r27, 0xCC	; 204
     25a:	0e 94 1c 09 	call	0x1238	; 0x1238 <__umulhisi3>
     25e:	96 95       	lsr	r25
     260:	87 95       	ror	r24
     262:	96 95       	lsr	r25
     264:	87 95       	ror	r24
     266:	96 95       	lsr	r25
     268:	87 95       	ror	r24
     26a:	80 5d       	subi	r24, 0xD0	; 208
     26c:	80 33       	cpi	r24, 0x30	; 48
     26e:	11 f0       	breq	.+4      	; 0x274 <UART_Print_Num+0x144>
     270:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     274:	9e 01       	movw	r18, r28
     276:	ad ec       	ldi	r26, 0xCD	; 205
     278:	bc ec       	ldi	r27, 0xCC	; 204
     27a:	0e 94 1c 09 	call	0x1238	; 0x1238 <__umulhisi3>
     27e:	96 95       	lsr	r25
     280:	87 95       	ror	r24
     282:	96 95       	lsr	r25
     284:	87 95       	ror	r24
     286:	96 95       	lsr	r25
     288:	87 95       	ror	r24
     28a:	9c 01       	movw	r18, r24
     28c:	22 0f       	add	r18, r18
     28e:	33 1f       	adc	r19, r19
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	88 0f       	add	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	82 0f       	add	r24, r18
     29e:	93 1f       	adc	r25, r19
     2a0:	9e 01       	movw	r18, r28
     2a2:	28 1b       	sub	r18, r24
     2a4:	39 0b       	sbc	r19, r25
     2a6:	c9 01       	movw	r24, r18
     2a8:	80 5d       	subi	r24, 0xD0	; 208
     2aa:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2ae:	8a e0       	ldi	r24, 0x0A	; 10
     2b0:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	08 95       	ret

000002be <UART_Print_Numchar>:
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	d8 2f       	mov	r29, r24
     2c4:	c9 e2       	ldi	r28, 0x29	; 41
     2c6:	8c 9f       	mul	r24, r28
     2c8:	c1 2d       	mov	r28, r1
     2ca:	11 24       	eor	r1, r1
     2cc:	c2 95       	swap	r28
     2ce:	cf 70       	andi	r28, 0x0F	; 15
     2d0:	80 e3       	ldi	r24, 0x30	; 48
     2d2:	8c 0f       	add	r24, r28
     2d4:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2d8:	84 e6       	ldi	r24, 0x64	; 100
     2da:	c8 9f       	mul	r28, r24
     2dc:	d0 19       	sub	r29, r0
     2de:	11 24       	eor	r1, r1
     2e0:	cd ec       	ldi	r28, 0xCD	; 205
     2e2:	dc 9f       	mul	r29, r28
     2e4:	c1 2d       	mov	r28, r1
     2e6:	11 24       	eor	r1, r1
     2e8:	c6 95       	lsr	r28
     2ea:	c6 95       	lsr	r28
     2ec:	c6 95       	lsr	r28
     2ee:	80 e3       	ldi	r24, 0x30	; 48
     2f0:	8c 0f       	add	r24, r28
     2f2:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     2f6:	cc 0f       	add	r28, r28
     2f8:	8c 2f       	mov	r24, r28
     2fa:	88 0f       	add	r24, r24
     2fc:	88 0f       	add	r24, r24
     2fe:	c8 0f       	add	r28, r24
     300:	8d 2f       	mov	r24, r29
     302:	8c 1b       	sub	r24, r28
     304:	80 5d       	subi	r24, 0xD0	; 208
     306:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     30a:	8a e0       	ldi	r24, 0x0A	; 10
     30c:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <UART_Print_Byte>:
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	8c 01       	movw	r16, r24
     31e:	fc 01       	movw	r30, r24
     320:	80 81       	ld	r24, Z
     322:	88 23       	and	r24, r24
     324:	51 f0       	breq	.+20     	; 0x33a <UART_Print_Byte+0x24>
     326:	c0 e0       	ldi	r28, 0x00	; 0
     328:	0e 94 5f 01 	call	0x2be	; 0x2be <UART_Print_Numchar>
     32c:	cf 5f       	subi	r28, 0xFF	; 255
     32e:	f8 01       	movw	r30, r16
     330:	ec 0f       	add	r30, r28
     332:	f1 1d       	adc	r31, r1
     334:	80 81       	ld	r24, Z
     336:	81 11       	cpse	r24, r1
     338:	f7 cf       	rjmp	.-18     	; 0x328 <UART_Print_Byte+0x12>
     33a:	8a e0       	ldi	r24, 0x0A	; 10
     33c:	0e 94 72 00 	call	0xe4	; 0xe4 <UART_Transmit>
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	08 95       	ret

00000348 <Set_pin>:
     348:	61 30       	cpi	r22, 0x01	; 1
     34a:	71 05       	cpc	r23, r1
     34c:	f1 f4       	brne	.+60     	; 0x38a <Set_pin+0x42>
     34e:	88 30       	cpi	r24, 0x08	; 8
     350:	91 05       	cpc	r25, r1
     352:	70 f0       	brcs	.+28     	; 0x370 <Set_pin+0x28>
     354:	44 b1       	in	r20, 0x04	; 4
     356:	08 97       	sbiw	r24, 0x08	; 8
     358:	21 e0       	ldi	r18, 0x01	; 1
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	b9 01       	movw	r22, r18
     35e:	02 c0       	rjmp	.+4      	; 0x364 <Set_pin+0x1c>
     360:	66 0f       	add	r22, r22
     362:	77 1f       	adc	r23, r23
     364:	8a 95       	dec	r24
     366:	e2 f7       	brpl	.-8      	; 0x360 <Set_pin+0x18>
     368:	cb 01       	movw	r24, r22
     36a:	84 2b       	or	r24, r20
     36c:	84 b9       	out	0x04, r24	; 4
     36e:	08 95       	ret
     370:	4a b1       	in	r20, 0x0a	; 10
     372:	21 e0       	ldi	r18, 0x01	; 1
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	b9 01       	movw	r22, r18
     378:	02 c0       	rjmp	.+4      	; 0x37e <Set_pin+0x36>
     37a:	66 0f       	add	r22, r22
     37c:	77 1f       	adc	r23, r23
     37e:	8a 95       	dec	r24
     380:	e2 f7       	brpl	.-8      	; 0x37a <Set_pin+0x32>
     382:	cb 01       	movw	r24, r22
     384:	84 2b       	or	r24, r20
     386:	8a b9       	out	0x0a, r24	; 10
     388:	08 95       	ret
     38a:	08 97       	sbiw	r24, 0x08	; 8
     38c:	18 f0       	brcs	.+6      	; 0x394 <Set_pin+0x4c>
     38e:	84 b1       	in	r24, 0x04	; 4
     390:	84 b9       	out	0x04, r24	; 4
     392:	08 95       	ret
     394:	8a b1       	in	r24, 0x0a	; 10
     396:	8a b9       	out	0x0a, r24	; 10
     398:	08 95       	ret

0000039a <Write_Digital>:
     39a:	66 23       	and	r22, r22
     39c:	f1 f0       	breq	.+60     	; 0x3da <Write_Digital+0x40>
     39e:	88 30       	cpi	r24, 0x08	; 8
     3a0:	91 05       	cpc	r25, r1
     3a2:	70 f0       	brcs	.+28     	; 0x3c0 <Write_Digital+0x26>
     3a4:	45 b1       	in	r20, 0x05	; 5
     3a6:	08 97       	sbiw	r24, 0x08	; 8
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	b9 01       	movw	r22, r18
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <Write_Digital+0x1a>
     3b0:	66 0f       	add	r22, r22
     3b2:	77 1f       	adc	r23, r23
     3b4:	8a 95       	dec	r24
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <Write_Digital+0x16>
     3b8:	cb 01       	movw	r24, r22
     3ba:	84 2b       	or	r24, r20
     3bc:	85 b9       	out	0x05, r24	; 5
     3be:	08 95       	ret
     3c0:	4b b1       	in	r20, 0x0b	; 11
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	b9 01       	movw	r22, r18
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <Write_Digital+0x34>
     3ca:	66 0f       	add	r22, r22
     3cc:	77 1f       	adc	r23, r23
     3ce:	8a 95       	dec	r24
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <Write_Digital+0x30>
     3d2:	cb 01       	movw	r24, r22
     3d4:	84 2b       	or	r24, r20
     3d6:	8b b9       	out	0x0b, r24	; 11
     3d8:	08 95       	ret
     3da:	88 30       	cpi	r24, 0x08	; 8
     3dc:	91 05       	cpc	r25, r1
     3de:	78 f0       	brcs	.+30     	; 0x3fe <Write_Digital+0x64>
     3e0:	45 b1       	in	r20, 0x05	; 5
     3e2:	08 97       	sbiw	r24, 0x08	; 8
     3e4:	21 e0       	ldi	r18, 0x01	; 1
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	b9 01       	movw	r22, r18
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <Write_Digital+0x56>
     3ec:	66 0f       	add	r22, r22
     3ee:	77 1f       	adc	r23, r23
     3f0:	8a 95       	dec	r24
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <Write_Digital+0x52>
     3f4:	cb 01       	movw	r24, r22
     3f6:	80 95       	com	r24
     3f8:	84 23       	and	r24, r20
     3fa:	85 b9       	out	0x05, r24	; 5
     3fc:	08 95       	ret
     3fe:	4b b1       	in	r20, 0x0b	; 11
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	b9 01       	movw	r22, r18
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	66 0f       	add	r22, r22
     40a:	77 1f       	adc	r23, r23
     40c:	8a 95       	dec	r24
     40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     410:	cb 01       	movw	r24, r22
     412:	80 95       	com	r24
     414:	84 23       	and	r24, r20
     416:	8b b9       	out	0x0b, r24	; 11
     418:	08 95       	ret

0000041a <__vector_14>:
     41a:	1f 92       	push	r1
     41c:	0f 92       	push	r0
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	0f 92       	push	r0
     422:	11 24       	eor	r1, r1
     424:	8f 93       	push	r24
     426:	9f 93       	push	r25
     428:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     42c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
     430:	01 96       	adiw	r24, 0x01	; 1
     432:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x1>
     436:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
     43a:	9f 91       	pop	r25
     43c:	8f 91       	pop	r24
     43e:	0f 90       	pop	r0
     440:	0f be       	out	0x3f, r0	; 63
     442:	0f 90       	pop	r0
     444:	1f 90       	pop	r1
     446:	18 95       	reti

00000448 <__vector_6>:
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <mosfet_on>:
// turn on mosfet which is connected on D8 pin
void mosfet_on()
{
	DDRB |= 0x01;//mosfet D8 pin output
     45c:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= 0x00;// write 0 to D8 pin to turn ON P channel MOSFET
     45e:	85 b1       	in	r24, 0x05	; 5
     460:	85 b9       	out	0x05, r24	; 5
     462:	08 95       	ret

00000464 <main>:
byte p1=0;
byte p2=0;
byte p3=0;
byte p4=0;
int main(void)
{ 
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	00 d0       	rcall	.+0      	; 0x46a <main+0x6>
     46a:	00 d0       	rcall	.+0      	; 0x46c <main+0x8>
     46c:	1f 92       	push	r1
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
	cli();// disable global interrupt
     472:	f8 94       	cli
	//power to nrf start mosfet 
	mosfet_on();
     474:	0e 94 2e 02 	call	0x45c	; 0x45c <mosfet_on>
	/// initialization same as setup function in arduino
	unsigned char status1;//to read a NRF24L01 particular register using SPI
	UART_Init();	 
     478:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_Init>
	radio.begin();
     47c:	8a e3       	ldi	r24, 0x3A	; 58
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0e 94 57 06 	call	0xcae	; 0xcae <_ZN4RF245beginEv>
	radio.setDataRate(RF24_250KBPS); // set data rate 250 kbps
     484:	62 e0       	ldi	r22, 0x02	; 2
     486:	8a e3       	ldi	r24, 0x3A	; 58
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN4RF2411setDataRateE15rf24_datarate_e>
	radio.setPALevel(RF24_PA_MAX);// 0dBm power level	
     48e:	63 e0       	ldi	r22, 0x03	; 3
     490:	8a e3       	ldi	r24, 0x3A	; 58
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN4RF2410setPALevelEh>
	// Open pipes for all tansmitter nodes with their pipe number and address
	radio.openReadingPipe(1,pipes[1]);// receiver address must be same as transmitter
     498:	0f 2e       	mov	r0, r31
     49a:	f2 ee       	ldi	r31, 0xE2	; 226
     49c:	ef 2e       	mov	r14, r31
     49e:	f0 2d       	mov	r31, r0
     4a0:	0f 2e       	mov	r0, r31
     4a2:	f0 ef       	ldi	r31, 0xF0	; 240
     4a4:	ff 2e       	mov	r15, r31
     4a6:	f0 2d       	mov	r31, r0
     4a8:	00 ef       	ldi	r16, 0xF0	; 240
     4aa:	10 ef       	ldi	r17, 0xF0	; 240
     4ac:	20 ef       	ldi	r18, 0xF0	; 240
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	8a e3       	ldi	r24, 0x3A	; 58
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN4RF2415openReadingPipeEhy>
	radio.openReadingPipe(2,pipes[2]);
     4be:	0f 2e       	mov	r0, r31
     4c0:	f3 ee       	ldi	r31, 0xE3	; 227
     4c2:	ef 2e       	mov	r14, r31
     4c4:	f0 2d       	mov	r31, r0
     4c6:	20 ef       	ldi	r18, 0xF0	; 240
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e0       	ldi	r20, 0x00	; 0
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	62 e0       	ldi	r22, 0x02	; 2
     4d0:	8a e3       	ldi	r24, 0x3A	; 58
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN4RF2415openReadingPipeEhy>
	radio.openReadingPipe(3,pipes[3]);
     4d8:	0f 2e       	mov	r0, r31
     4da:	f4 ee       	ldi	r31, 0xE4	; 228
     4dc:	ef 2e       	mov	r14, r31
     4de:	f0 2d       	mov	r31, r0
     4e0:	20 ef       	ldi	r18, 0xF0	; 240
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	63 e0       	ldi	r22, 0x03	; 3
     4ea:	8a e3       	ldi	r24, 0x3A	; 58
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN4RF2415openReadingPipeEhy>
	radio.openReadingPipe(4,pipes[4]);
     4f2:	0f 2e       	mov	r0, r31
     4f4:	f5 ee       	ldi	r31, 0xE5	; 229
     4f6:	ef 2e       	mov	r14, r31
     4f8:	f0 2d       	mov	r31, r0
     4fa:	20 ef       	ldi	r18, 0xF0	; 240
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	64 e0       	ldi	r22, 0x04	; 4
     504:	8a e3       	ldi	r24, 0x3A	; 58
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN4RF2415openReadingPipeEhy>
	radio.startListening();// make radio Receiver
     50c:	8a e3       	ldi	r24, 0x3A	; 58
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	0e 94 b1 05 	call	0xb62	; 0xb62 <_ZN4RF2414startListeningEv>
	// char data[] = "";
	/// the code which runs continuously
	sei();
     514:	78 94       	sei
				p1=1;
				break;
			case 2:
				memcpy(sen2,text,4);
				//UART_Print_Byte(sen2);
				p2=1;
     516:	11 e0       	ldi	r17, 0x01	; 1
	/// the code which runs continuously
	sei();
	
	while (1)
	{  
	 unsigned char pipenum=0;//to store number of particular pipe
     518:	1d 82       	std	Y+5, r1	; 0x05
	 byte text[4] = "";// to store received data
     51a:	1a 82       	std	Y+2, r1	; 0x02
     51c:	19 82       	std	Y+1, r1	; 0x01
     51e:	1c 82       	std	Y+4, r1	; 0x04
     520:	1b 82       	std	Y+3, r1	; 0x03
		 while (radio.available(&pipenum))
     522:	be 01       	movw	r22, r28
     524:	6b 5f       	subi	r22, 0xFB	; 251
     526:	7f 4f       	sbci	r23, 0xFF	; 255
     528:	8a e3       	ldi	r24, 0x3A	; 58
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	0e 94 ed 04 	call	0x9da	; 0x9da <_ZN4RF249availableEPh>
     530:	88 23       	and	r24, r24
     532:	b9 f0       	breq	.+46     	; 0x562 <main+0xfe>
		 {	
			radio.read(&text, sizeof(text));
     534:	44 e0       	ldi	r20, 0x04	; 4
     536:	be 01       	movw	r22, r28
     538:	6f 5f       	subi	r22, 0xFF	; 255
     53a:	7f 4f       	sbci	r23, 0xFF	; 255
     53c:	8a e3       	ldi	r24, 0x3A	; 58
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN4RF244readEPvh>
			text[3] = (byte)pipenum;//last byte in data packet is pipe number
     544:	8d 81       	ldd	r24, Y+5	; 0x05
     546:	8c 83       	std	Y+4, r24	; 0x04
			// just for debugging
			// print data on serial monitor
			UART_Printf("Pipe NUM:");
     548:	80 e1       	ldi	r24, 0x10	; 16
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 82 00 	call	0x104	; 0x104 <UART_Printf>
			UART_Print_Num(pipenum);
     550:	8d 81       	ldd	r24, Y+5	; 0x05
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 98 00 	call	0x130	; 0x130 <UART_Print_Num>
			UART_Print_Byte(text);
     558:	ce 01       	movw	r24, r28
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	0e 94 8b 01 	call	0x316	; 0x316 <UART_Print_Byte>
	
	while (1)
	{  
	 unsigned char pipenum=0;//to store number of particular pipe
	 byte text[4] = "";// to store received data
		 while (radio.available(&pipenum))
     560:	e0 cf       	rjmp	.-64     	; 0x522 <main+0xbe>
			UART_Printf("Pipe NUM:");
			UART_Print_Num(pipenum);
			UART_Print_Byte(text);
		 }
	// Store received data on corresponding array of each node
		switch (pipenum)
     562:	8d 81       	ldd	r24, Y+5	; 0x05
     564:	82 30       	cpi	r24, 0x02	; 2
     566:	c1 f0       	breq	.+48     	; 0x598 <main+0x134>
     568:	18 f4       	brcc	.+6      	; 0x570 <main+0x10c>
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	31 f0       	breq	.+12     	; 0x57a <main+0x116>
     56e:	41 c0       	rjmp	.+130    	; 0x5f2 <main+0x18e>
     570:	83 30       	cpi	r24, 0x03	; 3
     572:	09 f1       	breq	.+66     	; 0x5b6 <main+0x152>
     574:	84 30       	cpi	r24, 0x04	; 4
     576:	71 f1       	breq	.+92     	; 0x5d4 <main+0x170>
     578:	3c c0       	rjmp	.+120    	; 0x5f2 <main+0x18e>
		{
			case 1:
				// copy received data into a byte array 
				memcpy(sen1,text,4);//dest,source,no of bytes
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	9a 81       	ldd	r25, Y+2	; 0x02
     57e:	ab 81       	ldd	r26, Y+3	; 0x03
     580:	bc 81       	ldd	r27, Y+4	; 0x04
     582:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sen1>
     586:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <sen1+0x1>
     58a:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <sen1+0x2>
     58e:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <sen1+0x3>
				//UART_Print_Byte(sen1);
				p1=1;
     592:	10 93 39 01 	sts	0x0139, r17	; 0x800139 <p1>
				break;
     596:	c0 cf       	rjmp	.-128    	; 0x518 <main+0xb4>
			case 2:
				memcpy(sen2,text,4);
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	9a 81       	ldd	r25, Y+2	; 0x02
     59c:	ab 81       	ldd	r26, Y+3	; 0x03
     59e:	bc 81       	ldd	r27, Y+4	; 0x04
     5a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sen2>
     5a4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <sen2+0x1>
     5a8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <sen2+0x2>
     5ac:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <sen2+0x3>
				//UART_Print_Byte(sen2);
				p2=1;
     5b0:	10 93 38 01 	sts	0x0138, r17	; 0x800138 <p2>
				break;
     5b4:	b1 cf       	rjmp	.-158    	; 0x518 <main+0xb4>
			case 3:
				memcpy(sen3,text,4);
     5b6:	89 81       	ldd	r24, Y+1	; 0x01
     5b8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ba:	ab 81       	ldd	r26, Y+3	; 0x03
     5bc:	bc 81       	ldd	r27, Y+4	; 0x04
     5be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sen3>
     5c2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <sen3+0x1>
     5c6:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <sen3+0x2>
     5ca:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <sen3+0x3>
				//UART_Print_Byte(sen3);
				p3=1;
     5ce:	10 93 37 01 	sts	0x0137, r17	; 0x800137 <p3>
				break;
     5d2:	a2 cf       	rjmp	.-188    	; 0x518 <main+0xb4>
			case 4:
			memcpy(sen4,text,4);
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	9a 81       	ldd	r25, Y+2	; 0x02
     5d8:	ab 81       	ldd	r26, Y+3	; 0x03
     5da:	bc 81       	ldd	r27, Y+4	; 0x04
     5dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     5e0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     5e4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     5e8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
				//UART_Print_Byte(sen3);
				p4=1;
     5ec:	10 93 36 01 	sts	0x0136, r17	; 0x800136 <p4>
				break;
     5f0:	93 cf       	rjmp	.-218    	; 0x518 <main+0xb4>
			default :
				UART_Printf("Nopipe");
     5f2:	8a e1       	ldi	r24, 0x1A	; 26
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 82 00 	call	0x104	; 0x104 <UART_Printf>
	radio.startListening();// make radio Receiver
	// char data[] = "";
	/// the code which runs continuously
	sei();
	
	while (1)
     5fa:	8e cf       	rjmp	.-228    	; 0x518 <main+0xb4>

000005fc <_GLOBAL__sub_I_radio>:
 * Author : sachin mahadevjadhav
 */ 
#include <avr/io.h>
#include "RF24.h"

RF24 radio(9, 10); // CE, CSN
     5fc:	4a e0       	ldi	r20, 0x0A	; 10
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	69 e0       	ldi	r22, 0x09	; 9
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	8a e3       	ldi	r24, 0x3A	; 58
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	0e 94 ba 04 	call	0x974	; 0x974 <_ZN4RF24C1Ejj>
     60c:	08 95       	ret

0000060e <_ZN4RF243csnEb>:

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
}
     60e:	4f 92       	push	r4
     610:	5f 92       	push	r5
     612:	6f 92       	push	r6
     614:	7f 92       	push	r7
     616:	8f 92       	push	r8
     618:	9f 92       	push	r9
     61a:	af 92       	push	r10
     61c:	bf 92       	push	r11
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	ec 01       	movw	r28, r24
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	9b 81       	ldd	r25, Y+3	; 0x03
     632:	0e 94 cd 01 	call	0x39a	; 0x39a <Write_Digital>
     636:	6c 89       	ldd	r22, Y+20	; 0x14
     638:	7d 89       	ldd	r23, Y+21	; 0x15
     63a:	8e 89       	ldd	r24, Y+22	; 0x16
     63c:	9f 89       	ldd	r25, Y+23	; 0x17
     63e:	0e 94 f8 07 	call	0xff0	; 0xff0 <__floatunsisf>
     642:	6b 01       	movw	r12, r22
     644:	7c 01       	movw	r14, r24
     646:	2b ea       	ldi	r18, 0xAB	; 171
     648:	3a ea       	ldi	r19, 0xAA	; 170
     64a:	4a e2       	ldi	r20, 0x2A	; 42
     64c:	50 e4       	ldi	r21, 0x40	; 64
     64e:	0e 94 af 08 	call	0x115e	; 0x115e <__mulsf3>
     652:	4b 01       	movw	r8, r22
     654:	5c 01       	movw	r10, r24
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	40 e8       	ldi	r20, 0x80	; 128
     65c:	5f e3       	ldi	r21, 0x3F	; 63
     65e:	0e 94 52 07 	call	0xea4	; 0xea4 <__cmpsf2>
     662:	88 23       	and	r24, r24
     664:	0c f4       	brge	.+2      	; 0x668 <_ZN4RF243csnEb+0x5a>
     666:	6e c0       	rjmp	.+220    	; 0x744 <_ZN4RF243csnEb+0x136>
     668:	a7 01       	movw	r20, r14
     66a:	96 01       	movw	r18, r12
     66c:	c7 01       	movw	r24, r14
     66e:	b6 01       	movw	r22, r12
     670:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__addsf3>
     674:	2b 01       	movw	r4, r22
     676:	3c 01       	movw	r6, r24
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	3f ef       	ldi	r19, 0xFF	; 255
     67c:	4f e7       	ldi	r20, 0x7F	; 127
     67e:	57 e4       	ldi	r21, 0x47	; 71
     680:	0e 94 aa 08 	call	0x1154	; 0x1154 <__gesf2>
     684:	18 16       	cp	r1, r24
     686:	0c f0       	brlt	.+2      	; 0x68a <_ZN4RF243csnEb+0x7c>
     688:	45 c0       	rjmp	.+138    	; 0x714 <_ZN4RF243csnEb+0x106>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	4a e7       	ldi	r20, 0x7A	; 122
     690:	54 e4       	ldi	r21, 0x44	; 68
     692:	c7 01       	movw	r24, r14
     694:	b6 01       	movw	r22, r12
     696:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
     69a:	4b 01       	movw	r8, r22
     69c:	5c 01       	movw	r10, r24
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	4a ef       	ldi	r20, 0xFA	; 250
     6a4:	54 e4       	ldi	r21, 0x44	; 68
     6a6:	0e 94 af 08 	call	0x115e	; 0x115e <__mulsf3>
     6aa:	6b 01       	movw	r12, r22
     6ac:	7c 01       	movw	r14, r24
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e8       	ldi	r20, 0x80	; 128
     6b4:	5f e3       	ldi	r21, 0x3F	; 63
     6b6:	0e 94 52 07 	call	0xea4	; 0xea4 <__cmpsf2>
     6ba:	88 23       	and	r24, r24
     6bc:	2c f1       	brlt	.+74     	; 0x708 <_ZN4RF243csnEb+0xfa>
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	3f ef       	ldi	r19, 0xFF	; 255
     6c2:	4f e7       	ldi	r20, 0x7F	; 127
     6c4:	57 e4       	ldi	r21, 0x47	; 71
     6c6:	c7 01       	movw	r24, r14
     6c8:	b6 01       	movw	r22, r12
     6ca:	0e 94 aa 08 	call	0x1154	; 0x1154 <__gesf2>
     6ce:	18 16       	cp	r1, r24
     6d0:	b4 f4       	brge	.+44     	; 0x6fe <_ZN4RF243csnEb+0xf0>
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e2       	ldi	r20, 0x20	; 32
     6d8:	51 e4       	ldi	r21, 0x41	; 65
     6da:	c5 01       	movw	r24, r10
     6dc:	b4 01       	movw	r22, r8
     6de:	0e 94 af 08 	call	0x115e	; 0x115e <__mulsf3>
     6e2:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixunssfsi>
     6e6:	61 15       	cp	r22, r1
     6e8:	71 05       	cpc	r23, r1
     6ea:	69 f1       	breq	.+90     	; 0x746 <_ZN4RF243csnEb+0x138>
     6ec:	28 ec       	ldi	r18, 0xC8	; 200
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	c9 01       	movw	r24, r18
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <_ZN4RF243csnEb+0xe4>
     6f6:	61 50       	subi	r22, 0x01	; 1
     6f8:	71 09       	sbc	r23, r1
     6fa:	d1 f7       	brne	.-12     	; 0x6f0 <_ZN4RF243csnEb+0xe2>
     6fc:	24 c0       	rjmp	.+72     	; 0x746 <_ZN4RF243csnEb+0x138>
     6fe:	c7 01       	movw	r24, r14
     700:	b6 01       	movw	r22, r12
     702:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixunssfsi>
     706:	02 c0       	rjmp	.+4      	; 0x70c <_ZN4RF243csnEb+0xfe>
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	cb 01       	movw	r24, r22
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <_ZN4RF243csnEb+0x100>
     712:	19 c0       	rjmp	.+50     	; 0x746 <_ZN4RF243csnEb+0x138>
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	4f e7       	ldi	r20, 0x7F	; 127
     71a:	53 e4       	ldi	r21, 0x43	; 67
     71c:	c5 01       	movw	r24, r10
     71e:	b4 01       	movw	r22, r8
     720:	0e 94 aa 08 	call	0x1154	; 0x1154 <__gesf2>
     724:	18 16       	cp	r1, r24
     726:	44 f4       	brge	.+16     	; 0x738 <_ZN4RF243csnEb+0x12a>
     728:	c3 01       	movw	r24, r6
     72a:	b2 01       	movw	r22, r4
     72c:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixunssfsi>
     730:	cb 01       	movw	r24, r22
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <_ZN4RF243csnEb+0x124>
     736:	0a c0       	rjmp	.+20     	; 0x74c <_ZN4RF243csnEb+0x13e>
     738:	c5 01       	movw	r24, r10
     73a:	b4 01       	movw	r22, r8
     73c:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fixunssfsi>
     740:	16 2f       	mov	r17, r22
     742:	01 c0       	rjmp	.+2      	; 0x746 <_ZN4RF243csnEb+0x138>
     744:	11 e0       	ldi	r17, 0x01	; 1
     746:	61 2f       	mov	r22, r17
     748:	6a 95       	dec	r22
     74a:	f1 f7       	brne	.-4      	; 0x748 <_ZN4RF243csnEb+0x13a>
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	bf 90       	pop	r11
     75c:	af 90       	pop	r10
     75e:	9f 90       	pop	r9
     760:	8f 90       	pop	r8
     762:	7f 90       	pop	r7
     764:	6f 90       	pop	r6
     766:	5f 90       	pop	r5
     768:	4f 90       	pop	r4
     76a:	08 95       	ret

0000076c <_ZN4RF242ceEb>:
     76c:	fc 01       	movw	r30, r24
     76e:	80 81       	ld	r24, Z
     770:	91 81       	ldd	r25, Z+1	; 0x01
     772:	22 81       	ldd	r18, Z+2	; 0x02
     774:	33 81       	ldd	r19, Z+3	; 0x03
     776:	82 17       	cp	r24, r18
     778:	93 07       	cpc	r25, r19
     77a:	11 f0       	breq	.+4      	; 0x780 <_ZN4RF242ceEb+0x14>
     77c:	0e 94 cd 01 	call	0x39a	; 0x39a <Write_Digital>
     780:	84 e0       	ldi	r24, 0x04	; 4
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <_ZN4RF242ceEb+0x18>
     788:	08 95       	ret

0000078a <_ZN4RF2413read_registerEh>:
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	8c 01       	movw	r16, r24
     792:	c6 2f       	mov	r28, r22
     794:	80 e5       	ldi	r24, 0x50	; 80
     796:	8c bd       	out	0x2c, r24	; 44
     798:	1d bc       	out	0x2d, r1	; 45
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	c8 01       	movw	r24, r16
     79e:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF243csnEb>
     7a2:	cf 71       	andi	r28, 0x1F	; 31
     7a4:	ce bd       	out	0x2e, r28	; 46
     7a6:	00 00       	nop
     7a8:	0d b4       	in	r0, 0x2d	; 45
     7aa:	07 fe       	sbrs	r0, 7
     7ac:	fd cf       	rjmp	.-6      	; 0x7a8 <_ZN4RF2413read_registerEh+0x1e>
     7ae:	8e b5       	in	r24, 0x2e	; 46
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	8e bd       	out	0x2e, r24	; 46
     7b4:	00 00       	nop
     7b6:	0d b4       	in	r0, 0x2d	; 45
     7b8:	07 fe       	sbrs	r0, 7
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <_ZN4RF2413read_registerEh+0x2c>
     7bc:	ce b5       	in	r28, 0x2e	; 46
     7be:	61 e0       	ldi	r22, 0x01	; 1
     7c0:	c8 01       	movw	r24, r16
     7c2:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF243csnEb>
     7c6:	8c 2f       	mov	r24, r28
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	08 95       	ret

000007d0 <_ZN4RF2414write_registerEhPKhh>:
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	8c 01       	movw	r16, r24
     7de:	c6 2f       	mov	r28, r22
     7e0:	e4 2e       	mov	r14, r20
     7e2:	f5 2e       	mov	r15, r21
     7e4:	d2 2f       	mov	r29, r18
     7e6:	80 e5       	ldi	r24, 0x50	; 80
     7e8:	8c bd       	out	0x2c, r24	; 44
     7ea:	1d bc       	out	0x2d, r1	; 45
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	c8 01       	movw	r24, r16
     7f0:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF243csnEb>
     7f4:	cf 71       	andi	r28, 0x1F	; 31
     7f6:	c0 62       	ori	r28, 0x20	; 32
     7f8:	ce bd       	out	0x2e, r28	; 46
     7fa:	00 00       	nop
     7fc:	0d b4       	in	r0, 0x2d	; 45
     7fe:	07 fe       	sbrs	r0, 7
     800:	fd cf       	rjmp	.-6      	; 0x7fc <_ZN4RF2414write_registerEhPKhh+0x2c>
     802:	ce b5       	in	r28, 0x2e	; 46
     804:	8f ef       	ldi	r24, 0xFF	; 255
     806:	8d 0f       	add	r24, r29
     808:	dd 23       	and	r29, r29
     80a:	59 f0       	breq	.+22     	; 0x822 <_ZN4RF2414write_registerEhPKhh+0x52>
     80c:	ee 2d       	mov	r30, r14
     80e:	ff 2d       	mov	r31, r15
     810:	91 91       	ld	r25, Z+
     812:	9e bd       	out	0x2e, r25	; 46
     814:	00 00       	nop
     816:	0d b4       	in	r0, 0x2d	; 45
     818:	07 fe       	sbrs	r0, 7
     81a:	fd cf       	rjmp	.-6      	; 0x816 <_ZN4RF2414write_registerEhPKhh+0x46>
     81c:	9e b5       	in	r25, 0x2e	; 46
     81e:	81 50       	subi	r24, 0x01	; 1
     820:	b8 f7       	brcc	.-18     	; 0x810 <_ZN4RF2414write_registerEhPKhh+0x40>
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	c8 01       	movw	r24, r16
     826:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF243csnEb>
     82a:	8c 2f       	mov	r24, r28
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	08 95       	ret

0000083a <_ZN4RF2414write_registerEhh>:
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	8c 01       	movw	r16, r24
     844:	c6 2f       	mov	r28, r22
     846:	d4 2f       	mov	r29, r20
     848:	80 e5       	ldi	r24, 0x50	; 80
     84a:	8c bd       	out	0x2c, r24	; 44
     84c:	1d bc       	out	0x2d, r1	; 45
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	c8 01       	movw	r24, r16
     852:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF243csnEb>
     856:	cf 71       	andi	r28, 0x1F	; 31
     858:	c0 62       	ori	r28, 0x20	; 32
     85a:	ce bd       	out	0x2e, r28	; 46
     85c:	00 00       	nop
     85e:	0d b4       	in	r0, 0x2d	; 45
     860:	07 fe       	sbrs	r0, 7
     862:	fd cf       	rjmp	.-6      	; 0x85e <_ZN4RF2414write_registerEhh+0x24>
     864:	ce b5       	in	r28, 0x2e	; 46
     866:	de bd       	out	0x2e, r29	; 46
     868:	00 00       	nop
     86a:	0d b4       	in	r0, 0x2d	; 45
     86c:	07 fe       	sbrs	r0, 7
     86e:	fd cf       	rjmp	.-6      	; 0x86a <_ZN4RF2414write_registerEhh+0x30>
     870:	8e b5       	in	r24, 0x2e	; 46
     872:	61 e0       	ldi	r22, 0x01	; 1
     874:	c8 01       	movw	r24, r16
     876:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF243csnEb>
     87a:	8c 2f       	mov	r24, r28
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	08 95       	ret

00000886 <_ZN4RF2412read_payloadEPvh>:
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
     896:	d6 2e       	mov	r13, r22
     898:	e7 2e       	mov	r14, r23
     89a:	8f 81       	ldd	r24, Y+7	; 0x07
     89c:	08 2f       	mov	r16, r24
     89e:	48 17       	cp	r20, r24
     8a0:	08 f4       	brcc	.+2      	; 0x8a4 <_ZN4RF2412read_payloadEPvh+0x1e>
     8a2:	04 2f       	mov	r16, r20
     8a4:	98 85       	ldd	r25, Y+8	; 0x08
     8a6:	91 11       	cpse	r25, r1
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <_ZN4RF2412read_payloadEPvh+0x2a>
     8aa:	18 2f       	mov	r17, r24
     8ac:	10 1b       	sub	r17, r16
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <_ZN4RF2412read_payloadEPvh+0x2c>
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	80 e5       	ldi	r24, 0x50	; 80
     8b4:	8c bd       	out	0x2c, r24	; 44
     8b6:	1d bc       	out	0x2d, r1	; 45
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	ce 01       	movw	r24, r28
     8bc:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF243csnEb>
     8c0:	81 e6       	ldi	r24, 0x61	; 97
     8c2:	8e bd       	out	0x2e, r24	; 46
     8c4:	00 00       	nop
     8c6:	0d b4       	in	r0, 0x2d	; 45
     8c8:	07 fe       	sbrs	r0, 7
     8ca:	fd cf       	rjmp	.-6      	; 0x8c6 <_ZN4RF2412read_payloadEPvh+0x40>
     8cc:	fe b4       	in	r15, 0x2e	; 46
     8ce:	8f ef       	ldi	r24, 0xFF	; 255
     8d0:	80 0f       	add	r24, r16
     8d2:	01 11       	cpse	r16, r1
     8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <_ZN4RF2412read_payloadEPvh+0x5a>
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	81 0f       	add	r24, r17
     8da:	11 11       	cpse	r17, r1
     8dc:	0e c0       	rjmp	.+28     	; 0x8fa <_ZN4RF2412read_payloadEPvh+0x74>
     8de:	16 c0       	rjmp	.+44     	; 0x90c <__stack+0xd>
     8e0:	ed 2d       	mov	r30, r13
     8e2:	fe 2d       	mov	r31, r14
     8e4:	2f ef       	ldi	r18, 0xFF	; 255
     8e6:	2e bd       	out	0x2e, r18	; 46
     8e8:	00 00       	nop
     8ea:	0d b4       	in	r0, 0x2d	; 45
     8ec:	07 fe       	sbrs	r0, 7
     8ee:	fd cf       	rjmp	.-6      	; 0x8ea <_ZN4RF2412read_payloadEPvh+0x64>
     8f0:	9e b5       	in	r25, 0x2e	; 46
     8f2:	91 93       	st	Z+, r25
     8f4:	81 50       	subi	r24, 0x01	; 1
     8f6:	b8 f7       	brcc	.-18     	; 0x8e6 <_ZN4RF2412read_payloadEPvh+0x60>
     8f8:	ee cf       	rjmp	.-36     	; 0x8d6 <_ZN4RF2412read_payloadEPvh+0x50>
     8fa:	9f ef       	ldi	r25, 0xFF	; 255
     8fc:	9e bd       	out	0x2e, r25	; 46
     8fe:	00 00       	nop
     900:	0d b4       	in	r0, 0x2d	; 45
     902:	07 fe       	sbrs	r0, 7
     904:	fd cf       	rjmp	.-6      	; 0x900 <__stack+0x1>
     906:	2e b5       	in	r18, 0x2e	; 46
     908:	81 50       	subi	r24, 0x01	; 1
     90a:	c0 f7       	brcc	.-16     	; 0x8fc <_ZN4RF2412read_payloadEPvh+0x76>
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	ce 01       	movw	r24, r28
     910:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF243csnEb>
     914:	8f 2d       	mov	r24, r15
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	08 95       	ret

00000926 <_ZN4RF248spiTransEh>:
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	ec 01       	movw	r28, r24
     92e:	16 2f       	mov	r17, r22
     930:	80 e5       	ldi	r24, 0x50	; 80
     932:	8c bd       	out	0x2c, r24	; 44
     934:	1d bc       	out	0x2d, r1	; 45
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF243csnEb>
     93e:	1e bd       	out	0x2e, r17	; 46
     940:	00 00       	nop
     942:	0d b4       	in	r0, 0x2d	; 45
     944:	07 fe       	sbrs	r0, 7
     946:	fd cf       	rjmp	.-6      	; 0x942 <_ZN4RF248spiTransEh+0x1c>
     948:	1e b5       	in	r17, 0x2e	; 46
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	ce 01       	movw	r24, r28
     94e:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF243csnEb>
     952:	81 2f       	mov	r24, r17
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	08 95       	ret

0000095c <_ZN4RF248flush_rxEv>:
     95c:	62 ee       	ldi	r22, 0xE2	; 226
     95e:	0e 94 93 04 	call	0x926	; 0x926 <_ZN4RF248spiTransEh>
     962:	08 95       	ret

00000964 <_ZN4RF248flush_txEv>:
     964:	61 ee       	ldi	r22, 0xE1	; 225
     966:	0e 94 93 04 	call	0x926	; 0x926 <_ZN4RF248spiTransEh>
     96a:	08 95       	ret

0000096c <_ZN4RF2410get_statusEv>:
     96c:	6f ef       	ldi	r22, 0xFF	; 255
     96e:	0e 94 93 04 	call	0x926	; 0x926 <_ZN4RF248spiTransEh>
     972:	08 95       	ret

00000974 <_ZN4RF24C1Ejj>:
     974:	fc 01       	movw	r30, r24
     976:	71 83       	std	Z+1, r23	; 0x01
     978:	60 83       	st	Z, r22
     97a:	53 83       	std	Z+3, r21	; 0x03
     97c:	42 83       	std	Z+2, r20	; 0x02
     97e:	16 82       	std	Z+6, r1	; 0x06
     980:	80 e2       	ldi	r24, 0x20	; 32
     982:	87 83       	std	Z+7, r24	; 0x07
     984:	10 86       	std	Z+8, r1	; 0x08
     986:	85 e0       	ldi	r24, 0x05	; 5
     988:	86 87       	std	Z+14, r24	; 0x0e
     98a:	85 e0       	ldi	r24, 0x05	; 5
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 e0       	ldi	r26, 0x00	; 0
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	84 8b       	std	Z+20, r24	; 0x14
     994:	95 8b       	std	Z+21, r25	; 0x15
     996:	a6 8b       	std	Z+22, r26	; 0x16
     998:	b7 8b       	std	Z+23, r27	; 0x17
     99a:	11 86       	std	Z+9, r1	; 0x09
     99c:	08 95       	ret

0000099e <_ZN4RF2410setChannelEh>:
     99e:	6d 37       	cpi	r22, 0x7D	; 125
     9a0:	10 f4       	brcc	.+4      	; 0x9a6 <_ZN4RF2410setChannelEh+0x8>
     9a2:	46 2f       	mov	r20, r22
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <_ZN4RF2410setChannelEh+0xa>
     9a6:	4d e7       	ldi	r20, 0x7D	; 125
     9a8:	65 e0       	ldi	r22, 0x05	; 5
     9aa:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>
     9ae:	08 95       	ret

000009b0 <_ZN4RF247powerUpEv>:
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	ec 01       	movw	r28, r24
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN4RF2413read_registerEh>
     9bc:	81 fd       	sbrc	r24, 1
     9be:	0a c0       	rjmp	.+20     	; 0x9d4 <_ZN4RF247powerUpEv+0x24>
     9c0:	48 2f       	mov	r20, r24
     9c2:	42 60       	ori	r20, 0x02	; 2
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	ce 01       	movw	r24, r28
     9c8:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>
     9cc:	80 e1       	ldi	r24, 0x10	; 16
     9ce:	97 e2       	ldi	r25, 0x27	; 39
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <_ZN4RF247powerUpEv+0x20>
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <_ZN4RF249availableEPh>:
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	ec 01       	movw	r28, r24
     9e4:	8b 01       	movw	r16, r22
     9e6:	67 e1       	ldi	r22, 0x17	; 23
     9e8:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN4RF2413read_registerEh>
     9ec:	80 fd       	sbrc	r24, 0
     9ee:	0e c0       	rjmp	.+28     	; 0xa0c <_ZN4RF249availableEPh+0x32>
     9f0:	01 15       	cp	r16, r1
     9f2:	11 05       	cpc	r17, r1
     9f4:	69 f0       	breq	.+26     	; 0xa10 <_ZN4RF249availableEPh+0x36>
     9f6:	ce 01       	movw	r24, r28
     9f8:	0e 94 b6 04 	call	0x96c	; 0x96c <_ZN4RF2410get_statusEv>
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	95 95       	asr	r25
     a00:	87 95       	ror	r24
     a02:	87 70       	andi	r24, 0x07	; 7
     a04:	f8 01       	movw	r30, r16
     a06:	80 83       	st	Z, r24
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	03 c0       	rjmp	.+6      	; 0xa12 <_ZN4RF249availableEPh+0x38>
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <_ZN4RF249availableEPh+0x38>
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	08 95       	ret

00000a1c <_ZN4RF244readEPvh>:
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	ec 01       	movw	r28, r24
     a22:	0e 94 43 04 	call	0x886	; 0x886 <_ZN4RF2412read_payloadEPvh>
     a26:	40 e7       	ldi	r20, 0x70	; 112
     a28:	67 e0       	ldi	r22, 0x07	; 7
     a2a:	ce 01       	movw	r24, r28
     a2c:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <_ZN4RF2415openReadingPipeEhy>:
     a36:	af 92       	push	r10
     a38:	bf 92       	push	r11
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	28 97       	sbiw	r28, 0x08	; 8
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
     a58:	5c 01       	movw	r10, r24
     a5a:	d6 2e       	mov	r13, r22
     a5c:	e9 82       	std	Y+1, r14	; 0x01
     a5e:	fa 82       	std	Y+2, r15	; 0x02
     a60:	0b 83       	std	Y+3, r16	; 0x03
     a62:	1c 83       	std	Y+4, r17	; 0x04
     a64:	2d 83       	std	Y+5, r18	; 0x05
     a66:	3e 83       	std	Y+6, r19	; 0x06
     a68:	4f 83       	std	Y+7, r20	; 0x07
     a6a:	58 87       	std	Y+8, r21	; 0x08
     a6c:	61 11       	cpse	r22, r1
     a6e:	0b c0       	rjmp	.+22     	; 0xa86 <_ZN4RF2415openReadingPipeEhy+0x50>
     a70:	dc 01       	movw	r26, r24
     a72:	1e 96       	adiw	r26, 0x0e	; 14
     a74:	4c 91       	ld	r20, X
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	be 01       	movw	r22, r28
     a7a:	6f 5f       	subi	r22, 0xFF	; 255
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	09 96       	adiw	r24, 0x09	; 9
     a80:	0e 94 31 09 	call	0x1262	; 0x1262 <memcpy>
     a84:	06 c0       	rjmp	.+12     	; 0xa92 <_ZN4RF2415openReadingPipeEhy+0x5c>
     a86:	b6 e0       	ldi	r27, 0x06	; 6
     a88:	b6 17       	cp	r27, r22
     a8a:	e8 f1       	brcs	.+122    	; 0xb06 <_ZN4RF2415openReadingPipeEhy+0xd0>
     a8c:	e1 e0       	ldi	r30, 0x01	; 1
     a8e:	e6 17       	cp	r30, r22
     a90:	78 f0       	brcs	.+30     	; 0xab0 <_ZN4RF2415openReadingPipeEhy+0x7a>
     a92:	ed 2d       	mov	r30, r13
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	e9 5d       	subi	r30, 0xD9	; 217
     a98:	fe 4f       	sbci	r31, 0xFE	; 254
     a9a:	d5 01       	movw	r26, r10
     a9c:	1e 96       	adiw	r26, 0x0e	; 14
     a9e:	2c 91       	ld	r18, X
     aa0:	ae 01       	movw	r20, r28
     aa2:	4f 5f       	subi	r20, 0xFF	; 255
     aa4:	5f 4f       	sbci	r21, 0xFF	; 255
     aa6:	60 81       	ld	r22, Z
     aa8:	c5 01       	movw	r24, r10
     aaa:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_ZN4RF2414write_registerEhPKhh>
     aae:	0b c0       	rjmp	.+22     	; 0xac6 <_ZN4RF2415openReadingPipeEhy+0x90>
     ab0:	e6 2f       	mov	r30, r22
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	e9 5d       	subi	r30, 0xD9	; 217
     ab6:	fe 4f       	sbci	r31, 0xFE	; 254
     ab8:	21 e0       	ldi	r18, 0x01	; 1
     aba:	ae 01       	movw	r20, r28
     abc:	4f 5f       	subi	r20, 0xFF	; 255
     abe:	5f 4f       	sbci	r21, 0xFF	; 255
     ac0:	60 81       	ld	r22, Z
     ac2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_ZN4RF2414write_registerEhPKhh>
     ac6:	0d 2d       	mov	r16, r13
     ac8:	10 e0       	ldi	r17, 0x00	; 0
     aca:	f8 01       	movw	r30, r16
     acc:	ef 5d       	subi	r30, 0xDF	; 223
     ace:	fe 4f       	sbci	r31, 0xFE	; 254
     ad0:	d5 01       	movw	r26, r10
     ad2:	17 96       	adiw	r26, 0x07	; 7
     ad4:	4c 91       	ld	r20, X
     ad6:	60 81       	ld	r22, Z
     ad8:	c5 01       	movw	r24, r10
     ada:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>
     ade:	62 e0       	ldi	r22, 0x02	; 2
     ae0:	c5 01       	movw	r24, r10
     ae2:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN4RF2413read_registerEh>
     ae6:	f8 01       	movw	r30, r16
     ae8:	e3 5d       	subi	r30, 0xD3	; 211
     aea:	fe 4f       	sbci	r31, 0xFE	; 254
     aec:	41 e0       	ldi	r20, 0x01	; 1
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	00 80       	ld	r0, Z
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <_ZN4RF2415openReadingPipeEhy+0xc2>
     af4:	44 0f       	add	r20, r20
     af6:	55 1f       	adc	r21, r21
     af8:	0a 94       	dec	r0
     afa:	e2 f7       	brpl	.-8      	; 0xaf4 <_ZN4RF2415openReadingPipeEhy+0xbe>
     afc:	48 2b       	or	r20, r24
     afe:	62 e0       	ldi	r22, 0x02	; 2
     b00:	c5 01       	movw	r24, r10
     b02:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>
     b06:	28 96       	adiw	r28, 0x08	; 8
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	df 90       	pop	r13
     b20:	bf 90       	pop	r11
     b22:	af 90       	pop	r10
     b24:	08 95       	ret

00000b26 <_ZN4RF2416closeReadingPipeEh>:
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	ec 01       	movw	r28, r24
     b2e:	16 2f       	mov	r17, r22
     b30:	62 e0       	ldi	r22, 0x02	; 2
     b32:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN4RF2413read_registerEh>
     b36:	e1 2f       	mov	r30, r17
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	e3 5d       	subi	r30, 0xD3	; 211
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	41 e0       	ldi	r20, 0x01	; 1
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	00 80       	ld	r0, Z
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <_ZN4RF2416closeReadingPipeEh+0x24>
     b46:	44 0f       	add	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	0a 94       	dec	r0
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <_ZN4RF2416closeReadingPipeEh+0x20>
     b4e:	40 95       	com	r20
     b50:	48 23       	and	r20, r24
     b52:	62 e0       	ldi	r22, 0x02	; 2
     b54:	ce 01       	movw	r24, r28
     b56:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	08 95       	ret

00000b62 <_ZN4RF2414startListeningEv>:
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	ec 01       	movw	r28, r24
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN4RF2413read_registerEh>
     b6e:	48 2f       	mov	r20, r24
     b70:	41 60       	ori	r20, 0x01	; 1
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	ce 01       	movw	r24, r28
     b76:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>
     b7a:	40 e7       	ldi	r20, 0x70	; 112
     b7c:	67 e0       	ldi	r22, 0x07	; 7
     b7e:	ce 01       	movw	r24, r28
     b80:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	ce 01       	movw	r24, r28
     b88:	0e 94 b6 03 	call	0x76c	; 0x76c <_ZN4RF242ceEb>
     b8c:	89 85       	ldd	r24, Y+9	; 0x09
     b8e:	88 23       	and	r24, r24
     b90:	49 f0       	breq	.+18     	; 0xba4 <_ZN4RF2414startListeningEv+0x42>
     b92:	2e 85       	ldd	r18, Y+14	; 0x0e
     b94:	ae 01       	movw	r20, r28
     b96:	47 5f       	subi	r20, 0xF7	; 247
     b98:	5f 4f       	sbci	r21, 0xFF	; 255
     b9a:	6a e0       	ldi	r22, 0x0A	; 10
     b9c:	ce 01       	movw	r24, r28
     b9e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_ZN4RF2414write_registerEhPKhh>
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <_ZN4RF2414startListeningEv+0x4a>
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	ce 01       	movw	r24, r28
     ba8:	0e 94 93 05 	call	0xb26	; 0xb26 <_ZN4RF2416closeReadingPipeEh>
     bac:	6d e1       	ldi	r22, 0x1D	; 29
     bae:	ce 01       	movw	r24, r28
     bb0:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN4RF2413read_registerEh>
     bb4:	81 ff       	sbrs	r24, 1
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <_ZN4RF2414startListeningEv+0x5c>
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN4RF248flush_txEv>
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <_ZN4RF2415toggle_featuresEv>:
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	ec 01       	movw	r28, r24
     bcc:	10 e5       	ldi	r17, 0x50	; 80
     bce:	1c bd       	out	0x2c, r17	; 44
     bd0:	1d bc       	out	0x2d, r1	; 45
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF243csnEb>
     bd8:	1e bd       	out	0x2e, r17	; 46
     bda:	00 00       	nop
     bdc:	0d b4       	in	r0, 0x2d	; 45
     bde:	07 fe       	sbrs	r0, 7
     be0:	fd cf       	rjmp	.-6      	; 0xbdc <_ZN4RF2415toggle_featuresEv+0x18>
     be2:	8e b5       	in	r24, 0x2e	; 46
     be4:	83 e7       	ldi	r24, 0x73	; 115
     be6:	8e bd       	out	0x2e, r24	; 46
     be8:	00 00       	nop
     bea:	0d b4       	in	r0, 0x2d	; 45
     bec:	07 fe       	sbrs	r0, 7
     bee:	fd cf       	rjmp	.-6      	; 0xbea <_ZN4RF2415toggle_featuresEv+0x26>
     bf0:	8e b5       	in	r24, 0x2e	; 46
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	ce 01       	movw	r24, r28
     bf6:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF243csnEb>
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	08 95       	ret

00000c02 <_ZN4RF2410setPALevelEh>:
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	8c 01       	movw	r16, r24
     c0a:	c6 2f       	mov	r28, r22
     c0c:	66 e0       	ldi	r22, 0x06	; 6
     c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN4RF2413read_registerEh>
     c12:	88 7f       	andi	r24, 0xF8	; 248
     c14:	c4 30       	cpi	r28, 0x04	; 4
     c16:	18 f4       	brcc	.+6      	; 0xc1e <_ZN4RF2410setPALevelEh+0x1c>
     c18:	cc 0f       	add	r28, r28
     c1a:	cf 5f       	subi	r28, 0xFF	; 255
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <_ZN4RF2410setPALevelEh+0x1e>
     c1e:	c7 e0       	ldi	r28, 0x07	; 7
     c20:	4c 2f       	mov	r20, r28
     c22:	48 2b       	or	r20, r24
     c24:	66 e0       	ldi	r22, 0x06	; 6
     c26:	c8 01       	movw	r24, r16
     c28:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	08 95       	ret

00000c34 <_ZN4RF2411setDataRateE15rf24_datarate_e>:

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	ec 01       	movw	r28, r24
     c3e:	06 2f       	mov	r16, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     c40:	66 e0       	ldi	r22, 0x06	; 6
     c42:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     c46:	18 2f       	mov	r17, r24
     c48:	17 7d       	andi	r17, 0xD7	; 215
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
  //#endif
  if( speed == RF24_250KBPS )
     c4a:	02 30       	cpi	r16, 0x02	; 2
     c4c:	51 f4       	brne	.+20     	; 0xc62 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2e>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
     c4e:	10 62       	ori	r17, 0x20	; 32
 /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=450;
  #else //16Mhz Arduino*/
	txDelay=155;
     c50:	8b e9       	ldi	r24, 0x9B	; 155
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	88 8b       	std	Y+16, r24	; 0x10
     c5a:	99 8b       	std	Y+17, r25	; 0x11
     c5c:	aa 8b       	std	Y+18, r26	; 0x12
     c5e:	bb 8b       	std	Y+19, r27	; 0x13
     c60:	14 c0       	rjmp	.+40     	; 0xc8a <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     c62:	01 30       	cpi	r16, 0x01	; 1
     c64:	49 f0       	breq	.+18     	; 0xc78 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
/*  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
     c66:	85 e5       	ldi	r24, 0x55	; 85
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	88 8b       	std	Y+16, r24	; 0x10
     c70:	99 8b       	std	Y+17, r25	; 0x11
     c72:	aa 8b       	std	Y+18, r26	; 0x12
     c74:	bb 8b       	std	Y+19, r27	; 0x13
     c76:	09 c0       	rjmp	.+18     	; 0xc8a <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
     c78:	18 60       	ori	r17, 0x08	; 8
     /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txDelay=190;
      #else //16Mhz Arduino	*/  
	 txDelay=65;
     c7a:	81 e4       	ldi	r24, 0x41	; 65
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 e0       	ldi	r26, 0x00	; 0
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	88 8b       	std	Y+16, r24	; 0x10
     c84:	99 8b       	std	Y+17, r25	; 0x11
     c86:	aa 8b       	std	Y+18, r26	; 0x12
     c88:	bb 8b       	std	Y+19, r27	; 0x13
	  //#endif
    }
  }
  write_register(RF_SETUP,setup);
     c8a:	41 2f       	mov	r20, r17
     c8c:	66 e0       	ldi	r22, 0x06	; 6
     c8e:	ce 01       	movw	r24, r28
     c90:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     c94:	66 e0       	ldi	r22, 0x06	; 6
     c96:	ce 01       	movw	r24, r28
     c98:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN4RF2413read_registerEh>
  {
    result = true;
  }
  return result;
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	18 13       	cpse	r17, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
}
     ca2:	89 2f       	mov	r24, r25
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	08 95       	ret

00000cae <_ZN4RF245beginEv>:
}

/****************************************************************************/

bool RF24::begin(void)
{
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	ec 01       	movw	r28, r24
  uint8_t setup=0;

    if (ce_pin != csn_pin) Set_pin(ce_pin,OUT);  
     cb6:	88 81       	ld	r24, Y
     cb8:	99 81       	ldd	r25, Y+1	; 0x01
     cba:	2a 81       	ldd	r18, Y+2	; 0x02
     cbc:	3b 81       	ldd	r19, Y+3	; 0x03
     cbe:	82 17       	cp	r24, r18
     cc0:	93 07       	cpc	r25, r19
     cc2:	21 f0       	breq	.+8      	; 0xccc <_ZN4RF245beginEv+0x1e>
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	0e 94 a4 01 	call	0x348	; 0x348 <Set_pin>
        Set_pin(csn_pin,OUT);
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	9b 81       	ldd	r25, Y+3	; 0x03
     cd4:	0e 94 a4 01 	call	0x348	; 0x348 <Set_pin>
    _SPI.begin();
     cd8:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN8SPIClass5beginEv>
    ce(low);
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	ce 01       	movw	r24, r28
     ce0:	0e 94 b6 03 	call	0x76c	; 0x76c <_ZN4RF242ceEb>
  	csn(high);
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	ce 01       	movw	r24, r28
     ce8:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF243csnEb>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     cec:	80 e1       	ldi	r24, 0x10	; 16
     cee:	97 e2       	ldi	r25, 0x27	; 39
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <_ZN4RF245beginEv+0x42>
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: _delay_ms is based on P-variant whereby non-P *may* require different timing.
  _delay_ms( 5 ) ;

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;
     cf4:	4c e0       	ldi	r20, 0x0C	; 12
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	ce 01       	movw	r24, r28
     cfa:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     cfe:	4f e5       	ldi	r20, 0x5F	; 95
     d00:	64 e0       	ldi	r22, 0x04	; 4
     d02:	ce 01       	movw	r24, r28
     d04:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
     d08:	62 e0       	ldi	r22, 0x02	; 2
     d0a:	ce 01       	movw	r24, r28
     d0c:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     d10:	88 23       	and	r24, r24
     d12:	11 f0       	breq	.+4      	; 0xd18 <_ZN4RF245beginEv+0x6a>
  {
    p_variant = true ;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	8e 83       	std	Y+6, r24	; 0x06
  }
  setup = read_register(RF_SETUP);
     d18:	66 e0       	ldi	r22, 0x06	; 6
     d1a:	ce 01       	movw	r24, r28
     d1c:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN4RF2413read_registerEh>
     d20:	18 2f       	mov	r17, r24
 if( setup == 0b00001110 )     // register default for nRF24L01P
     d22:	8e 30       	cpi	r24, 0x0E	; 14
     d24:	11 f4       	brne	.+4      	; 0xd2a <_ZN4RF245beginEv+0x7c>
  {
    p_variant = true ;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	8e 83       	std	Y+6, r24	; 0x06
  }
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	ce 01       	movw	r24, r28
     d2e:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
     d32:	ce 01       	movw	r24, r28
     d34:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	6d e1       	ldi	r22, 0x1D	; 29
     d3c:	ce 01       	movw	r24, r28
     d3e:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
     d42:	40 e0       	ldi	r20, 0x00	; 0
     d44:	6c e1       	ldi	r22, 0x1C	; 28
     d46:	ce 01       	movw	r24, r28
     d48:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>
  dynamic_payloads_enabled = false;
     d4c:	18 86       	std	Y+8, r1	; 0x08

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     d4e:	40 e7       	ldi	r20, 0x70	; 112
     d50:	67 e0       	ldi	r22, 0x07	; 7
     d52:	ce 01       	movw	r24, r28
     d54:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
     d58:	6c e4       	ldi	r22, 0x4C	; 76
     d5a:	ce 01       	movw	r24, r28
     d5c:	0e 94 cf 04 	call	0x99e	; 0x99e <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
     d60:	ce 01       	movw	r24, r28
     d62:	0e 94 ae 04 	call	0x95c	; 0x95c <_ZN4RF248flush_rxEv>
  flush_tx();
     d66:	ce 01       	movw	r24, r28
     d68:	0e 94 b2 04 	call	0x964	; 0x964 <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
     d6c:	ce 01       	movw	r24, r28
     d6e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	ce 01       	movw	r24, r28
     d76:	0e 94 c5 03 	call	0x78a	; 0x78a <_ZN4RF2413read_registerEh>
     d7a:	48 2f       	mov	r20, r24
     d7c:	4e 7f       	andi	r20, 0xFE	; 254
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	ce 01       	movw	r24, r28
     d82:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
     d86:	11 50       	subi	r17, 0x01	; 1
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	1e 3f       	cpi	r17, 0xFE	; 254
     d8c:	08 f0       	brcs	.+2      	; 0xd90 <_ZN4RF245beginEv+0xe2>
     d8e:	80 e0       	ldi	r24, 0x00	; 0
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	08 95       	ret

00000d98 <_ZN8SPIClass5beginEv>:
void SPIClass::begin()
{
 //  cli();//noInterrupts(); // Protect from a scheduler and prevent transactionBegin
 
    
    Set_pin(SS, OUT);
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	8a e0       	ldi	r24, 0x0A	; 10
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 a4 01 	call	0x348	; 0x348 <Set_pin>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUT.
    SPCR |= _BV(MSTR);
     da4:	8c b5       	in	r24, 0x2c	; 44
     da6:	80 61       	ori	r24, 0x10	; 16
     da8:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     daa:	8c b5       	in	r24, 0x2c	; 44
     dac:	80 64       	ori	r24, 0x40	; 64
     dae:	8c bd       	out	0x2c, r24	; 44
    // Set direction register for SCK and MOSI pin.
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    Set_pin(SCK, OUT);
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	8d e0       	ldi	r24, 0x0D	; 13
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 a4 01 	call	0x348	; 0x348 <Set_pin>
    Set_pin(MOSI, OUT);
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	8b e0       	ldi	r24, 0x0B	; 11
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 a4 01 	call	0x348	; 0x348 <Set_pin>
     dc8:	08 95       	ret

00000dca <__subsf3>:
     dca:	50 58       	subi	r21, 0x80	; 128

00000dcc <__addsf3>:
     dcc:	bb 27       	eor	r27, r27
     dce:	aa 27       	eor	r26, r26
     dd0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__addsf3x>
     dd4:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_round>
     dd8:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_pscA>
     ddc:	38 f0       	brcs	.+14     	; 0xdec <__addsf3+0x20>
     dde:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_pscB>
     de2:	20 f0       	brcs	.+8      	; 0xdec <__addsf3+0x20>
     de4:	39 f4       	brne	.+14     	; 0xdf4 <__addsf3+0x28>
     de6:	9f 3f       	cpi	r25, 0xFF	; 255
     de8:	19 f4       	brne	.+6      	; 0xdf0 <__addsf3+0x24>
     dea:	26 f4       	brtc	.+8      	; 0xdf4 <__addsf3+0x28>
     dec:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__fp_nan>
     df0:	0e f4       	brtc	.+2      	; 0xdf4 <__addsf3+0x28>
     df2:	e0 95       	com	r30
     df4:	e7 fb       	bst	r30, 7
     df6:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_inf>

00000dfa <__addsf3x>:
     dfa:	e9 2f       	mov	r30, r25
     dfc:	0e 94 81 08 	call	0x1102	; 0x1102 <__fp_split3>
     e00:	58 f3       	brcs	.-42     	; 0xdd8 <__addsf3+0xc>
     e02:	ba 17       	cp	r27, r26
     e04:	62 07       	cpc	r22, r18
     e06:	73 07       	cpc	r23, r19
     e08:	84 07       	cpc	r24, r20
     e0a:	95 07       	cpc	r25, r21
     e0c:	20 f0       	brcs	.+8      	; 0xe16 <__addsf3x+0x1c>
     e0e:	79 f4       	brne	.+30     	; 0xe2e <__addsf3x+0x34>
     e10:	a6 f5       	brtc	.+104    	; 0xe7a <__addsf3x+0x80>
     e12:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_zero>
     e16:	0e f4       	brtc	.+2      	; 0xe1a <__addsf3x+0x20>
     e18:	e0 95       	com	r30
     e1a:	0b 2e       	mov	r0, r27
     e1c:	ba 2f       	mov	r27, r26
     e1e:	a0 2d       	mov	r26, r0
     e20:	0b 01       	movw	r0, r22
     e22:	b9 01       	movw	r22, r18
     e24:	90 01       	movw	r18, r0
     e26:	0c 01       	movw	r0, r24
     e28:	ca 01       	movw	r24, r20
     e2a:	a0 01       	movw	r20, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	ff 27       	eor	r31, r31
     e30:	59 1b       	sub	r21, r25
     e32:	99 f0       	breq	.+38     	; 0xe5a <__addsf3x+0x60>
     e34:	59 3f       	cpi	r21, 0xF9	; 249
     e36:	50 f4       	brcc	.+20     	; 0xe4c <__addsf3x+0x52>
     e38:	50 3e       	cpi	r21, 0xE0	; 224
     e3a:	68 f1       	brcs	.+90     	; 0xe96 <__addsf3x+0x9c>
     e3c:	1a 16       	cp	r1, r26
     e3e:	f0 40       	sbci	r31, 0x00	; 0
     e40:	a2 2f       	mov	r26, r18
     e42:	23 2f       	mov	r18, r19
     e44:	34 2f       	mov	r19, r20
     e46:	44 27       	eor	r20, r20
     e48:	58 5f       	subi	r21, 0xF8	; 248
     e4a:	f3 cf       	rjmp	.-26     	; 0xe32 <__addsf3x+0x38>
     e4c:	46 95       	lsr	r20
     e4e:	37 95       	ror	r19
     e50:	27 95       	ror	r18
     e52:	a7 95       	ror	r26
     e54:	f0 40       	sbci	r31, 0x00	; 0
     e56:	53 95       	inc	r21
     e58:	c9 f7       	brne	.-14     	; 0xe4c <__addsf3x+0x52>
     e5a:	7e f4       	brtc	.+30     	; 0xe7a <__addsf3x+0x80>
     e5c:	1f 16       	cp	r1, r31
     e5e:	ba 0b       	sbc	r27, r26
     e60:	62 0b       	sbc	r22, r18
     e62:	73 0b       	sbc	r23, r19
     e64:	84 0b       	sbc	r24, r20
     e66:	ba f0       	brmi	.+46     	; 0xe96 <__addsf3x+0x9c>
     e68:	91 50       	subi	r25, 0x01	; 1
     e6a:	a1 f0       	breq	.+40     	; 0xe94 <__addsf3x+0x9a>
     e6c:	ff 0f       	add	r31, r31
     e6e:	bb 1f       	adc	r27, r27
     e70:	66 1f       	adc	r22, r22
     e72:	77 1f       	adc	r23, r23
     e74:	88 1f       	adc	r24, r24
     e76:	c2 f7       	brpl	.-16     	; 0xe68 <__addsf3x+0x6e>
     e78:	0e c0       	rjmp	.+28     	; 0xe96 <__addsf3x+0x9c>
     e7a:	ba 0f       	add	r27, r26
     e7c:	62 1f       	adc	r22, r18
     e7e:	73 1f       	adc	r23, r19
     e80:	84 1f       	adc	r24, r20
     e82:	48 f4       	brcc	.+18     	; 0xe96 <__addsf3x+0x9c>
     e84:	87 95       	ror	r24
     e86:	77 95       	ror	r23
     e88:	67 95       	ror	r22
     e8a:	b7 95       	ror	r27
     e8c:	f7 95       	ror	r31
     e8e:	9e 3f       	cpi	r25, 0xFE	; 254
     e90:	08 f0       	brcs	.+2      	; 0xe94 <__addsf3x+0x9a>
     e92:	b0 cf       	rjmp	.-160    	; 0xdf4 <__addsf3+0x28>
     e94:	93 95       	inc	r25
     e96:	88 0f       	add	r24, r24
     e98:	08 f0       	brcs	.+2      	; 0xe9c <__addsf3x+0xa2>
     e9a:	99 27       	eor	r25, r25
     e9c:	ee 0f       	add	r30, r30
     e9e:	97 95       	ror	r25
     ea0:	87 95       	ror	r24
     ea2:	08 95       	ret

00000ea4 <__cmpsf2>:
     ea4:	0e 94 35 08 	call	0x106a	; 0x106a <__fp_cmp>
     ea8:	08 f4       	brcc	.+2      	; 0xeac <__cmpsf2+0x8>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	08 95       	ret

00000eae <__divsf3>:
     eae:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divsf3x>
     eb2:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_round>
     eb6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_pscB>
     eba:	58 f0       	brcs	.+22     	; 0xed2 <__divsf3+0x24>
     ebc:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_pscA>
     ec0:	40 f0       	brcs	.+16     	; 0xed2 <__divsf3+0x24>
     ec2:	29 f4       	brne	.+10     	; 0xece <__divsf3+0x20>
     ec4:	5f 3f       	cpi	r21, 0xFF	; 255
     ec6:	29 f0       	breq	.+10     	; 0xed2 <__divsf3+0x24>
     ec8:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_inf>
     ecc:	51 11       	cpse	r21, r1
     ece:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_szero>
     ed2:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__fp_nan>

00000ed6 <__divsf3x>:
     ed6:	0e 94 81 08 	call	0x1102	; 0x1102 <__fp_split3>
     eda:	68 f3       	brcs	.-38     	; 0xeb6 <__divsf3+0x8>

00000edc <__divsf3_pse>:
     edc:	99 23       	and	r25, r25
     ede:	b1 f3       	breq	.-20     	; 0xecc <__divsf3+0x1e>
     ee0:	55 23       	and	r21, r21
     ee2:	91 f3       	breq	.-28     	; 0xec8 <__divsf3+0x1a>
     ee4:	95 1b       	sub	r25, r21
     ee6:	55 0b       	sbc	r21, r21
     ee8:	bb 27       	eor	r27, r27
     eea:	aa 27       	eor	r26, r26
     eec:	62 17       	cp	r22, r18
     eee:	73 07       	cpc	r23, r19
     ef0:	84 07       	cpc	r24, r20
     ef2:	38 f0       	brcs	.+14     	; 0xf02 <__divsf3_pse+0x26>
     ef4:	9f 5f       	subi	r25, 0xFF	; 255
     ef6:	5f 4f       	sbci	r21, 0xFF	; 255
     ef8:	22 0f       	add	r18, r18
     efa:	33 1f       	adc	r19, r19
     efc:	44 1f       	adc	r20, r20
     efe:	aa 1f       	adc	r26, r26
     f00:	a9 f3       	breq	.-22     	; 0xeec <__divsf3_pse+0x10>
     f02:	35 d0       	rcall	.+106    	; 0xf6e <__divsf3_pse+0x92>
     f04:	0e 2e       	mov	r0, r30
     f06:	3a f0       	brmi	.+14     	; 0xf16 <__divsf3_pse+0x3a>
     f08:	e0 e8       	ldi	r30, 0x80	; 128
     f0a:	32 d0       	rcall	.+100    	; 0xf70 <__divsf3_pse+0x94>
     f0c:	91 50       	subi	r25, 0x01	; 1
     f0e:	50 40       	sbci	r21, 0x00	; 0
     f10:	e6 95       	lsr	r30
     f12:	00 1c       	adc	r0, r0
     f14:	ca f7       	brpl	.-14     	; 0xf08 <__divsf3_pse+0x2c>
     f16:	2b d0       	rcall	.+86     	; 0xf6e <__divsf3_pse+0x92>
     f18:	fe 2f       	mov	r31, r30
     f1a:	29 d0       	rcall	.+82     	; 0xf6e <__divsf3_pse+0x92>
     f1c:	66 0f       	add	r22, r22
     f1e:	77 1f       	adc	r23, r23
     f20:	88 1f       	adc	r24, r24
     f22:	bb 1f       	adc	r27, r27
     f24:	26 17       	cp	r18, r22
     f26:	37 07       	cpc	r19, r23
     f28:	48 07       	cpc	r20, r24
     f2a:	ab 07       	cpc	r26, r27
     f2c:	b0 e8       	ldi	r27, 0x80	; 128
     f2e:	09 f0       	breq	.+2      	; 0xf32 <__divsf3_pse+0x56>
     f30:	bb 0b       	sbc	r27, r27
     f32:	80 2d       	mov	r24, r0
     f34:	bf 01       	movw	r22, r30
     f36:	ff 27       	eor	r31, r31
     f38:	93 58       	subi	r25, 0x83	; 131
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
     f3c:	3a f0       	brmi	.+14     	; 0xf4c <__divsf3_pse+0x70>
     f3e:	9e 3f       	cpi	r25, 0xFE	; 254
     f40:	51 05       	cpc	r21, r1
     f42:	78 f0       	brcs	.+30     	; 0xf62 <__divsf3_pse+0x86>
     f44:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_inf>
     f48:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_szero>
     f4c:	5f 3f       	cpi	r21, 0xFF	; 255
     f4e:	e4 f3       	brlt	.-8      	; 0xf48 <__divsf3_pse+0x6c>
     f50:	98 3e       	cpi	r25, 0xE8	; 232
     f52:	d4 f3       	brlt	.-12     	; 0xf48 <__divsf3_pse+0x6c>
     f54:	86 95       	lsr	r24
     f56:	77 95       	ror	r23
     f58:	67 95       	ror	r22
     f5a:	b7 95       	ror	r27
     f5c:	f7 95       	ror	r31
     f5e:	9f 5f       	subi	r25, 0xFF	; 255
     f60:	c9 f7       	brne	.-14     	; 0xf54 <__divsf3_pse+0x78>
     f62:	88 0f       	add	r24, r24
     f64:	91 1d       	adc	r25, r1
     f66:	96 95       	lsr	r25
     f68:	87 95       	ror	r24
     f6a:	97 f9       	bld	r25, 7
     f6c:	08 95       	ret
     f6e:	e1 e0       	ldi	r30, 0x01	; 1
     f70:	66 0f       	add	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	88 1f       	adc	r24, r24
     f76:	bb 1f       	adc	r27, r27
     f78:	62 17       	cp	r22, r18
     f7a:	73 07       	cpc	r23, r19
     f7c:	84 07       	cpc	r24, r20
     f7e:	ba 07       	cpc	r27, r26
     f80:	20 f0       	brcs	.+8      	; 0xf8a <__divsf3_pse+0xae>
     f82:	62 1b       	sub	r22, r18
     f84:	73 0b       	sbc	r23, r19
     f86:	84 0b       	sbc	r24, r20
     f88:	ba 0b       	sbc	r27, r26
     f8a:	ee 1f       	adc	r30, r30
     f8c:	88 f7       	brcc	.-30     	; 0xf70 <__divsf3_pse+0x94>
     f8e:	e0 95       	com	r30
     f90:	08 95       	ret

00000f92 <__fixunssfsi>:
     f92:	0e 94 89 08 	call	0x1112	; 0x1112 <__fp_splitA>
     f96:	88 f0       	brcs	.+34     	; 0xfba <__fixunssfsi+0x28>
     f98:	9f 57       	subi	r25, 0x7F	; 127
     f9a:	98 f0       	brcs	.+38     	; 0xfc2 <__fixunssfsi+0x30>
     f9c:	b9 2f       	mov	r27, r25
     f9e:	99 27       	eor	r25, r25
     fa0:	b7 51       	subi	r27, 0x17	; 23
     fa2:	b0 f0       	brcs	.+44     	; 0xfd0 <__fixunssfsi+0x3e>
     fa4:	e1 f0       	breq	.+56     	; 0xfde <__fixunssfsi+0x4c>
     fa6:	66 0f       	add	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	1a f0       	brmi	.+6      	; 0xfb6 <__fixunssfsi+0x24>
     fb0:	ba 95       	dec	r27
     fb2:	c9 f7       	brne	.-14     	; 0xfa6 <__fixunssfsi+0x14>
     fb4:	14 c0       	rjmp	.+40     	; 0xfde <__fixunssfsi+0x4c>
     fb6:	b1 30       	cpi	r27, 0x01	; 1
     fb8:	91 f0       	breq	.+36     	; 0xfde <__fixunssfsi+0x4c>
     fba:	0e 94 a3 08 	call	0x1146	; 0x1146 <__fp_zero>
     fbe:	b1 e0       	ldi	r27, 0x01	; 1
     fc0:	08 95       	ret
     fc2:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__fp_zero>
     fc6:	67 2f       	mov	r22, r23
     fc8:	78 2f       	mov	r23, r24
     fca:	88 27       	eor	r24, r24
     fcc:	b8 5f       	subi	r27, 0xF8	; 248
     fce:	39 f0       	breq	.+14     	; 0xfde <__fixunssfsi+0x4c>
     fd0:	b9 3f       	cpi	r27, 0xF9	; 249
     fd2:	cc f3       	brlt	.-14     	; 0xfc6 <__fixunssfsi+0x34>
     fd4:	86 95       	lsr	r24
     fd6:	77 95       	ror	r23
     fd8:	67 95       	ror	r22
     fda:	b3 95       	inc	r27
     fdc:	d9 f7       	brne	.-10     	; 0xfd4 <__fixunssfsi+0x42>
     fde:	3e f4       	brtc	.+14     	; 0xfee <__fixunssfsi+0x5c>
     fe0:	90 95       	com	r25
     fe2:	80 95       	com	r24
     fe4:	70 95       	com	r23
     fe6:	61 95       	neg	r22
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	8f 4f       	sbci	r24, 0xFF	; 255
     fec:	9f 4f       	sbci	r25, 0xFF	; 255
     fee:	08 95       	ret

00000ff0 <__floatunsisf>:
     ff0:	e8 94       	clt
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <__floatsisf+0x12>

00000ff4 <__floatsisf>:
     ff4:	97 fb       	bst	r25, 7
     ff6:	3e f4       	brtc	.+14     	; 0x1006 <__floatsisf+0x12>
     ff8:	90 95       	com	r25
     ffa:	80 95       	com	r24
     ffc:	70 95       	com	r23
     ffe:	61 95       	neg	r22
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	8f 4f       	sbci	r24, 0xFF	; 255
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	99 23       	and	r25, r25
    1008:	a9 f0       	breq	.+42     	; 0x1034 <__floatsisf+0x40>
    100a:	f9 2f       	mov	r31, r25
    100c:	96 e9       	ldi	r25, 0x96	; 150
    100e:	bb 27       	eor	r27, r27
    1010:	93 95       	inc	r25
    1012:	f6 95       	lsr	r31
    1014:	87 95       	ror	r24
    1016:	77 95       	ror	r23
    1018:	67 95       	ror	r22
    101a:	b7 95       	ror	r27
    101c:	f1 11       	cpse	r31, r1
    101e:	f8 cf       	rjmp	.-16     	; 0x1010 <__floatsisf+0x1c>
    1020:	fa f4       	brpl	.+62     	; 0x1060 <__floatsisf+0x6c>
    1022:	bb 0f       	add	r27, r27
    1024:	11 f4       	brne	.+4      	; 0x102a <__floatsisf+0x36>
    1026:	60 ff       	sbrs	r22, 0
    1028:	1b c0       	rjmp	.+54     	; 0x1060 <__floatsisf+0x6c>
    102a:	6f 5f       	subi	r22, 0xFF	; 255
    102c:	7f 4f       	sbci	r23, 0xFF	; 255
    102e:	8f 4f       	sbci	r24, 0xFF	; 255
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	16 c0       	rjmp	.+44     	; 0x1060 <__floatsisf+0x6c>
    1034:	88 23       	and	r24, r24
    1036:	11 f0       	breq	.+4      	; 0x103c <__floatsisf+0x48>
    1038:	96 e9       	ldi	r25, 0x96	; 150
    103a:	11 c0       	rjmp	.+34     	; 0x105e <__floatsisf+0x6a>
    103c:	77 23       	and	r23, r23
    103e:	21 f0       	breq	.+8      	; 0x1048 <__floatsisf+0x54>
    1040:	9e e8       	ldi	r25, 0x8E	; 142
    1042:	87 2f       	mov	r24, r23
    1044:	76 2f       	mov	r23, r22
    1046:	05 c0       	rjmp	.+10     	; 0x1052 <__floatsisf+0x5e>
    1048:	66 23       	and	r22, r22
    104a:	71 f0       	breq	.+28     	; 0x1068 <__floatsisf+0x74>
    104c:	96 e8       	ldi	r25, 0x86	; 134
    104e:	86 2f       	mov	r24, r22
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	2a f0       	brmi	.+10     	; 0x1060 <__floatsisf+0x6c>
    1056:	9a 95       	dec	r25
    1058:	66 0f       	add	r22, r22
    105a:	77 1f       	adc	r23, r23
    105c:	88 1f       	adc	r24, r24
    105e:	da f7       	brpl	.-10     	; 0x1056 <__floatsisf+0x62>
    1060:	88 0f       	add	r24, r24
    1062:	96 95       	lsr	r25
    1064:	87 95       	ror	r24
    1066:	97 f9       	bld	r25, 7
    1068:	08 95       	ret

0000106a <__fp_cmp>:
    106a:	99 0f       	add	r25, r25
    106c:	00 08       	sbc	r0, r0
    106e:	55 0f       	add	r21, r21
    1070:	aa 0b       	sbc	r26, r26
    1072:	e0 e8       	ldi	r30, 0x80	; 128
    1074:	fe ef       	ldi	r31, 0xFE	; 254
    1076:	16 16       	cp	r1, r22
    1078:	17 06       	cpc	r1, r23
    107a:	e8 07       	cpc	r30, r24
    107c:	f9 07       	cpc	r31, r25
    107e:	c0 f0       	brcs	.+48     	; 0x10b0 <__fp_cmp+0x46>
    1080:	12 16       	cp	r1, r18
    1082:	13 06       	cpc	r1, r19
    1084:	e4 07       	cpc	r30, r20
    1086:	f5 07       	cpc	r31, r21
    1088:	98 f0       	brcs	.+38     	; 0x10b0 <__fp_cmp+0x46>
    108a:	62 1b       	sub	r22, r18
    108c:	73 0b       	sbc	r23, r19
    108e:	84 0b       	sbc	r24, r20
    1090:	95 0b       	sbc	r25, r21
    1092:	39 f4       	brne	.+14     	; 0x10a2 <__fp_cmp+0x38>
    1094:	0a 26       	eor	r0, r26
    1096:	61 f0       	breq	.+24     	; 0x10b0 <__fp_cmp+0x46>
    1098:	23 2b       	or	r18, r19
    109a:	24 2b       	or	r18, r20
    109c:	25 2b       	or	r18, r21
    109e:	21 f4       	brne	.+8      	; 0x10a8 <__fp_cmp+0x3e>
    10a0:	08 95       	ret
    10a2:	0a 26       	eor	r0, r26
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <__fp_cmp+0x3e>
    10a6:	a1 40       	sbci	r26, 0x01	; 1
    10a8:	a6 95       	lsr	r26
    10aa:	8f ef       	ldi	r24, 0xFF	; 255
    10ac:	81 1d       	adc	r24, r1
    10ae:	81 1d       	adc	r24, r1
    10b0:	08 95       	ret

000010b2 <__fp_inf>:
    10b2:	97 f9       	bld	r25, 7
    10b4:	9f 67       	ori	r25, 0x7F	; 127
    10b6:	80 e8       	ldi	r24, 0x80	; 128
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	08 95       	ret

000010be <__fp_nan>:
    10be:	9f ef       	ldi	r25, 0xFF	; 255
    10c0:	80 ec       	ldi	r24, 0xC0	; 192
    10c2:	08 95       	ret

000010c4 <__fp_pscA>:
    10c4:	00 24       	eor	r0, r0
    10c6:	0a 94       	dec	r0
    10c8:	16 16       	cp	r1, r22
    10ca:	17 06       	cpc	r1, r23
    10cc:	18 06       	cpc	r1, r24
    10ce:	09 06       	cpc	r0, r25
    10d0:	08 95       	ret

000010d2 <__fp_pscB>:
    10d2:	00 24       	eor	r0, r0
    10d4:	0a 94       	dec	r0
    10d6:	12 16       	cp	r1, r18
    10d8:	13 06       	cpc	r1, r19
    10da:	14 06       	cpc	r1, r20
    10dc:	05 06       	cpc	r0, r21
    10de:	08 95       	ret

000010e0 <__fp_round>:
    10e0:	09 2e       	mov	r0, r25
    10e2:	03 94       	inc	r0
    10e4:	00 0c       	add	r0, r0
    10e6:	11 f4       	brne	.+4      	; 0x10ec <__fp_round+0xc>
    10e8:	88 23       	and	r24, r24
    10ea:	52 f0       	brmi	.+20     	; 0x1100 <__fp_round+0x20>
    10ec:	bb 0f       	add	r27, r27
    10ee:	40 f4       	brcc	.+16     	; 0x1100 <__fp_round+0x20>
    10f0:	bf 2b       	or	r27, r31
    10f2:	11 f4       	brne	.+4      	; 0x10f8 <__fp_round+0x18>
    10f4:	60 ff       	sbrs	r22, 0
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <__fp_round+0x20>
    10f8:	6f 5f       	subi	r22, 0xFF	; 255
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	8f 4f       	sbci	r24, 0xFF	; 255
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	08 95       	ret

00001102 <__fp_split3>:
    1102:	57 fd       	sbrc	r21, 7
    1104:	90 58       	subi	r25, 0x80	; 128
    1106:	44 0f       	add	r20, r20
    1108:	55 1f       	adc	r21, r21
    110a:	59 f0       	breq	.+22     	; 0x1122 <__fp_splitA+0x10>
    110c:	5f 3f       	cpi	r21, 0xFF	; 255
    110e:	71 f0       	breq	.+28     	; 0x112c <__fp_splitA+0x1a>
    1110:	47 95       	ror	r20

00001112 <__fp_splitA>:
    1112:	88 0f       	add	r24, r24
    1114:	97 fb       	bst	r25, 7
    1116:	99 1f       	adc	r25, r25
    1118:	61 f0       	breq	.+24     	; 0x1132 <__fp_splitA+0x20>
    111a:	9f 3f       	cpi	r25, 0xFF	; 255
    111c:	79 f0       	breq	.+30     	; 0x113c <__fp_splitA+0x2a>
    111e:	87 95       	ror	r24
    1120:	08 95       	ret
    1122:	12 16       	cp	r1, r18
    1124:	13 06       	cpc	r1, r19
    1126:	14 06       	cpc	r1, r20
    1128:	55 1f       	adc	r21, r21
    112a:	f2 cf       	rjmp	.-28     	; 0x1110 <__fp_split3+0xe>
    112c:	46 95       	lsr	r20
    112e:	f1 df       	rcall	.-30     	; 0x1112 <__fp_splitA>
    1130:	08 c0       	rjmp	.+16     	; 0x1142 <__fp_splitA+0x30>
    1132:	16 16       	cp	r1, r22
    1134:	17 06       	cpc	r1, r23
    1136:	18 06       	cpc	r1, r24
    1138:	99 1f       	adc	r25, r25
    113a:	f1 cf       	rjmp	.-30     	; 0x111e <__fp_splitA+0xc>
    113c:	86 95       	lsr	r24
    113e:	71 05       	cpc	r23, r1
    1140:	61 05       	cpc	r22, r1
    1142:	08 94       	sec
    1144:	08 95       	ret

00001146 <__fp_zero>:
    1146:	e8 94       	clt

00001148 <__fp_szero>:
    1148:	bb 27       	eor	r27, r27
    114a:	66 27       	eor	r22, r22
    114c:	77 27       	eor	r23, r23
    114e:	cb 01       	movw	r24, r22
    1150:	97 f9       	bld	r25, 7
    1152:	08 95       	ret

00001154 <__gesf2>:
    1154:	0e 94 35 08 	call	0x106a	; 0x106a <__fp_cmp>
    1158:	08 f4       	brcc	.+2      	; 0x115c <__gesf2+0x8>
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	08 95       	ret

0000115e <__mulsf3>:
    115e:	0e 94 c2 08 	call	0x1184	; 0x1184 <__mulsf3x>
    1162:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_round>
    1166:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__fp_pscA>
    116a:	38 f0       	brcs	.+14     	; 0x117a <__mulsf3+0x1c>
    116c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_pscB>
    1170:	20 f0       	brcs	.+8      	; 0x117a <__mulsf3+0x1c>
    1172:	95 23       	and	r25, r21
    1174:	11 f0       	breq	.+4      	; 0x117a <__mulsf3+0x1c>
    1176:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_inf>
    117a:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__fp_nan>
    117e:	11 24       	eor	r1, r1
    1180:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_szero>

00001184 <__mulsf3x>:
    1184:	0e 94 81 08 	call	0x1102	; 0x1102 <__fp_split3>
    1188:	70 f3       	brcs	.-36     	; 0x1166 <__mulsf3+0x8>

0000118a <__mulsf3_pse>:
    118a:	95 9f       	mul	r25, r21
    118c:	c1 f3       	breq	.-16     	; 0x117e <__mulsf3+0x20>
    118e:	95 0f       	add	r25, r21
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	55 1f       	adc	r21, r21
    1194:	62 9f       	mul	r22, r18
    1196:	f0 01       	movw	r30, r0
    1198:	72 9f       	mul	r23, r18
    119a:	bb 27       	eor	r27, r27
    119c:	f0 0d       	add	r31, r0
    119e:	b1 1d       	adc	r27, r1
    11a0:	63 9f       	mul	r22, r19
    11a2:	aa 27       	eor	r26, r26
    11a4:	f0 0d       	add	r31, r0
    11a6:	b1 1d       	adc	r27, r1
    11a8:	aa 1f       	adc	r26, r26
    11aa:	64 9f       	mul	r22, r20
    11ac:	66 27       	eor	r22, r22
    11ae:	b0 0d       	add	r27, r0
    11b0:	a1 1d       	adc	r26, r1
    11b2:	66 1f       	adc	r22, r22
    11b4:	82 9f       	mul	r24, r18
    11b6:	22 27       	eor	r18, r18
    11b8:	b0 0d       	add	r27, r0
    11ba:	a1 1d       	adc	r26, r1
    11bc:	62 1f       	adc	r22, r18
    11be:	73 9f       	mul	r23, r19
    11c0:	b0 0d       	add	r27, r0
    11c2:	a1 1d       	adc	r26, r1
    11c4:	62 1f       	adc	r22, r18
    11c6:	83 9f       	mul	r24, r19
    11c8:	a0 0d       	add	r26, r0
    11ca:	61 1d       	adc	r22, r1
    11cc:	22 1f       	adc	r18, r18
    11ce:	74 9f       	mul	r23, r20
    11d0:	33 27       	eor	r19, r19
    11d2:	a0 0d       	add	r26, r0
    11d4:	61 1d       	adc	r22, r1
    11d6:	23 1f       	adc	r18, r19
    11d8:	84 9f       	mul	r24, r20
    11da:	60 0d       	add	r22, r0
    11dc:	21 1d       	adc	r18, r1
    11de:	82 2f       	mov	r24, r18
    11e0:	76 2f       	mov	r23, r22
    11e2:	6a 2f       	mov	r22, r26
    11e4:	11 24       	eor	r1, r1
    11e6:	9f 57       	subi	r25, 0x7F	; 127
    11e8:	50 40       	sbci	r21, 0x00	; 0
    11ea:	9a f0       	brmi	.+38     	; 0x1212 <__mulsf3_pse+0x88>
    11ec:	f1 f0       	breq	.+60     	; 0x122a <__mulsf3_pse+0xa0>
    11ee:	88 23       	and	r24, r24
    11f0:	4a f0       	brmi	.+18     	; 0x1204 <__mulsf3_pse+0x7a>
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	bb 1f       	adc	r27, r27
    11f8:	66 1f       	adc	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	91 50       	subi	r25, 0x01	; 1
    1200:	50 40       	sbci	r21, 0x00	; 0
    1202:	a9 f7       	brne	.-22     	; 0x11ee <__mulsf3_pse+0x64>
    1204:	9e 3f       	cpi	r25, 0xFE	; 254
    1206:	51 05       	cpc	r21, r1
    1208:	80 f0       	brcs	.+32     	; 0x122a <__mulsf3_pse+0xa0>
    120a:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_inf>
    120e:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_szero>
    1212:	5f 3f       	cpi	r21, 0xFF	; 255
    1214:	e4 f3       	brlt	.-8      	; 0x120e <__mulsf3_pse+0x84>
    1216:	98 3e       	cpi	r25, 0xE8	; 232
    1218:	d4 f3       	brlt	.-12     	; 0x120e <__mulsf3_pse+0x84>
    121a:	86 95       	lsr	r24
    121c:	77 95       	ror	r23
    121e:	67 95       	ror	r22
    1220:	b7 95       	ror	r27
    1222:	f7 95       	ror	r31
    1224:	e7 95       	ror	r30
    1226:	9f 5f       	subi	r25, 0xFF	; 255
    1228:	c1 f7       	brne	.-16     	; 0x121a <__mulsf3_pse+0x90>
    122a:	fe 2b       	or	r31, r30
    122c:	88 0f       	add	r24, r24
    122e:	91 1d       	adc	r25, r1
    1230:	96 95       	lsr	r25
    1232:	87 95       	ror	r24
    1234:	97 f9       	bld	r25, 7
    1236:	08 95       	ret

00001238 <__umulhisi3>:
    1238:	a2 9f       	mul	r26, r18
    123a:	b0 01       	movw	r22, r0
    123c:	b3 9f       	mul	r27, r19
    123e:	c0 01       	movw	r24, r0
    1240:	a3 9f       	mul	r26, r19
    1242:	70 0d       	add	r23, r0
    1244:	81 1d       	adc	r24, r1
    1246:	11 24       	eor	r1, r1
    1248:	91 1d       	adc	r25, r1
    124a:	b2 9f       	mul	r27, r18
    124c:	70 0d       	add	r23, r0
    124e:	81 1d       	adc	r24, r1
    1250:	11 24       	eor	r1, r1
    1252:	91 1d       	adc	r25, r1
    1254:	08 95       	ret

00001256 <__tablejump2__>:
    1256:	ee 0f       	add	r30, r30
    1258:	ff 1f       	adc	r31, r31
    125a:	05 90       	lpm	r0, Z+
    125c:	f4 91       	lpm	r31, Z
    125e:	e0 2d       	mov	r30, r0
    1260:	09 94       	ijmp

00001262 <memcpy>:
    1262:	fb 01       	movw	r30, r22
    1264:	dc 01       	movw	r26, r24
    1266:	02 c0       	rjmp	.+4      	; 0x126c <memcpy+0xa>
    1268:	01 90       	ld	r0, Z+
    126a:	0d 92       	st	X+, r0
    126c:	41 50       	subi	r20, 0x01	; 1
    126e:	50 40       	sbci	r21, 0x00	; 0
    1270:	d8 f7       	brcc	.-10     	; 0x1268 <memcpy+0x6>
    1272:	08 95       	ret

00001274 <_exit>:
    1274:	f8 94       	cli

00001276 <__stop_program>:
    1276:	ff cf       	rjmp	.-2      	; 0x1276 <__stop_program>
