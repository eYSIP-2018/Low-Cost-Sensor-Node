
RFTRANS_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000152c  000015c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000152c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800116  00800116  000015d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a8a  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010da  00000000  00000000  00007422  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d75  00000000  00000000  000084fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd0  00000000  00000000  0000a274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001418  00000000  00000000  0000ae44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003895  00000000  00000000  0000c25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000faf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_6>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_14>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	21 05       	cpc	r18, r1

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ec e2       	ldi	r30, 0x2C	; 44
      7e:	f5 e1       	ldi	r31, 0x15	; 21
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a6 31       	cpi	r26, 0x16	; 22
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a6 e1       	ldi	r26, 0x16	; 22
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a4 33       	cpi	r26, 0x34	; 52
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 8e 0a 	call	0x151c	; 0x151c <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 c7 04 	call	0x98e	; 0x98e <main>
      b6:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <UART_Init>:
	temp = 186 - 0.3905*result;
	//voltage = voltage * 10;
	UART_Print_Num((unsigned int)temp);
	//Serial.println(voltage);
	return (uint8_t)abs(temp);
}
      be:	cf 93       	push	r28
      c0:	df 93       	push	r29
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
      c6:	81 ec       	ldi	r24, 0xC1	; 193
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	fc 01       	movw	r30, r24
      cc:	10 82       	st	Z, r1
      ce:	80 ec       	ldi	r24, 0xC0	; 192
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	fc 01       	movw	r30, r24
      d4:	10 82       	st	Z, r1
      d6:	82 ec       	ldi	r24, 0xC2	; 194
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	22 ec       	ldi	r18, 0xC2	; 194
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	20 81       	ld	r18, Z
      e2:	2e 60       	ori	r18, 0x0E	; 14
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
      e8:	84 ec       	ldi	r24, 0xC4	; 196
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	23 e3       	ldi	r18, 0x33	; 51
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
      f2:	85 ec       	ldi	r24, 0xC5	; 197
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	fc 01       	movw	r30, r24
      f8:	10 82       	st	Z, r1
      fa:	81 ec       	ldi	r24, 0xC1	; 193
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	21 ec       	ldi	r18, 0xC1	; 193
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	f9 01       	movw	r30, r18
     104:	20 81       	ld	r18, Z
     106:	28 61       	ori	r18, 0x18	; 24
     108:	fc 01       	movw	r30, r24
     10a:	20 83       	st	Z, r18
     10c:	00 00       	nop
     10e:	df 91       	pop	r29
     110:	cf 91       	pop	r28
     112:	08 95       	ret

00000114 <UART_Transmit>:
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	1f 92       	push	r1
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
     11e:	89 83       	std	Y+1, r24	; 0x01
     120:	80 ec       	ldi	r24, 0xC0	; 192
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	20 e4       	ldi	r18, 0x40	; 64
     126:	fc 01       	movw	r30, r24
     128:	20 83       	st	Z, r18
     12a:	00 00       	nop
     12c:	80 ec       	ldi	r24, 0xC0	; 192
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	fc 01       	movw	r30, r24
     132:	80 81       	ld	r24, Z
     134:	88 2f       	mov	r24, r24
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	80 72       	andi	r24, 0x20	; 32
     13a:	99 27       	eor	r25, r25
     13c:	89 2b       	or	r24, r25
     13e:	b1 f3       	breq	.-20     	; 0x12c <UART_Transmit+0x18>
     140:	86 ec       	ldi	r24, 0xC6	; 198
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	29 81       	ldd	r18, Y+1	; 0x01
     146:	fc 01       	movw	r30, r24
     148:	20 83       	st	Z, r18
     14a:	00 00       	nop
     14c:	80 ec       	ldi	r24, 0xC0	; 192
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	fc 01       	movw	r30, r24
     152:	80 81       	ld	r24, Z
     154:	88 2f       	mov	r24, r24
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	80 74       	andi	r24, 0x40	; 64
     15a:	99 27       	eor	r25, r25
     15c:	89 2b       	or	r24, r25
     15e:	b1 f3       	breq	.-20     	; 0x14c <UART_Transmit+0x38>
     160:	00 00       	nop
     162:	0f 90       	pop	r0
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <UART_Printf>:
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	00 d0       	rcall	.+0      	; 0x170 <UART_Printf+0x6>
     170:	1f 92       	push	r1
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	9b 83       	std	Y+3, r25	; 0x03
     178:	8a 83       	std	Y+2, r24	; 0x02
     17a:	19 82       	std	Y+1, r1	; 0x01
     17c:	0e c0       	rjmp	.+28     	; 0x19a <UART_Printf+0x30>
     17e:	89 81       	ldd	r24, Y+1	; 0x01
     180:	88 2f       	mov	r24, r24
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	2a 81       	ldd	r18, Y+2	; 0x02
     186:	3b 81       	ldd	r19, Y+3	; 0x03
     188:	82 0f       	add	r24, r18
     18a:	93 1f       	adc	r25, r19
     18c:	fc 01       	movw	r30, r24
     18e:	80 81       	ld	r24, Z
     190:	0e 94 8a 00 	call	0x114	; 0x114 <UART_Transmit>
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	8f 5f       	subi	r24, 0xFF	; 255
     198:	89 83       	std	Y+1, r24	; 0x01
     19a:	89 81       	ldd	r24, Y+1	; 0x01
     19c:	88 2f       	mov	r24, r24
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	2a 81       	ldd	r18, Y+2	; 0x02
     1a2:	3b 81       	ldd	r19, Y+3	; 0x03
     1a4:	82 0f       	add	r24, r18
     1a6:	93 1f       	adc	r25, r19
     1a8:	fc 01       	movw	r30, r24
     1aa:	80 81       	ld	r24, Z
     1ac:	88 23       	and	r24, r24
     1ae:	39 f7       	brne	.-50     	; 0x17e <UART_Printf+0x14>
     1b0:	00 00       	nop
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	08 95       	ret

000001be <UART_Print_Num>:
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <UART_Print_Num+0x6>
     1c4:	1f 92       	push	r1
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	9b 83       	std	Y+3, r25	; 0x03
     1cc:	8a 83       	std	Y+2, r24	; 0x02
     1ce:	19 82       	std	Y+1, r1	; 0x01
     1d0:	8a 81       	ldd	r24, Y+2	; 0x02
     1d2:	9b 81       	ldd	r25, Y+3	; 0x03
     1d4:	92 95       	swap	r25
     1d6:	82 95       	swap	r24
     1d8:	8f 70       	andi	r24, 0x0F	; 15
     1da:	89 27       	eor	r24, r25
     1dc:	9f 70       	andi	r25, 0x0F	; 15
     1de:	89 27       	eor	r24, r25
     1e0:	9c 01       	movw	r18, r24
     1e2:	a7 e4       	ldi	r26, 0x47	; 71
     1e4:	b3 e0       	ldi	r27, 0x03	; 3
     1e6:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__umulhisi3>
     1ea:	96 95       	lsr	r25
     1ec:	87 95       	ror	r24
     1ee:	96 95       	lsr	r25
     1f0:	87 95       	ror	r24
     1f2:	96 95       	lsr	r25
     1f4:	87 95       	ror	r24
     1f6:	80 5d       	subi	r24, 0xD0	; 208
     1f8:	89 83       	std	Y+1, r24	; 0x01
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	80 33       	cpi	r24, 0x30	; 48
     1fe:	19 f0       	breq	.+6      	; 0x206 <UART_Print_Num+0x48>
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	0e 94 8a 00 	call	0x114	; 0x114 <UART_Transmit>
     206:	4a 81       	ldd	r20, Y+2	; 0x02
     208:	5b 81       	ldd	r21, Y+3	; 0x03
     20a:	ca 01       	movw	r24, r20
     20c:	92 95       	swap	r25
     20e:	82 95       	swap	r24
     210:	8f 70       	andi	r24, 0x0F	; 15
     212:	89 27       	eor	r24, r25
     214:	9f 70       	andi	r25, 0x0F	; 15
     216:	89 27       	eor	r24, r25
     218:	9c 01       	movw	r18, r24
     21a:	a7 e4       	ldi	r26, 0x47	; 71
     21c:	b3 e0       	ldi	r27, 0x03	; 3
     21e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__umulhisi3>
     222:	bc 01       	movw	r22, r24
     224:	76 95       	lsr	r23
     226:	67 95       	ror	r22
     228:	76 95       	lsr	r23
     22a:	67 95       	ror	r22
     22c:	76 95       	lsr	r23
     22e:	67 95       	ror	r22
     230:	20 e1       	ldi	r18, 0x10	; 16
     232:	37 e2       	ldi	r19, 0x27	; 39
     234:	62 9f       	mul	r22, r18
     236:	c0 01       	movw	r24, r0
     238:	63 9f       	mul	r22, r19
     23a:	90 0d       	add	r25, r0
     23c:	72 9f       	mul	r23, r18
     23e:	90 0d       	add	r25, r0
     240:	11 24       	eor	r1, r1
     242:	9a 01       	movw	r18, r20
     244:	28 1b       	sub	r18, r24
     246:	39 0b       	sbc	r19, r25
     248:	c9 01       	movw	r24, r18
     24a:	9b 83       	std	Y+3, r25	; 0x03
     24c:	8a 83       	std	Y+2, r24	; 0x02
     24e:	8a 81       	ldd	r24, Y+2	; 0x02
     250:	9b 81       	ldd	r25, Y+3	; 0x03
     252:	96 95       	lsr	r25
     254:	87 95       	ror	r24
     256:	96 95       	lsr	r25
     258:	87 95       	ror	r24
     25a:	96 95       	lsr	r25
     25c:	87 95       	ror	r24
     25e:	9c 01       	movw	r18, r24
     260:	a5 ec       	ldi	r26, 0xC5	; 197
     262:	b0 e2       	ldi	r27, 0x20	; 32
     264:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__umulhisi3>
     268:	92 95       	swap	r25
     26a:	82 95       	swap	r24
     26c:	8f 70       	andi	r24, 0x0F	; 15
     26e:	89 27       	eor	r24, r25
     270:	9f 70       	andi	r25, 0x0F	; 15
     272:	89 27       	eor	r24, r25
     274:	80 5d       	subi	r24, 0xD0	; 208
     276:	89 83       	std	Y+1, r24	; 0x01
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	80 33       	cpi	r24, 0x30	; 48
     27c:	19 f0       	breq	.+6      	; 0x284 <UART_Print_Num+0xc6>
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	0e 94 8a 00 	call	0x114	; 0x114 <UART_Transmit>
     284:	4a 81       	ldd	r20, Y+2	; 0x02
     286:	5b 81       	ldd	r21, Y+3	; 0x03
     288:	ca 01       	movw	r24, r20
     28a:	96 95       	lsr	r25
     28c:	87 95       	ror	r24
     28e:	96 95       	lsr	r25
     290:	87 95       	ror	r24
     292:	96 95       	lsr	r25
     294:	87 95       	ror	r24
     296:	9c 01       	movw	r18, r24
     298:	a5 ec       	ldi	r26, 0xC5	; 197
     29a:	b0 e2       	ldi	r27, 0x20	; 32
     29c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__umulhisi3>
     2a0:	bc 01       	movw	r22, r24
     2a2:	72 95       	swap	r23
     2a4:	62 95       	swap	r22
     2a6:	6f 70       	andi	r22, 0x0F	; 15
     2a8:	67 27       	eor	r22, r23
     2aa:	7f 70       	andi	r23, 0x0F	; 15
     2ac:	67 27       	eor	r22, r23
     2ae:	28 ee       	ldi	r18, 0xE8	; 232
     2b0:	33 e0       	ldi	r19, 0x03	; 3
     2b2:	62 9f       	mul	r22, r18
     2b4:	c0 01       	movw	r24, r0
     2b6:	63 9f       	mul	r22, r19
     2b8:	90 0d       	add	r25, r0
     2ba:	72 9f       	mul	r23, r18
     2bc:	90 0d       	add	r25, r0
     2be:	11 24       	eor	r1, r1
     2c0:	9a 01       	movw	r18, r20
     2c2:	28 1b       	sub	r18, r24
     2c4:	39 0b       	sbc	r19, r25
     2c6:	c9 01       	movw	r24, r18
     2c8:	9b 83       	std	Y+3, r25	; 0x03
     2ca:	8a 83       	std	Y+2, r24	; 0x02
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	9b 81       	ldd	r25, Y+3	; 0x03
     2d0:	96 95       	lsr	r25
     2d2:	87 95       	ror	r24
     2d4:	96 95       	lsr	r25
     2d6:	87 95       	ror	r24
     2d8:	9c 01       	movw	r18, r24
     2da:	ab e7       	ldi	r26, 0x7B	; 123
     2dc:	b4 e1       	ldi	r27, 0x14	; 20
     2de:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__umulhisi3>
     2e2:	96 95       	lsr	r25
     2e4:	87 95       	ror	r24
     2e6:	80 5d       	subi	r24, 0xD0	; 208
     2e8:	89 83       	std	Y+1, r24	; 0x01
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	80 33       	cpi	r24, 0x30	; 48
     2ee:	19 f0       	breq	.+6      	; 0x2f6 <UART_Print_Num+0x138>
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	0e 94 8a 00 	call	0x114	; 0x114 <UART_Transmit>
     2f6:	4a 81       	ldd	r20, Y+2	; 0x02
     2f8:	5b 81       	ldd	r21, Y+3	; 0x03
     2fa:	ca 01       	movw	r24, r20
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	96 95       	lsr	r25
     302:	87 95       	ror	r24
     304:	9c 01       	movw	r18, r24
     306:	ab e7       	ldi	r26, 0x7B	; 123
     308:	b4 e1       	ldi	r27, 0x14	; 20
     30a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__umulhisi3>
     30e:	9c 01       	movw	r18, r24
     310:	36 95       	lsr	r19
     312:	27 95       	ror	r18
     314:	64 e6       	ldi	r22, 0x64	; 100
     316:	62 9f       	mul	r22, r18
     318:	c0 01       	movw	r24, r0
     31a:	63 9f       	mul	r22, r19
     31c:	90 0d       	add	r25, r0
     31e:	11 24       	eor	r1, r1
     320:	9a 01       	movw	r18, r20
     322:	28 1b       	sub	r18, r24
     324:	39 0b       	sbc	r19, r25
     326:	c9 01       	movw	r24, r18
     328:	9b 83       	std	Y+3, r25	; 0x03
     32a:	8a 83       	std	Y+2, r24	; 0x02
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
     32e:	9b 81       	ldd	r25, Y+3	; 0x03
     330:	9c 01       	movw	r18, r24
     332:	ad ec       	ldi	r26, 0xCD	; 205
     334:	bc ec       	ldi	r27, 0xCC	; 204
     336:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__umulhisi3>
     33a:	96 95       	lsr	r25
     33c:	87 95       	ror	r24
     33e:	96 95       	lsr	r25
     340:	87 95       	ror	r24
     342:	96 95       	lsr	r25
     344:	87 95       	ror	r24
     346:	80 5d       	subi	r24, 0xD0	; 208
     348:	89 83       	std	Y+1, r24	; 0x01
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	80 33       	cpi	r24, 0x30	; 48
     34e:	19 f0       	breq	.+6      	; 0x356 <UART_Print_Num+0x198>
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	0e 94 8a 00 	call	0x114	; 0x114 <UART_Transmit>
     356:	4a 81       	ldd	r20, Y+2	; 0x02
     358:	5b 81       	ldd	r21, Y+3	; 0x03
     35a:	9a 01       	movw	r18, r20
     35c:	ad ec       	ldi	r26, 0xCD	; 205
     35e:	bc ec       	ldi	r27, 0xCC	; 204
     360:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__umulhisi3>
     364:	96 95       	lsr	r25
     366:	87 95       	ror	r24
     368:	96 95       	lsr	r25
     36a:	87 95       	ror	r24
     36c:	96 95       	lsr	r25
     36e:	87 95       	ror	r24
     370:	88 0f       	add	r24, r24
     372:	99 1f       	adc	r25, r25
     374:	9c 01       	movw	r18, r24
     376:	22 0f       	add	r18, r18
     378:	33 1f       	adc	r19, r19
     37a:	22 0f       	add	r18, r18
     37c:	33 1f       	adc	r19, r19
     37e:	82 0f       	add	r24, r18
     380:	93 1f       	adc	r25, r19
     382:	9a 01       	movw	r18, r20
     384:	28 1b       	sub	r18, r24
     386:	39 0b       	sbc	r19, r25
     388:	c9 01       	movw	r24, r18
     38a:	80 5d       	subi	r24, 0xD0	; 208
     38c:	89 83       	std	Y+1, r24	; 0x01
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	0e 94 8a 00 	call	0x114	; 0x114 <UART_Transmit>
     394:	8a e0       	ldi	r24, 0x0A	; 10
     396:	0e 94 8a 00 	call	0x114	; 0x114 <UART_Transmit>
     39a:	00 00       	nop
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <Set_pin>:
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <Set_pin+0x6>
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <Set_pin+0x8>
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	9a 83       	std	Y+2, r25	; 0x02
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	7c 83       	std	Y+4, r23	; 0x04
     3ba:	6b 83       	std	Y+3, r22	; 0x03
     3bc:	8b 81       	ldd	r24, Y+3	; 0x03
     3be:	9c 81       	ldd	r25, Y+4	; 0x04
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	71 f5       	brne	.+92     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	9a 81       	ldd	r25, Y+2	; 0x02
     3c8:	08 97       	sbiw	r24, 0x08	; 8
     3ca:	b8 f0       	brcs	.+46     	; 0x3fa <Set_pin+0x52>
     3cc:	84 e2       	ldi	r24, 0x24	; 36
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	24 e2       	ldi	r18, 0x24	; 36
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	f9 01       	movw	r30, r18
     3d6:	20 81       	ld	r18, Z
     3d8:	62 2f       	mov	r22, r18
     3da:	29 81       	ldd	r18, Y+1	; 0x01
     3dc:	3a 81       	ldd	r19, Y+2	; 0x02
     3de:	a9 01       	movw	r20, r18
     3e0:	48 50       	subi	r20, 0x08	; 8
     3e2:	51 09       	sbc	r21, r1
     3e4:	21 e0       	ldi	r18, 0x01	; 1
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <Set_pin+0x46>
     3ea:	22 0f       	add	r18, r18
     3ec:	33 1f       	adc	r19, r19
     3ee:	4a 95       	dec	r20
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <Set_pin+0x42>
     3f2:	26 2b       	or	r18, r22
     3f4:	fc 01       	movw	r30, r24
     3f6:	20 83       	st	Z, r18
     3f8:	28 c0       	rjmp	.+80     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3fa:	8a e2       	ldi	r24, 0x2A	; 42
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	2a e2       	ldi	r18, 0x2A	; 42
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	f9 01       	movw	r30, r18
     404:	20 81       	ld	r18, Z
     406:	42 2f       	mov	r20, r18
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	09 80       	ldd	r0, Y+1	; 0x01
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     410:	22 0f       	add	r18, r18
     412:	33 1f       	adc	r19, r19
     414:	0a 94       	dec	r0
     416:	e2 f7       	brpl	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     418:	24 2b       	or	r18, r20
     41a:	fc 01       	movw	r30, r24
     41c:	20 83       	st	Z, r18
     41e:	15 c0       	rjmp	.+42     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	9a 81       	ldd	r25, Y+2	; 0x02
     424:	08 97       	sbiw	r24, 0x08	; 8
     426:	48 f0       	brcs	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     428:	84 e2       	ldi	r24, 0x24	; 36
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	24 e2       	ldi	r18, 0x24	; 36
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	f9 01       	movw	r30, r18
     432:	20 81       	ld	r18, Z
     434:	fc 01       	movw	r30, r24
     436:	20 83       	st	Z, r18
     438:	08 c0       	rjmp	.+16     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     43a:	8a e2       	ldi	r24, 0x2A	; 42
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	2a e2       	ldi	r18, 0x2A	; 42
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	f9 01       	movw	r30, r18
     444:	20 81       	ld	r18, Z
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
     44a:	00 00       	nop
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <Write_Digital>:
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	00 d0       	rcall	.+0      	; 0x460 <Write_Digital+0x6>
     460:	1f 92       	push	r1
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	9a 83       	std	Y+2, r25	; 0x02
     468:	89 83       	std	Y+1, r24	; 0x01
     46a:	6b 83       	std	Y+3, r22	; 0x03
     46c:	f8 94       	cli
     46e:	8b 81       	ldd	r24, Y+3	; 0x03
     470:	88 23       	and	r24, r24
     472:	71 f1       	breq	.+92     	; 0x4d0 <Write_Digital+0x76>
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	9a 81       	ldd	r25, Y+2	; 0x02
     478:	08 97       	sbiw	r24, 0x08	; 8
     47a:	b8 f0       	brcs	.+46     	; 0x4aa <Write_Digital+0x50>
     47c:	85 e2       	ldi	r24, 0x25	; 37
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	25 e2       	ldi	r18, 0x25	; 37
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	f9 01       	movw	r30, r18
     486:	20 81       	ld	r18, Z
     488:	62 2f       	mov	r22, r18
     48a:	29 81       	ldd	r18, Y+1	; 0x01
     48c:	3a 81       	ldd	r19, Y+2	; 0x02
     48e:	a9 01       	movw	r20, r18
     490:	48 50       	subi	r20, 0x08	; 8
     492:	51 09       	sbc	r21, r1
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	02 c0       	rjmp	.+4      	; 0x49e <Write_Digital+0x44>
     49a:	22 0f       	add	r18, r18
     49c:	33 1f       	adc	r19, r19
     49e:	4a 95       	dec	r20
     4a0:	e2 f7       	brpl	.-8      	; 0x49a <Write_Digital+0x40>
     4a2:	26 2b       	or	r18, r22
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
     4a8:	42 c0       	rjmp	.+132    	; 0x52e <Write_Digital+0xd4>
     4aa:	8b e2       	ldi	r24, 0x2B	; 43
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	2b e2       	ldi	r18, 0x2B	; 43
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	f9 01       	movw	r30, r18
     4b4:	20 81       	ld	r18, Z
     4b6:	42 2f       	mov	r20, r18
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	09 80       	ldd	r0, Y+1	; 0x01
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <Write_Digital+0x6a>
     4c0:	22 0f       	add	r18, r18
     4c2:	33 1f       	adc	r19, r19
     4c4:	0a 94       	dec	r0
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <Write_Digital+0x66>
     4c8:	24 2b       	or	r18, r20
     4ca:	fc 01       	movw	r30, r24
     4cc:	20 83       	st	Z, r18
     4ce:	2f c0       	rjmp	.+94     	; 0x52e <Write_Digital+0xd4>
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	9a 81       	ldd	r25, Y+2	; 0x02
     4d4:	08 97       	sbiw	r24, 0x08	; 8
     4d6:	c0 f0       	brcs	.+48     	; 0x508 <Write_Digital+0xae>
     4d8:	85 e2       	ldi	r24, 0x25	; 37
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	25 e2       	ldi	r18, 0x25	; 37
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	f9 01       	movw	r30, r18
     4e2:	20 81       	ld	r18, Z
     4e4:	62 2f       	mov	r22, r18
     4e6:	29 81       	ldd	r18, Y+1	; 0x01
     4e8:	3a 81       	ldd	r19, Y+2	; 0x02
     4ea:	a9 01       	movw	r20, r18
     4ec:	48 50       	subi	r20, 0x08	; 8
     4ee:	51 09       	sbc	r21, r1
     4f0:	21 e0       	ldi	r18, 0x01	; 1
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <Write_Digital+0xa0>
     4f6:	22 0f       	add	r18, r18
     4f8:	33 1f       	adc	r19, r19
     4fa:	4a 95       	dec	r20
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <Write_Digital+0x9c>
     4fe:	20 95       	com	r18
     500:	26 23       	and	r18, r22
     502:	fc 01       	movw	r30, r24
     504:	20 83       	st	Z, r18
     506:	13 c0       	rjmp	.+38     	; 0x52e <Write_Digital+0xd4>
     508:	8b e2       	ldi	r24, 0x2B	; 43
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	2b e2       	ldi	r18, 0x2B	; 43
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	f9 01       	movw	r30, r18
     512:	20 81       	ld	r18, Z
     514:	42 2f       	mov	r20, r18
     516:	21 e0       	ldi	r18, 0x01	; 1
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	09 80       	ldd	r0, Y+1	; 0x01
     51c:	02 c0       	rjmp	.+4      	; 0x522 <Write_Digital+0xc8>
     51e:	22 0f       	add	r18, r18
     520:	33 1f       	adc	r19, r19
     522:	0a 94       	dec	r0
     524:	e2 f7       	brpl	.-8      	; 0x51e <Write_Digital+0xc4>
     526:	20 95       	com	r18
     528:	24 23       	and	r18, r20
     52a:	fc 01       	movw	r30, r24
     52c:	20 83       	st	Z, r18
     52e:	78 94       	sei
     530:	00 00       	nop
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <__vector_14>:
     53e:	1f 92       	push	r1
     540:	0f 92       	push	r0
     542:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     546:	0f 92       	push	r0
     548:	11 24       	eor	r1, r1
     54a:	8f 93       	push	r24
     54c:	9f 93       	push	r25
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
     55a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
     564:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
     568:	00 00       	nop
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	9f 91       	pop	r25
     570:	8f 91       	pop	r24
     572:	0f 90       	pop	r0
     574:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <__vector_6>:
     57e:	1f 92       	push	r1
     580:	0f 92       	push	r0
     582:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     586:	0f 92       	push	r0
     588:	11 24       	eor	r1, r1
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	00 00       	nop
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	0f 90       	pop	r0
     59a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     59e:	0f 90       	pop	r0
     5a0:	1f 90       	pop	r1
     5a2:	18 95       	reti

000005a4 <adcinit>:
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	66 97       	sbiw	r28, 0x16	; 22
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	9e 8b       	std	Y+22, r25	; 0x16
     5ba:	8d 8b       	std	Y+21, r24	; 0x15
     5bc:	1a 82       	std	Y+2, r1	; 0x02
     5be:	19 82       	std	Y+1, r1	; 0x01
     5c0:	1b 82       	std	Y+3, r1	; 0x03
     5c2:	1c 82       	std	Y+4, r1	; 0x04
     5c4:	1d 82       	std	Y+5, r1	; 0x05
     5c6:	1e 82       	std	Y+6, r1	; 0x06
     5c8:	8c e7       	ldi	r24, 0x7C	; 124
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	fc 01       	movw	r30, r24
     5ce:	80 81       	ld	r24, Z
     5d0:	8c e7       	ldi	r24, 0x7C	; 124
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	fc 01       	movw	r30, r24
     5d6:	10 82       	st	Z, r1
     5d8:	8c e7       	ldi	r24, 0x7C	; 124
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	20 e4       	ldi	r18, 0x40	; 64
     5de:	fc 01       	movw	r30, r24
     5e0:	20 83       	st	Z, r18
     5e2:	8c e7       	ldi	r24, 0x7C	; 124
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	2c e7       	ldi	r18, 0x7C	; 124
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	f9 01       	movw	r30, r18
     5ec:	20 81       	ld	r18, Z
     5ee:	32 2f       	mov	r19, r18
     5f0:	2d 89       	ldd	r18, Y+21	; 0x15
     5f2:	23 2b       	or	r18, r19
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	a0 e0       	ldi	r26, 0x00	; 0
     5fe:	b0 e4       	ldi	r27, 0x40	; 64
     600:	8f 83       	std	Y+7, r24	; 0x07
     602:	98 87       	std	Y+8, r25	; 0x08
     604:	a9 87       	std	Y+9, r26	; 0x09
     606:	ba 87       	std	Y+10, r27	; 0x0a
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	4a ef       	ldi	r20, 0xFA	; 250
     60e:	54 e4       	ldi	r21, 0x44	; 68
     610:	6f 81       	ldd	r22, Y+7	; 0x07
     612:	78 85       	ldd	r23, Y+8	; 0x08
     614:	89 85       	ldd	r24, Y+9	; 0x09
     616:	9a 85       	ldd	r25, Y+10	; 0x0a
     618:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	8b 87       	std	Y+11, r24	; 0x0b
     622:	9c 87       	std	Y+12, r25	; 0x0c
     624:	ad 87       	std	Y+13, r26	; 0x0d
     626:	be 87       	std	Y+14, r27	; 0x0e
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	40 e8       	ldi	r20, 0x80	; 128
     62e:	5f e3       	ldi	r21, 0x3F	; 63
     630:	6b 85       	ldd	r22, Y+11	; 0x0b
     632:	7c 85       	ldd	r23, Y+12	; 0x0c
     634:	8d 85       	ldd	r24, Y+13	; 0x0d
     636:	9e 85       	ldd	r25, Y+14	; 0x0e
     638:	0e 94 ae 08 	call	0x115c	; 0x115c <__cmpsf2>
     63c:	88 23       	and	r24, r24
     63e:	2c f4       	brge	.+10     	; 0x64a <adcinit+0xa6>
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	98 8b       	std	Y+16, r25	; 0x10
     646:	8f 87       	std	Y+15, r24	; 0x0f
     648:	3f c0       	rjmp	.+126    	; 0x6c8 <adcinit+0x124>
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	3f ef       	ldi	r19, 0xFF	; 255
     64e:	4f e7       	ldi	r20, 0x7F	; 127
     650:	57 e4       	ldi	r21, 0x47	; 71
     652:	6b 85       	ldd	r22, Y+11	; 0x0b
     654:	7c 85       	ldd	r23, Y+12	; 0x0c
     656:	8d 85       	ldd	r24, Y+13	; 0x0d
     658:	9e 85       	ldd	r25, Y+14	; 0x0e
     65a:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gesf2>
     65e:	18 16       	cp	r1, r24
     660:	4c f5       	brge	.+82     	; 0x6b4 <adcinit+0x110>
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e2       	ldi	r20, 0x20	; 32
     668:	51 e4       	ldi	r21, 0x41	; 65
     66a:	6f 81       	ldd	r22, Y+7	; 0x07
     66c:	78 85       	ldd	r23, Y+8	; 0x08
     66e:	89 85       	ldd	r24, Y+9	; 0x09
     670:	9a 85       	ldd	r25, Y+10	; 0x0a
     672:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
     67a:	bc 01       	movw	r22, r24
     67c:	cd 01       	movw	r24, r26
     67e:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     682:	dc 01       	movw	r26, r24
     684:	cb 01       	movw	r24, r22
     686:	98 8b       	std	Y+16, r25	; 0x10
     688:	8f 87       	std	Y+15, r24	; 0x0f
     68a:	0f c0       	rjmp	.+30     	; 0x6aa <adcinit+0x106>
     68c:	88 ec       	ldi	r24, 0xC8	; 200
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	9a 8b       	std	Y+18, r25	; 0x12
     692:	89 8b       	std	Y+17, r24	; 0x11
     694:	89 89       	ldd	r24, Y+17	; 0x11
     696:	9a 89       	ldd	r25, Y+18	; 0x12
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <adcinit+0xf4>
     69c:	9a 8b       	std	Y+18, r25	; 0x12
     69e:	89 8b       	std	Y+17, r24	; 0x11
     6a0:	8f 85       	ldd	r24, Y+15	; 0x0f
     6a2:	98 89       	ldd	r25, Y+16	; 0x10
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	98 8b       	std	Y+16, r25	; 0x10
     6a8:	8f 87       	std	Y+15, r24	; 0x0f
     6aa:	8f 85       	ldd	r24, Y+15	; 0x0f
     6ac:	98 89       	ldd	r25, Y+16	; 0x10
     6ae:	89 2b       	or	r24, r25
     6b0:	69 f7       	brne	.-38     	; 0x68c <adcinit+0xe8>
     6b2:	14 c0       	rjmp	.+40     	; 0x6dc <adcinit+0x138>
     6b4:	6b 85       	ldd	r22, Y+11	; 0x0b
     6b6:	7c 85       	ldd	r23, Y+12	; 0x0c
     6b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     6ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     6bc:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
     6c0:	dc 01       	movw	r26, r24
     6c2:	cb 01       	movw	r24, r22
     6c4:	98 8b       	std	Y+16, r25	; 0x10
     6c6:	8f 87       	std	Y+15, r24	; 0x0f
     6c8:	8f 85       	ldd	r24, Y+15	; 0x0f
     6ca:	98 89       	ldd	r25, Y+16	; 0x10
     6cc:	9c 8b       	std	Y+20, r25	; 0x14
     6ce:	8b 8b       	std	Y+19, r24	; 0x13
     6d0:	8b 89       	ldd	r24, Y+19	; 0x13
     6d2:	9c 89       	ldd	r25, Y+20	; 0x14
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <adcinit+0x130>
     6d8:	9c 8b       	std	Y+20, r25	; 0x14
     6da:	8b 8b       	std	Y+19, r24	; 0x13
     6dc:	8a e7       	ldi	r24, 0x7A	; 122
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	2a e7       	ldi	r18, 0x7A	; 122
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	f9 01       	movw	r30, r18
     6e6:	20 81       	ld	r18, Z
     6e8:	20 6c       	ori	r18, 0xC0	; 192
     6ea:	fc 01       	movw	r30, r24
     6ec:	20 83       	st	Z, r18
     6ee:	00 00       	nop
     6f0:	8a e7       	ldi	r24, 0x7A	; 122
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	fc 01       	movw	r30, r24
     6f6:	80 81       	ld	r24, Z
     6f8:	88 2f       	mov	r24, r24
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	80 74       	andi	r24, 0x40	; 64
     6fe:	99 27       	eor	r25, r25
     700:	89 2b       	or	r24, r25
     702:	b1 f7       	brne	.-20     	; 0x6f0 <adcinit+0x14c>
     704:	88 e7       	ldi	r24, 0x78	; 120
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	fc 01       	movw	r30, r24
     70a:	80 81       	ld	r24, Z
     70c:	88 2f       	mov	r24, r24
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	9a 83       	std	Y+2, r25	; 0x02
     712:	89 83       	std	Y+1, r24	; 0x01
     714:	89 e7       	ldi	r24, 0x79	; 121
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	fc 01       	movw	r30, r24
     71a:	80 81       	ld	r24, Z
     71c:	88 2f       	mov	r24, r24
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	98 2f       	mov	r25, r24
     722:	88 27       	eor	r24, r24
     724:	9c 01       	movw	r18, r24
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	9a 81       	ldd	r25, Y+2	; 0x02
     72a:	82 2b       	or	r24, r18
     72c:	93 2b       	or	r25, r19
     72e:	9a 83       	std	Y+2, r25	; 0x02
     730:	89 83       	std	Y+1, r24	; 0x01
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	66 96       	adiw	r28, 0x16	; 22
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <get_batt_voltage>:
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	2c 97       	sbiw	r28, 0x0c	; 12
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	1a 82       	std	Y+2, r1	; 0x02
     75e:	19 82       	std	Y+1, r1	; 0x01
     760:	83 e3       	ldi	r24, 0x33	; 51
     762:	93 e3       	ldi	r25, 0x33	; 51
     764:	a3 e5       	ldi	r26, 0x53	; 83
     766:	bb e3       	ldi	r27, 0x3B	; 59
     768:	8d 83       	std	Y+5, r24	; 0x05
     76a:	9e 83       	std	Y+6, r25	; 0x06
     76c:	af 83       	std	Y+7, r26	; 0x07
     76e:	b8 87       	std	Y+8, r27	; 0x08
     770:	1c 82       	std	Y+4, r1	; 0x04
     772:	1b 82       	std	Y+3, r1	; 0x03
     774:	10 c0       	rjmp	.+32     	; 0x796 <get_batt_voltage+0x4e>
     776:	85 e0       	ldi	r24, 0x05	; 5
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <adcinit>
     77e:	9c 01       	movw	r18, r24
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	9a 81       	ldd	r25, Y+2	; 0x02
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	9a 83       	std	Y+2, r25	; 0x02
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	9c 83       	std	Y+4, r25	; 0x04
     794:	8b 83       	std	Y+3, r24	; 0x03
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	9c 81       	ldd	r25, Y+4	; 0x04
     79a:	05 97       	sbiw	r24, 0x05	; 5
     79c:	64 f3       	brlt	.-40     	; 0x776 <get_batt_voltage+0x2e>
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	9c 01       	movw	r18, r24
     7a4:	ad ec       	ldi	r26, 0xCD	; 205
     7a6:	bc ec       	ldi	r27, 0xCC	; 204
     7a8:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__umulhisi3>
     7ac:	96 95       	lsr	r25
     7ae:	87 95       	ror	r24
     7b0:	96 95       	lsr	r25
     7b2:	87 95       	ror	r24
     7b4:	cc 01       	movw	r24, r24
     7b6:	a0 e0       	ldi	r26, 0x00	; 0
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	bc 01       	movw	r22, r24
     7bc:	cd 01       	movw	r24, r26
     7be:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__floatunsisf>
     7c2:	dc 01       	movw	r26, r24
     7c4:	cb 01       	movw	r24, r22
     7c6:	2d 81       	ldd	r18, Y+5	; 0x05
     7c8:	3e 81       	ldd	r19, Y+6	; 0x06
     7ca:	4f 81       	ldd	r20, Y+7	; 0x07
     7cc:	58 85       	ldd	r21, Y+8	; 0x08
     7ce:	bc 01       	movw	r22, r24
     7d0:	cd 01       	movw	r24, r26
     7d2:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     7d6:	dc 01       	movw	r26, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	2e e9       	ldi	r18, 0x9E	; 158
     7dc:	3f ee       	ldi	r19, 0xEF	; 239
     7de:	47 e4       	ldi	r20, 0x47	; 71
     7e0:	5f e3       	ldi	r21, 0x3F	; 63
     7e2:	bc 01       	movw	r22, r24
     7e4:	cd 01       	movw	r24, r26
     7e6:	0e 94 b3 08 	call	0x1166	; 0x1166 <__divsf3>
     7ea:	dc 01       	movw	r26, r24
     7ec:	cb 01       	movw	r24, r22
     7ee:	89 87       	std	Y+9, r24	; 0x09
     7f0:	9a 87       	std	Y+10, r25	; 0x0a
     7f2:	ab 87       	std	Y+11, r26	; 0x0b
     7f4:	bc 87       	std	Y+12, r27	; 0x0c
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e2       	ldi	r20, 0x20	; 32
     7fc:	51 e4       	ldi	r21, 0x41	; 65
     7fe:	69 85       	ldd	r22, Y+9	; 0x09
     800:	7a 85       	ldd	r23, Y+10	; 0x0a
     802:	8b 85       	ldd	r24, Y+11	; 0x0b
     804:	9c 85       	ldd	r25, Y+12	; 0x0c
     806:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     80a:	dc 01       	movw	r26, r24
     80c:	cb 01       	movw	r24, r22
     80e:	89 87       	std	Y+9, r24	; 0x09
     810:	9a 87       	std	Y+10, r25	; 0x0a
     812:	ab 87       	std	Y+11, r26	; 0x0b
     814:	bc 87       	std	Y+12, r27	; 0x0c
     816:	69 85       	ldd	r22, Y+9	; 0x09
     818:	7a 85       	ldd	r23, Y+10	; 0x0a
     81a:	8b 85       	ldd	r24, Y+11	; 0x0b
     81c:	9c 85       	ldd	r25, Y+12	; 0x0c
     81e:	0e 94 25 09 	call	0x124a	; 0x124a <__fixsfsi>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	99 23       	and	r25, r25
     828:	1c f4       	brge	.+6      	; 0x830 <get_batt_voltage+0xe8>
     82a:	91 95       	neg	r25
     82c:	81 95       	neg	r24
     82e:	91 09       	sbc	r25, r1
     830:	2c 96       	adiw	r28, 0x0c	; 12
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <get_soil_moisture>:
uint8_t get_soil_moisture()
{
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
     84a:	28 97       	sbiw	r28, 0x08	; 8
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
	unsigned int result=0;
     856:	1a 82       	std	Y+2, r1	; 0x02
     858:	19 82       	std	Y+1, r1	; 0x01
	float moisture;
	for(int i=0; i<5;i++)
     85a:	1c 82       	std	Y+4, r1	; 0x04
     85c:	1b 82       	std	Y+3, r1	; 0x03
     85e:	10 c0       	rjmp	.+32     	; 0x880 <get_soil_moisture+0x3e>
	{
		result = result + adcinit(0);
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <adcinit>
     868:	9c 01       	movw	r18, r24
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	9a 81       	ldd	r25, Y+2	; 0x02
     86e:	82 0f       	add	r24, r18
     870:	93 1f       	adc	r25, r19
     872:	9a 83       	std	Y+2, r25	; 0x02
     874:	89 83       	std	Y+1, r24	; 0x01
}
uint8_t get_soil_moisture()
{
	unsigned int result=0;
	float moisture;
	for(int i=0; i<5;i++)
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	9c 81       	ldd	r25, Y+4	; 0x04
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	8b 83       	std	Y+3, r24	; 0x03
     880:	8b 81       	ldd	r24, Y+3	; 0x03
     882:	9c 81       	ldd	r25, Y+4	; 0x04
     884:	05 97       	sbiw	r24, 0x05	; 5
     886:	64 f3       	brlt	.-40     	; 0x860 <get_soil_moisture+0x1e>
	{
		result = result + adcinit(0);
	}
	UART_Print_Num(result);
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	9a 81       	ldd	r25, Y+2	; 0x02
     88c:	0e 94 df 00 	call	0x1be	; 0x1be <UART_Print_Num>
	moisture = - 0.128 * (result/5) + 122; //curvefit
     890:	89 81       	ldd	r24, Y+1	; 0x01
     892:	9a 81       	ldd	r25, Y+2	; 0x02
     894:	9c 01       	movw	r18, r24
     896:	ad ec       	ldi	r26, 0xCD	; 205
     898:	bc ec       	ldi	r27, 0xCC	; 204
     89a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__umulhisi3>
     89e:	96 95       	lsr	r25
     8a0:	87 95       	ror	r24
     8a2:	96 95       	lsr	r25
     8a4:	87 95       	ror	r24
     8a6:	cc 01       	movw	r24, r24
     8a8:	a0 e0       	ldi	r26, 0x00	; 0
     8aa:	b0 e0       	ldi	r27, 0x00	; 0
     8ac:	bc 01       	movw	r22, r24
     8ae:	cd 01       	movw	r24, r26
     8b0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__floatunsisf>
     8b4:	dc 01       	movw	r26, r24
     8b6:	cb 01       	movw	r24, r22
     8b8:	2f e6       	ldi	r18, 0x6F	; 111
     8ba:	32 e1       	ldi	r19, 0x12	; 18
     8bc:	43 e0       	ldi	r20, 0x03	; 3
     8be:	5e eb       	ldi	r21, 0xBE	; 190
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	44 ef       	ldi	r20, 0xF4	; 244
     8d2:	52 e4       	ldi	r21, 0x42	; 66
     8d4:	bc 01       	movw	r22, r24
     8d6:	cd 01       	movw	r24, r26
     8d8:	0e 94 42 08 	call	0x1084	; 0x1084 <__addsf3>
     8dc:	dc 01       	movw	r26, r24
     8de:	cb 01       	movw	r24, r22
     8e0:	8d 83       	std	Y+5, r24	; 0x05
     8e2:	9e 83       	std	Y+6, r25	; 0x06
     8e4:	af 83       	std	Y+7, r26	; 0x07
     8e6:	b8 87       	std	Y+8, r27	; 0x08
	//Serial.println(moisture); //moisture percentage
	return (uint8_t)abs(moisture);
     8e8:	6d 81       	ldd	r22, Y+5	; 0x05
     8ea:	7e 81       	ldd	r23, Y+6	; 0x06
     8ec:	8f 81       	ldd	r24, Y+7	; 0x07
     8ee:	98 85       	ldd	r25, Y+8	; 0x08
     8f0:	0e 94 25 09 	call	0x124a	; 0x124a <__fixsfsi>
     8f4:	dc 01       	movw	r26, r24
     8f6:	cb 01       	movw	r24, r22
     8f8:	99 23       	and	r25, r25
     8fa:	1c f4       	brge	.+6      	; 0x902 <__stack+0x3>
     8fc:	91 95       	neg	r25
     8fe:	81 95       	neg	r24
     900:	91 09       	sbc	r25, r1
}
     902:	28 96       	adiw	r28, 0x08	; 8
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <getdata>:
//// function to collect all sensors data
void getdata()
{
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
	data[0] = get_batt_voltage();//battery voltage
     91c:	0e 94 a4 03 	call	0x748	; 0x748 <get_batt_voltage>
     920:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <data>
	//data[1] = 75;
	data[1] =  get_soil_moisture();
     924:	0e 94 21 04 	call	0x842	; 0x842 <get_soil_moisture>
     928:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <data+0x1>
	//data[1] = get_temp();//temp value from temp sensor
	data[2] = 29;//humidity value from DHTsensor
     92c:	8d e1       	ldi	r24, 0x1D	; 29
     92e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <data+0x2>
}
     932:	00 00       	nop
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <mosfet_on>:
// turn on mosfet which is connected on D8 pin
void mosfet_on()
{
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
	DDRB |= 0x01;//mosfet D8 pin
     942:	84 e2       	ldi	r24, 0x24	; 36
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	24 e2       	ldi	r18, 0x24	; 36
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	f9 01       	movw	r30, r18
     94c:	20 81       	ld	r18, Z
     94e:	21 60       	ori	r18, 0x01	; 1
     950:	fc 01       	movw	r30, r24
     952:	20 83       	st	Z, r18
	PORTB |= 0x00;// write 0 to D8 pin to turn ON P channel MOSFET
     954:	85 e2       	ldi	r24, 0x25	; 37
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	25 e2       	ldi	r18, 0x25	; 37
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	f9 01       	movw	r30, r18
     95e:	20 81       	ld	r18, Z
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
}
     964:	00 00       	nop
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <mosfet_off>:
////////////////
// turn on mosfet which is connected on D8 pin
void mosfet_off()
{
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
	PORTB |= 0x01;// write 1 to D8 pin turn OFF P channel MOSFET
     974:	85 e2       	ldi	r24, 0x25	; 37
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	25 e2       	ldi	r18, 0x25	; 37
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	f9 01       	movw	r30, r18
     97e:	20 81       	ld	r18, Z
     980:	21 60       	ori	r18, 0x01	; 1
     982:	fc 01       	movw	r30, r24
     984:	20 83       	st	Z, r18
}
     986:	00 00       	nop
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <main>:
byte data[4]="";	
unsigned int test=0;
RF24 radio(9, 10); // CE, CSN	
int main(void)
{ 
	cli();//disable global interrupt
     98e:	f8 94       	cli
	unsigned char status1=0;//to read a NRF24L01 particular register using SPI
	UART_Init();
     990:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_Init>
	// Every time turn ON mosfet  before initialsing NRF24L01+
	mosfet_on();
     994:	0e 94 9d 04 	call	0x93a	; 0x93a <mosfet_on>
	radio.begin();	 
     998:	88 e1       	ldi	r24, 0x18	; 24
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZN4RF245beginEv>
	radio.openWritingPipe(pipes[NODE_NUMBER]);// transmitter address for pipe 1
     9a0:	02 ee       	ldi	r16, 0xE2	; 226
     9a2:	10 ef       	ldi	r17, 0xF0	; 240
     9a4:	20 ef       	ldi	r18, 0xF0	; 240
     9a6:	30 ef       	ldi	r19, 0xF0	; 240
     9a8:	40 ef       	ldi	r20, 0xF0	; 240
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	88 e1       	ldi	r24, 0x18	; 24
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <_ZN4RF2415openWritingPipeEy>
	radio.setDataRate(RF24_250KBPS);// set 250 kbps speed for transmission
     9b8:	62 e0       	ldi	r22, 0x02	; 2
     9ba:	88 e1       	ldi	r24, 0x18	; 24
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN4RF2411setDataRateE15rf24_datarate_e>
	// sets ARD(Auto Retransmission Delay) and ARC(Auto Retransmission count)
	//radio.setRetries(12,15);
	radio.stopListening();//make radio  transmitter	
     9c2:	88 e1       	ldi	r24, 0x18	; 24
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 52 06 	call	0xca4	; 0xca4 <_ZN4RF2413stopListeningEv>
	sei();//enable global interrupts
     9ca:	78 94       	sei
	
	while (1)
	{
		// collect data of all sensors 
		getdata();
     9cc:	0e 94 8a 04 	call	0x914	; 0x914 <getdata>
		// send data with fixed ARD untill ACK is not received
		while(radio.write(data, sizeof(data))!=true){}
     9d0:	44 e0       	ldi	r20, 0x04	; 4
     9d2:	60 e3       	ldi	r22, 0x30	; 48
     9d4:	71 e0       	ldi	r23, 0x01	; 1
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZN4RF245writeEPKvh>
     9de:	88 23       	and	r24, r24
     9e0:	b9 f3       	breq	.-18     	; 0x9d0 <main+0x42>
			 sei();//enable global interrupts
     9e2:	78 94       	sei
			 radio.powerDown(); 
     9e4:	88 e1       	ldi	r24, 0x18	; 24
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN4RF249powerDownEv>
			 // switch off mosfet before sleep
			 mosfet_off();// write 1 to ON P channel MOsfet(0ff mosfet)
     9ec:	0e 94 b6 04 	call	0x96c	; 0x96c <mosfet_off>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	83 e2       	ldi	r24, 0x23	; 35
     9f4:	94 ef       	ldi	r25, 0xF4	; 244
     9f6:	21 50       	subi	r18, 0x01	; 1
     9f8:	80 40       	sbci	r24, 0x00	; 0
     9fa:	90 40       	sbci	r25, 0x00	; 0
     9fc:	e1 f7       	brne	.-8      	; 0x9f6 <main+0x68>
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <main+0x72>
     a00:	00 00       	nop
			 //wait for 10 seconds just for testing insert power down delay here
			 _delay_ms(10000); 
			 
			// power_down(10);// put msu in sleep for given(10) minutes or seconds
			// turn on supply to NRF after waking up
			mosfet_on();
     a02:	0e 94 9d 04 	call	0x93a	; 0x93a <mosfet_on>
			radio.powerUp();//power up nrf
     a06:	88 e1       	ldi	r24, 0x18	; 24
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN4RF247powerUpEv>
			radio.begin(); // initailaztion of NRF 
     a0e:	88 e1       	ldi	r24, 0x18	; 24
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZN4RF245beginEv>
			radio.openWritingPipe(pipes[NODE_NUMBER]);// transmitter address for pipe number
     a16:	02 ee       	ldi	r16, 0xE2	; 226
     a18:	10 ef       	ldi	r17, 0xF0	; 240
     a1a:	20 ef       	ldi	r18, 0xF0	; 240
     a1c:	30 ef       	ldi	r19, 0xF0	; 240
     a1e:	40 ef       	ldi	r20, 0xF0	; 240
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	88 e1       	ldi	r24, 0x18	; 24
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <_ZN4RF2415openWritingPipeEy>
			radio.setDataRate(RF24_250KBPS);// set data rate for transmission as 250kbps
     a2e:	62 e0       	ldi	r22, 0x02	; 2
     a30:	88 e1       	ldi	r24, 0x18	; 24
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN4RF2411setDataRateE15rf24_datarate_e>
			//radio.setRetries(12,15);// set diffrent ARD,ARC for each transmitter node
			radio.stopListening();//make radio  transmitter
     a38:	88 e1       	ldi	r24, 0x18	; 24
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 52 06 	call	0xca4	; 0xca4 <_ZN4RF2413stopListeningEv>
	// sets ARD(Auto Retransmission Delay) and ARC(Auto Retransmission count)
	//radio.setRetries(12,15);
	radio.stopListening();//make radio  transmitter	
	sei();//enable global interrupts
	
	while (1)
     a40:	c5 cf       	rjmp	.-118    	; 0x9cc <main+0x3e>

00000a42 <_GLOBAL__sub_I_count>:
const uint64_t pipes[5] = {0xF0F0F0F0E1LL,0xF0F0F0F0E2LL,0xF0F0F0F0E3LL,0xF0F0F0F0E4LL,0xF0F0F0F0E5LL}; 	
unsigned char count=1;//variable for packet count
unsigned char p=0;// variable for power level
byte data[4]="";	
unsigned int test=0;
RF24 radio(9, 10); // CE, CSN	
     a42:	4a e0       	ldi	r20, 0x0A	; 10
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	69 e0       	ldi	r22, 0x09	; 9
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	88 e1       	ldi	r24, 0x18	; 24
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN4RF24C1Ejj>
     a52:	08 95       	ret

00000a54 <_ZN4RF243csnEb>:

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
}
     a54:	fc 01       	movw	r30, r24
     a56:	82 81       	ldd	r24, Z+2	; 0x02
     a58:	93 81       	ldd	r25, Z+3	; 0x03
     a5a:	0e 94 2d 02 	call	0x45a	; 0x45a <Write_Digital>
     a5e:	fd e0       	ldi	r31, 0x0D	; 13
     a60:	fa 95       	dec	r31
     a62:	f1 f7       	brne	.-4      	; 0xa60 <_ZN4RF243csnEb+0xc>
     a64:	00 00       	nop
     a66:	08 95       	ret

00000a68 <_ZN4RF242ceEb>:
     a68:	fc 01       	movw	r30, r24
     a6a:	80 81       	ld	r24, Z
     a6c:	91 81       	ldd	r25, Z+1	; 0x01
     a6e:	22 81       	ldd	r18, Z+2	; 0x02
     a70:	33 81       	ldd	r19, Z+3	; 0x03
     a72:	82 17       	cp	r24, r18
     a74:	93 07       	cpc	r25, r19
     a76:	11 f0       	breq	.+4      	; 0xa7c <_ZN4RF242ceEb+0x14>
     a78:	0e 94 2d 02 	call	0x45a	; 0x45a <Write_Digital>
     a7c:	83 e0       	ldi	r24, 0x03	; 3
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <_ZN4RF242ceEb+0x18>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <_ZN4RF242ceEb+0x1e>
     a86:	00 00       	nop
     a88:	08 95       	ret

00000a8a <_ZN4RF2413read_registerEh>:
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	8c 01       	movw	r16, r24
     a92:	c6 2f       	mov	r28, r22
     a94:	80 e5       	ldi	r24, 0x50	; 80
     a96:	8c bd       	out	0x2c, r24	; 44
     a98:	1d bc       	out	0x2d, r1	; 45
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	c8 01       	movw	r24, r16
     a9e:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF243csnEb>
     aa2:	cf 71       	andi	r28, 0x1F	; 31
     aa4:	ce bd       	out	0x2e, r28	; 46
     aa6:	00 00       	nop
     aa8:	0d b4       	in	r0, 0x2d	; 45
     aaa:	07 fe       	sbrs	r0, 7
     aac:	fd cf       	rjmp	.-6      	; 0xaa8 <_ZN4RF2413read_registerEh+0x1e>
     aae:	8e b5       	in	r24, 0x2e	; 46
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	8e bd       	out	0x2e, r24	; 46
     ab4:	00 00       	nop
     ab6:	0d b4       	in	r0, 0x2d	; 45
     ab8:	07 fe       	sbrs	r0, 7
     aba:	fd cf       	rjmp	.-6      	; 0xab6 <_ZN4RF2413read_registerEh+0x2c>
     abc:	ce b5       	in	r28, 0x2e	; 46
     abe:	61 e0       	ldi	r22, 0x01	; 1
     ac0:	c8 01       	movw	r24, r16
     ac2:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF243csnEb>
     ac6:	8c 2f       	mov	r24, r28
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	08 95       	ret

00000ad0 <_ZN4RF2414write_registerEhPKhh>:
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	8c 01       	movw	r16, r24
     ade:	c6 2f       	mov	r28, r22
     ae0:	e4 2e       	mov	r14, r20
     ae2:	f5 2e       	mov	r15, r21
     ae4:	d2 2f       	mov	r29, r18
     ae6:	80 e5       	ldi	r24, 0x50	; 80
     ae8:	8c bd       	out	0x2c, r24	; 44
     aea:	1d bc       	out	0x2d, r1	; 45
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	c8 01       	movw	r24, r16
     af0:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF243csnEb>
     af4:	cf 71       	andi	r28, 0x1F	; 31
     af6:	c0 62       	ori	r28, 0x20	; 32
     af8:	ce bd       	out	0x2e, r28	; 46
     afa:	00 00       	nop
     afc:	0d b4       	in	r0, 0x2d	; 45
     afe:	07 fe       	sbrs	r0, 7
     b00:	fd cf       	rjmp	.-6      	; 0xafc <_ZN4RF2414write_registerEhPKhh+0x2c>
     b02:	ce b5       	in	r28, 0x2e	; 46
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	8d 0f       	add	r24, r29
     b08:	dd 23       	and	r29, r29
     b0a:	59 f0       	breq	.+22     	; 0xb22 <_ZN4RF2414write_registerEhPKhh+0x52>
     b0c:	ee 2d       	mov	r30, r14
     b0e:	ff 2d       	mov	r31, r15
     b10:	91 91       	ld	r25, Z+
     b12:	9e bd       	out	0x2e, r25	; 46
     b14:	00 00       	nop
     b16:	0d b4       	in	r0, 0x2d	; 45
     b18:	07 fe       	sbrs	r0, 7
     b1a:	fd cf       	rjmp	.-6      	; 0xb16 <_ZN4RF2414write_registerEhPKhh+0x46>
     b1c:	9e b5       	in	r25, 0x2e	; 46
     b1e:	81 50       	subi	r24, 0x01	; 1
     b20:	b8 f7       	brcc	.-18     	; 0xb10 <_ZN4RF2414write_registerEhPKhh+0x40>
     b22:	61 e0       	ldi	r22, 0x01	; 1
     b24:	c8 01       	movw	r24, r16
     b26:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF243csnEb>
     b2a:	8c 2f       	mov	r24, r28
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	08 95       	ret

00000b3a <_ZN4RF2414write_registerEhh>:
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	8c 01       	movw	r16, r24
     b44:	c6 2f       	mov	r28, r22
     b46:	d4 2f       	mov	r29, r20
     b48:	80 e5       	ldi	r24, 0x50	; 80
     b4a:	8c bd       	out	0x2c, r24	; 44
     b4c:	1d bc       	out	0x2d, r1	; 45
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	c8 01       	movw	r24, r16
     b52:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF243csnEb>
     b56:	cf 71       	andi	r28, 0x1F	; 31
     b58:	c0 62       	ori	r28, 0x20	; 32
     b5a:	ce bd       	out	0x2e, r28	; 46
     b5c:	00 00       	nop
     b5e:	0d b4       	in	r0, 0x2d	; 45
     b60:	07 fe       	sbrs	r0, 7
     b62:	fd cf       	rjmp	.-6      	; 0xb5e <_ZN4RF2414write_registerEhh+0x24>
     b64:	ce b5       	in	r28, 0x2e	; 46
     b66:	de bd       	out	0x2e, r29	; 46
     b68:	00 00       	nop
     b6a:	0d b4       	in	r0, 0x2d	; 45
     b6c:	07 fe       	sbrs	r0, 7
     b6e:	fd cf       	rjmp	.-6      	; 0xb6a <_ZN4RF2414write_registerEhh+0x30>
     b70:	8e b5       	in	r24, 0x2e	; 46
     b72:	61 e0       	ldi	r22, 0x01	; 1
     b74:	c8 01       	movw	r24, r16
     b76:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF243csnEb>
     b7a:	8c 2f       	mov	r24, r28
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	08 95       	ret

00000b86 <_ZN4RF2413write_payloadEPKvhh>:
     b86:	df 92       	push	r13
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	ec 01       	movw	r28, r24
     b96:	d6 2e       	mov	r13, r22
     b98:	e7 2e       	mov	r14, r23
     b9a:	f2 2e       	mov	r15, r18
     b9c:	8f 81       	ldd	r24, Y+7	; 0x07
     b9e:	08 2f       	mov	r16, r24
     ba0:	48 17       	cp	r20, r24
     ba2:	08 f4       	brcc	.+2      	; 0xba6 <_ZN4RF2413write_payloadEPKvhh+0x20>
     ba4:	04 2f       	mov	r16, r20
     ba6:	98 85       	ldd	r25, Y+8	; 0x08
     ba8:	91 11       	cpse	r25, r1
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <_ZN4RF2413write_payloadEPKvhh+0x2c>
     bac:	18 2f       	mov	r17, r24
     bae:	10 1b       	sub	r17, r16
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <_ZN4RF2413write_payloadEPKvhh+0x2e>
     bb2:	10 e0       	ldi	r17, 0x00	; 0
     bb4:	80 e5       	ldi	r24, 0x50	; 80
     bb6:	8c bd       	out	0x2c, r24	; 44
     bb8:	1d bc       	out	0x2d, r1	; 45
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	ce 01       	movw	r24, r28
     bbe:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF243csnEb>
     bc2:	fe bc       	out	0x2e, r15	; 46
     bc4:	00 00       	nop
     bc6:	0d b4       	in	r0, 0x2d	; 45
     bc8:	07 fe       	sbrs	r0, 7
     bca:	fd cf       	rjmp	.-6      	; 0xbc6 <_ZN4RF2413write_payloadEPKvhh+0x40>
     bcc:	fe b4       	in	r15, 0x2e	; 46
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	80 0f       	add	r24, r16
     bd2:	01 11       	cpse	r16, r1
     bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <_ZN4RF2413write_payloadEPKvhh+0x5a>
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	81 0f       	add	r24, r17
     bda:	11 11       	cpse	r17, r1
     bdc:	0d c0       	rjmp	.+26     	; 0xbf8 <_ZN4RF2413write_payloadEPKvhh+0x72>
     bde:	14 c0       	rjmp	.+40     	; 0xc08 <_ZN4RF2413write_payloadEPKvhh+0x82>
     be0:	ed 2d       	mov	r30, r13
     be2:	fe 2d       	mov	r31, r14
     be4:	91 91       	ld	r25, Z+
     be6:	9e bd       	out	0x2e, r25	; 46
     be8:	00 00       	nop
     bea:	0d b4       	in	r0, 0x2d	; 45
     bec:	07 fe       	sbrs	r0, 7
     bee:	fd cf       	rjmp	.-6      	; 0xbea <_ZN4RF2413write_payloadEPKvhh+0x64>
     bf0:	9e b5       	in	r25, 0x2e	; 46
     bf2:	81 50       	subi	r24, 0x01	; 1
     bf4:	b8 f7       	brcc	.-18     	; 0xbe4 <_ZN4RF2413write_payloadEPKvhh+0x5e>
     bf6:	ef cf       	rjmp	.-34     	; 0xbd6 <_ZN4RF2413write_payloadEPKvhh+0x50>
     bf8:	1e bc       	out	0x2e, r1	; 46
     bfa:	00 00       	nop
     bfc:	0d b4       	in	r0, 0x2d	; 45
     bfe:	07 fe       	sbrs	r0, 7
     c00:	fd cf       	rjmp	.-6      	; 0xbfc <_ZN4RF2413write_payloadEPKvhh+0x76>
     c02:	9e b5       	in	r25, 0x2e	; 46
     c04:	81 50       	subi	r24, 0x01	; 1
     c06:	c0 f7       	brcc	.-16     	; 0xbf8 <_ZN4RF2413write_payloadEPKvhh+0x72>
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	ce 01       	movw	r24, r28
     c0c:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF243csnEb>
     c10:	8f 2d       	mov	r24, r15
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	df 90       	pop	r13
     c20:	08 95       	ret

00000c22 <_ZN4RF248spiTransEh>:
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	ec 01       	movw	r28, r24
     c2a:	16 2f       	mov	r17, r22
     c2c:	80 e5       	ldi	r24, 0x50	; 80
     c2e:	8c bd       	out	0x2c, r24	; 44
     c30:	1d bc       	out	0x2d, r1	; 45
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	ce 01       	movw	r24, r28
     c36:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF243csnEb>
     c3a:	1e bd       	out	0x2e, r17	; 46
     c3c:	00 00       	nop
     c3e:	0d b4       	in	r0, 0x2d	; 45
     c40:	07 fe       	sbrs	r0, 7
     c42:	fd cf       	rjmp	.-6      	; 0xc3e <_ZN4RF248spiTransEh+0x1c>
     c44:	1e b5       	in	r17, 0x2e	; 46
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	ce 01       	movw	r24, r28
     c4a:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF243csnEb>
     c4e:	81 2f       	mov	r24, r17
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	08 95       	ret

00000c58 <_ZN4RF248flush_rxEv>:
     c58:	62 ee       	ldi	r22, 0xE2	; 226
     c5a:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN4RF248spiTransEh>
     c5e:	08 95       	ret

00000c60 <_ZN4RF248flush_txEv>:
     c60:	61 ee       	ldi	r22, 0xE1	; 225
     c62:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN4RF248spiTransEh>
     c66:	08 95       	ret

00000c68 <_ZN4RF24C1Ejj>:
     c68:	fc 01       	movw	r30, r24
     c6a:	71 83       	std	Z+1, r23	; 0x01
     c6c:	60 83       	st	Z, r22
     c6e:	53 83       	std	Z+3, r21	; 0x03
     c70:	42 83       	std	Z+2, r20	; 0x02
     c72:	16 82       	std	Z+6, r1	; 0x06
     c74:	80 e2       	ldi	r24, 0x20	; 32
     c76:	87 83       	std	Z+7, r24	; 0x07
     c78:	10 86       	std	Z+8, r1	; 0x08
     c7a:	85 e0       	ldi	r24, 0x05	; 5
     c7c:	86 87       	std	Z+14, r24	; 0x0e
     c7e:	85 e0       	ldi	r24, 0x05	; 5
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	a0 e0       	ldi	r26, 0x00	; 0
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	84 8b       	std	Z+20, r24	; 0x14
     c88:	95 8b       	std	Z+21, r25	; 0x15
     c8a:	a6 8b       	std	Z+22, r26	; 0x16
     c8c:	b7 8b       	std	Z+23, r27	; 0x17
     c8e:	11 86       	std	Z+9, r1	; 0x09
     c90:	08 95       	ret

00000c92 <_ZN4RF2410setChannelEh>:
     c92:	6d 37       	cpi	r22, 0x7D	; 125
     c94:	10 f4       	brcc	.+4      	; 0xc9a <_ZN4RF2410setChannelEh+0x8>
     c96:	46 2f       	mov	r20, r22
     c98:	01 c0       	rjmp	.+2      	; 0xc9c <_ZN4RF2410setChannelEh+0xa>
     c9a:	4d e7       	ldi	r20, 0x7D	; 125
     c9c:	65 e0       	ldi	r22, 0x05	; 5
     c9e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>
     ca2:	08 95       	ret

00000ca4 <_ZN4RF2413stopListeningEv>:
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	ec 01       	movw	r28, r24
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	0e 94 34 05 	call	0xa68	; 0xa68 <_ZN4RF242ceEb>
     cb0:	8b e6       	ldi	r24, 0x6B	; 107
     cb2:	92 e0       	ldi	r25, 0x02	; 2
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <_ZN4RF2413stopListeningEv+0x10>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <_ZN4RF2413stopListeningEv+0x16>
     cba:	00 00       	nop
     cbc:	6d e1       	ldi	r22, 0x1D	; 29
     cbe:	ce 01       	movw	r24, r28
     cc0:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN4RF2413read_registerEh>
     cc4:	81 ff       	sbrs	r24, 1
     cc6:	09 c0       	rjmp	.+18     	; 0xcda <_ZN4RF2413stopListeningEv+0x36>
     cc8:	8b e6       	ldi	r24, 0x6B	; 107
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <_ZN4RF2413stopListeningEv+0x28>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <_ZN4RF2413stopListeningEv+0x2e>
     cd2:	00 00       	nop
     cd4:	ce 01       	movw	r24, r28
     cd6:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN4RF248flush_txEv>
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	ce 01       	movw	r24, r28
     cde:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN4RF2413read_registerEh>
     ce2:	48 2f       	mov	r20, r24
     ce4:	4e 7f       	andi	r20, 0xFE	; 254
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	ce 01       	movw	r24, r28
     cea:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>
     cee:	62 e0       	ldi	r22, 0x02	; 2
     cf0:	ce 01       	movw	r24, r28
     cf2:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN4RF2413read_registerEh>
     cf6:	48 2f       	mov	r20, r24
     cf8:	41 60       	ori	r20, 0x01	; 1
     cfa:	62 e0       	ldi	r22, 0x02	; 2
     cfc:	ce 01       	movw	r24, r28
     cfe:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <_ZN4RF249powerDownEv>:
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ec 01       	movw	r28, r24
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	0e 94 34 05 	call	0xa68	; 0xa68 <_ZN4RF242ceEb>
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	ce 01       	movw	r24, r28
     d18:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN4RF2413read_registerEh>
     d1c:	48 2f       	mov	r20, r24
     d1e:	4d 7f       	andi	r20, 0xFD	; 253
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	ce 01       	movw	r24, r28
     d24:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <_ZN4RF247powerUpEv>:
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN4RF2413read_registerEh>
     d3c:	18 2f       	mov	r17, r24
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	ce 01       	movw	r24, r28
     d42:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN4RF2413read_registerEh>
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 df 00 	call	0x1be	; 0x1be <UART_Print_Num>
     d4c:	11 fd       	sbrc	r17, 1
     d4e:	1b c0       	rjmp	.+54     	; 0xd86 <_ZN4RF247powerUpEv+0x58>
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 b5 00 	call	0x16a	; 0x16a <UART_Printf>
     d58:	41 2f       	mov	r20, r17
     d5a:	42 60       	ori	r20, 0x02	; 2
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	ce 01       	movw	r24, r28
     d60:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>
     d64:	8f e5       	ldi	r24, 0x5F	; 95
     d66:	9a ee       	ldi	r25, 0xEA	; 234
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <_ZN4RF247powerUpEv+0x3a>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <_ZN4RF247powerUpEv+0x40>
     d6e:	00 00       	nop
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	ce 01       	movw	r24, r28
     d74:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN4RF2413read_registerEh>
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 df 00 	call	0x1be	; 0x1be <UART_Print_Num>
     d7e:	86 e0       	ldi	r24, 0x06	; 6
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	0e 94 b5 00 	call	0x16a	; 0x16a <UART_Printf>
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	08 95       	ret

00000d8e <_ZN4RF2414startFastWriteEPKvhbb>:
     d8e:	0f 93       	push	r16
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	ec 01       	movw	r28, r24
     d96:	21 11       	cpse	r18, r1
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <_ZN4RF2414startFastWriteEPKvhbb+0x10>
     d9a:	20 ea       	ldi	r18, 0xA0	; 160
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <_ZN4RF2414startFastWriteEPKvhbb+0x12>
     d9e:	20 eb       	ldi	r18, 0xB0	; 176
     da0:	ce 01       	movw	r24, r28
     da2:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZN4RF2413write_payloadEPKvhh>
     da6:	00 23       	and	r16, r16
     da8:	21 f0       	breq	.+8      	; 0xdb2 <_ZN4RF2414startFastWriteEPKvhbb+0x24>
     daa:	61 e0       	ldi	r22, 0x01	; 1
     dac:	ce 01       	movw	r24, r28
     dae:	0e 94 34 05 	call	0xa68	; 0xa68 <_ZN4RF242ceEb>
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	0f 91       	pop	r16
     db8:	08 95       	ret

00000dba <_ZN4RF245writeEPKvhb>:
     dba:	0f 93       	push	r16
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	ec 01       	movw	r28, r24
     dc2:	01 e0       	ldi	r16, 0x01	; 1
     dc4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN4RF2414startFastWriteEPKvhbb>
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	ce 01       	movw	r24, r28
     dcc:	0e 94 34 05 	call	0xa68	; 0xa68 <_ZN4RF242ceEb>
     dd0:	40 e7       	ldi	r20, 0x70	; 112
     dd2:	67 e0       	ldi	r22, 0x07	; 7
     dd4:	ce 01       	movw	r24, r28
     dd6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>
     dda:	84 ff       	sbrs	r24, 4
     ddc:	05 c0       	rjmp	.+10     	; 0xde8 <_ZN4RF245writeEPKvhb+0x2e>
     dde:	ce 01       	movw	r24, r28
     de0:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN4RF248flush_txEv>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	01 c0       	rjmp	.+2      	; 0xdea <_ZN4RF245writeEPKvhb+0x30>
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <_ZN4RF245writeEPKvh>:
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN4RF245writeEPKvhb>
     df8:	08 95       	ret

00000dfa <_ZN4RF2415openWritingPipeEy>:
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	28 97       	sbiw	r28, 0x08	; 8
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	7c 01       	movw	r14, r24
     e18:	09 83       	std	Y+1, r16	; 0x01
     e1a:	1a 83       	std	Y+2, r17	; 0x02
     e1c:	2b 83       	std	Y+3, r18	; 0x03
     e1e:	3c 83       	std	Y+4, r19	; 0x04
     e20:	4d 83       	std	Y+5, r20	; 0x05
     e22:	5e 83       	std	Y+6, r21	; 0x06
     e24:	6f 83       	std	Y+7, r22	; 0x07
     e26:	78 87       	std	Y+8, r23	; 0x08
     e28:	fc 01       	movw	r30, r24
     e2a:	26 85       	ldd	r18, Z+14	; 0x0e
     e2c:	ae 01       	movw	r20, r28
     e2e:	4f 5f       	subi	r20, 0xFF	; 255
     e30:	5f 4f       	sbci	r21, 0xFF	; 255
     e32:	6a e0       	ldi	r22, 0x0A	; 10
     e34:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN4RF2414write_registerEhPKhh>
     e38:	f7 01       	movw	r30, r14
     e3a:	26 85       	ldd	r18, Z+14	; 0x0e
     e3c:	ae 01       	movw	r20, r28
     e3e:	4f 5f       	subi	r20, 0xFF	; 255
     e40:	5f 4f       	sbci	r21, 0xFF	; 255
     e42:	60 e1       	ldi	r22, 0x10	; 16
     e44:	c7 01       	movw	r24, r14
     e46:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN4RF2414write_registerEhPKhh>
     e4a:	f7 01       	movw	r30, r14
     e4c:	47 81       	ldd	r20, Z+7	; 0x07
     e4e:	61 e1       	ldi	r22, 0x11	; 17
     e50:	c7 01       	movw	r24, r14
     e52:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>
     e56:	28 96       	adiw	r28, 0x08	; 8
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	ff 90       	pop	r15
     e6c:	ef 90       	pop	r14
     e6e:	08 95       	ret

00000e70 <_ZN4RF2415toggle_featuresEv>:
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	ec 01       	movw	r28, r24
     e78:	10 e5       	ldi	r17, 0x50	; 80
     e7a:	1c bd       	out	0x2c, r17	; 44
     e7c:	1d bc       	out	0x2d, r1	; 45
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF243csnEb>
     e84:	1e bd       	out	0x2e, r17	; 46
     e86:	00 00       	nop
     e88:	0d b4       	in	r0, 0x2d	; 45
     e8a:	07 fe       	sbrs	r0, 7
     e8c:	fd cf       	rjmp	.-6      	; 0xe88 <_ZN4RF2415toggle_featuresEv+0x18>
     e8e:	8e b5       	in	r24, 0x2e	; 46
     e90:	83 e7       	ldi	r24, 0x73	; 115
     e92:	8e bd       	out	0x2e, r24	; 46
     e94:	00 00       	nop
     e96:	0d b4       	in	r0, 0x2d	; 45
     e98:	07 fe       	sbrs	r0, 7
     e9a:	fd cf       	rjmp	.-6      	; 0xe96 <_ZN4RF2415toggle_featuresEv+0x26>
     e9c:	8e b5       	in	r24, 0x2e	; 46
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	ce 01       	movw	r24, r28
     ea2:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF243csnEb>
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	08 95       	ret

00000eae <_ZN4RF2410setPALevelEh>:
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	8c 01       	movw	r16, r24
     eb6:	c6 2f       	mov	r28, r22
     eb8:	66 e0       	ldi	r22, 0x06	; 6
     eba:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN4RF2413read_registerEh>
     ebe:	88 7f       	andi	r24, 0xF8	; 248
     ec0:	c4 30       	cpi	r28, 0x04	; 4
     ec2:	18 f4       	brcc	.+6      	; 0xeca <_ZN4RF2410setPALevelEh+0x1c>
     ec4:	cc 0f       	add	r28, r28
     ec6:	cf 5f       	subi	r28, 0xFF	; 255
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <_ZN4RF2410setPALevelEh+0x1e>
     eca:	c7 e0       	ldi	r28, 0x07	; 7
     ecc:	4c 2f       	mov	r20, r28
     ece:	48 2b       	or	r20, r24
     ed0:	66 e0       	ldi	r22, 0x06	; 6
     ed2:	c8 01       	movw	r24, r16
     ed4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	08 95       	ret

00000ee0 <_ZN4RF2411setDataRateE15rf24_datarate_e>:

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	ec 01       	movw	r28, r24
     eea:	06 2f       	mov	r16, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     eec:	66 e0       	ldi	r22, 0x06	; 6
     eee:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     ef2:	18 2f       	mov	r17, r24
     ef4:	17 7d       	andi	r17, 0xD7	; 215
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
  //#endif
  if( speed == RF24_250KBPS )
     ef6:	02 30       	cpi	r16, 0x02	; 2
     ef8:	51 f4       	brne	.+20     	; 0xf0e <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2e>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
     efa:	10 62       	ori	r17, 0x20	; 32
 /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=450;
  #else //16Mhz Arduino*/
	txDelay=155;
     efc:	8b e9       	ldi	r24, 0x9B	; 155
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a0 e0       	ldi	r26, 0x00	; 0
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	88 8b       	std	Y+16, r24	; 0x10
     f06:	99 8b       	std	Y+17, r25	; 0x11
     f08:	aa 8b       	std	Y+18, r26	; 0x12
     f0a:	bb 8b       	std	Y+19, r27	; 0x13
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     f0e:	01 30       	cpi	r16, 0x01	; 1
     f10:	49 f0       	breq	.+18     	; 0xf24 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
/*  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
     f12:	85 e5       	ldi	r24, 0x55	; 85
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	a0 e0       	ldi	r26, 0x00	; 0
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	88 8b       	std	Y+16, r24	; 0x10
     f1c:	99 8b       	std	Y+17, r25	; 0x11
     f1e:	aa 8b       	std	Y+18, r26	; 0x12
     f20:	bb 8b       	std	Y+19, r27	; 0x13
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
     f24:	18 60       	ori	r17, 0x08	; 8
     /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txDelay=190;
      #else //16Mhz Arduino	*/  
	 txDelay=65;
     f26:	81 e4       	ldi	r24, 0x41	; 65
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	a0 e0       	ldi	r26, 0x00	; 0
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	88 8b       	std	Y+16, r24	; 0x10
     f30:	99 8b       	std	Y+17, r25	; 0x11
     f32:	aa 8b       	std	Y+18, r26	; 0x12
     f34:	bb 8b       	std	Y+19, r27	; 0x13
	  //#endif
    }
  }
  write_register(RF_SETUP,setup);
     f36:	41 2f       	mov	r20, r17
     f38:	66 e0       	ldi	r22, 0x06	; 6
     f3a:	ce 01       	movw	r24, r28
     f3c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     f40:	66 e0       	ldi	r22, 0x06	; 6
     f42:	ce 01       	movw	r24, r28
     f44:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN4RF2413read_registerEh>
  {
    result = true;
  }
  return result;
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	18 13       	cpse	r17, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
}
     f4e:	89 2f       	mov	r24, r25
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <_ZN4RF245beginEv>:
}

/****************************************************************************/

bool RF24::begin(void)
{
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	ec 01       	movw	r28, r24
  uint8_t setup=0;

    if (ce_pin != csn_pin) Set_pin(ce_pin,OUT);  
     f62:	88 81       	ld	r24, Y
     f64:	99 81       	ldd	r25, Y+1	; 0x01
     f66:	2a 81       	ldd	r18, Y+2	; 0x02
     f68:	3b 81       	ldd	r19, Y+3	; 0x03
     f6a:	82 17       	cp	r24, r18
     f6c:	93 07       	cpc	r25, r19
     f6e:	21 f0       	breq	.+8      	; 0xf78 <_ZN4RF245beginEv+0x1e>
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <Set_pin>
        Set_pin(csn_pin,OUT);
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	9b 81       	ldd	r25, Y+3	; 0x03
     f80:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <Set_pin>
    _SPI.begin();
     f84:	0e 94 28 08 	call	0x1050	; 0x1050 <_ZN8SPIClass5beginEv>
    ce(low);
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	ce 01       	movw	r24, r28
     f8c:	0e 94 34 05 	call	0xa68	; 0xa68 <_ZN4RF242ceEb>
  	csn(high);
     f90:	61 e0       	ldi	r22, 0x01	; 1
     f92:	ce 01       	movw	r24, r28
     f94:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN4RF243csnEb>
     f98:	8f e0       	ldi	r24, 0x0F	; 15
     f9a:	97 e2       	ldi	r25, 0x27	; 39
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <_ZN4RF245beginEv+0x42>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <_ZN4RF245beginEv+0x48>
     fa2:	00 00       	nop
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: _delay_ms is based on P-variant whereby non-P *may* require different timing.
  _delay_ms(5) ;

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;
     fa4:	4c e0       	ldi	r20, 0x0C	; 12
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	ce 01       	movw	r24, r28
     faa:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     fae:	4f e5       	ldi	r20, 0x5F	; 95
     fb0:	64 e0       	ldi	r22, 0x04	; 4
     fb2:	ce 01       	movw	r24, r28
     fb4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>
  // WARNING: If this is ever lowered, either 250KBS mode with AA is broken or maximum packet
  // sizes must never be used. See documentation for a more complete explanation.
  setRetries(5,15);

  // Reset value is MAX
  setPALevel( RF24_PA_MAX ) ;
     fb8:	63 e0       	ldi	r22, 0x03	; 3
     fba:	ce 01       	movw	r24, r28
     fbc:	0e 94 57 07 	call	0xeae	; 0xeae <_ZN4RF2410setPALevelEh>

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
     fc0:	62 e0       	ldi	r22, 0x02	; 2
     fc2:	ce 01       	movw	r24, r28
     fc4:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN4RF2411setDataRateE15rf24_datarate_e>
     fc8:	88 23       	and	r24, r24
     fca:	11 f0       	breq	.+4      	; 0xfd0 <_ZN4RF245beginEv+0x76>
  {
    p_variant = true ;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	8e 83       	std	Y+6, r24	; 0x06
  }
  setup = read_register(RF_SETUP);
     fd0:	66 e0       	ldi	r22, 0x06	; 6
     fd2:	ce 01       	movw	r24, r28
     fd4:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN4RF2413read_registerEh>
     fd8:	18 2f       	mov	r17, r24
 if( setup == 0b00001110 )     // register default for nRF24L01P
     fda:	8e 30       	cpi	r24, 0x0E	; 14
     fdc:	11 f4       	brne	.+4      	; 0xfe2 <_ZN4RF245beginEv+0x88>
  {
    p_variant = true ;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	8e 83       	std	Y+6, r24	; 0x06
  }
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	ce 01       	movw	r24, r28
     fe6:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
     fea:	ce 01       	movw	r24, r28
     fec:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	6d e1       	ldi	r22, 0x1D	; 29
     ff4:	ce 01       	movw	r24, r28
     ff6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	6c e1       	ldi	r22, 0x1C	; 28
     ffe:	ce 01       	movw	r24, r28
    1000:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>
  dynamic_payloads_enabled = false;
    1004:	18 86       	std	Y+8, r1	; 0x08

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    1006:	40 e7       	ldi	r20, 0x70	; 112
    1008:	67 e0       	ldi	r22, 0x07	; 7
    100a:	ce 01       	movw	r24, r28
    100c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
    1010:	6c e4       	ldi	r22, 0x4C	; 76
    1012:	ce 01       	movw	r24, r28
    1014:	0e 94 49 06 	call	0xc92	; 0xc92 <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
    1018:	ce 01       	movw	r24, r28
    101a:	0e 94 2c 06 	call	0xc58	; 0xc58 <_ZN4RF248flush_rxEv>
  flush_tx();
    101e:	ce 01       	movw	r24, r28
    1020:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
    1024:	ce 01       	movw	r24, r28
    1026:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	ce 01       	movw	r24, r28
    102e:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN4RF2413read_registerEh>
    1032:	48 2f       	mov	r20, r24
    1034:	4e 7f       	andi	r20, 0xFE	; 254
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	ce 01       	movw	r24, r28
    103a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
    103e:	11 50       	subi	r17, 0x01	; 1
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	1e 3f       	cpi	r17, 0xFE	; 254
    1044:	08 f0       	brcs	.+2      	; 0x1048 <_ZN4RF245beginEv+0xee>
    1046:	80 e0       	ldi	r24, 0x00	; 0
}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	08 95       	ret

00001050 <_ZN8SPIClass5beginEv>:
#include <stdint-gcc.h>

SPIClass SPI;
void SPIClass::begin()
{ 
    Set_pin(SS, OUT);
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	8a e0       	ldi	r24, 0x0A	; 10
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <Set_pin>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUT.
    SPCR |= _BV(MSTR);
    105c:	8c b5       	in	r24, 0x2c	; 44
    105e:	80 61       	ori	r24, 0x10	; 16
    1060:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1062:	8c b5       	in	r24, 0x2c	; 44
    1064:	80 64       	ori	r24, 0x40	; 64
    1066:	8c bd       	out	0x2c, r24	; 44
    // Set direction register for SCK and MOSI pin.
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    Set_pin(SCK, OUT);
    1068:	61 e0       	ldi	r22, 0x01	; 1
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	8d e0       	ldi	r24, 0x0D	; 13
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <Set_pin>
    Set_pin(MOSI, OUT);
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	8b e0       	ldi	r24, 0x0B	; 11
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <Set_pin>
    1080:	08 95       	ret

00001082 <__subsf3>:
    1082:	50 58       	subi	r21, 0x80	; 128

00001084 <__addsf3>:
    1084:	bb 27       	eor	r27, r27
    1086:	aa 27       	eor	r26, r26
    1088:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__addsf3x>
    108c:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_round>
    1090:	0e 94 c5 09 	call	0x138a	; 0x138a <__fp_pscA>
    1094:	38 f0       	brcs	.+14     	; 0x10a4 <__addsf3+0x20>
    1096:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fp_pscB>
    109a:	20 f0       	brcs	.+8      	; 0x10a4 <__addsf3+0x20>
    109c:	39 f4       	brne	.+14     	; 0x10ac <__addsf3+0x28>
    109e:	9f 3f       	cpi	r25, 0xFF	; 255
    10a0:	19 f4       	brne	.+6      	; 0x10a8 <__addsf3+0x24>
    10a2:	26 f4       	brtc	.+8      	; 0x10ac <__addsf3+0x28>
    10a4:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__fp_nan>
    10a8:	0e f4       	brtc	.+2      	; 0x10ac <__addsf3+0x28>
    10aa:	e0 95       	com	r30
    10ac:	e7 fb       	bst	r30, 7
    10ae:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_inf>

000010b2 <__addsf3x>:
    10b2:	e9 2f       	mov	r30, r25
    10b4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__fp_split3>
    10b8:	58 f3       	brcs	.-42     	; 0x1090 <__addsf3+0xc>
    10ba:	ba 17       	cp	r27, r26
    10bc:	62 07       	cpc	r22, r18
    10be:	73 07       	cpc	r23, r19
    10c0:	84 07       	cpc	r24, r20
    10c2:	95 07       	cpc	r25, r21
    10c4:	20 f0       	brcs	.+8      	; 0x10ce <__addsf3x+0x1c>
    10c6:	79 f4       	brne	.+30     	; 0x10e6 <__addsf3x+0x34>
    10c8:	a6 f5       	brtc	.+104    	; 0x1132 <__addsf3x+0x80>
    10ca:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_zero>
    10ce:	0e f4       	brtc	.+2      	; 0x10d2 <__addsf3x+0x20>
    10d0:	e0 95       	com	r30
    10d2:	0b 2e       	mov	r0, r27
    10d4:	ba 2f       	mov	r27, r26
    10d6:	a0 2d       	mov	r26, r0
    10d8:	0b 01       	movw	r0, r22
    10da:	b9 01       	movw	r22, r18
    10dc:	90 01       	movw	r18, r0
    10de:	0c 01       	movw	r0, r24
    10e0:	ca 01       	movw	r24, r20
    10e2:	a0 01       	movw	r20, r0
    10e4:	11 24       	eor	r1, r1
    10e6:	ff 27       	eor	r31, r31
    10e8:	59 1b       	sub	r21, r25
    10ea:	99 f0       	breq	.+38     	; 0x1112 <__addsf3x+0x60>
    10ec:	59 3f       	cpi	r21, 0xF9	; 249
    10ee:	50 f4       	brcc	.+20     	; 0x1104 <__addsf3x+0x52>
    10f0:	50 3e       	cpi	r21, 0xE0	; 224
    10f2:	68 f1       	brcs	.+90     	; 0x114e <__addsf3x+0x9c>
    10f4:	1a 16       	cp	r1, r26
    10f6:	f0 40       	sbci	r31, 0x00	; 0
    10f8:	a2 2f       	mov	r26, r18
    10fa:	23 2f       	mov	r18, r19
    10fc:	34 2f       	mov	r19, r20
    10fe:	44 27       	eor	r20, r20
    1100:	58 5f       	subi	r21, 0xF8	; 248
    1102:	f3 cf       	rjmp	.-26     	; 0x10ea <__addsf3x+0x38>
    1104:	46 95       	lsr	r20
    1106:	37 95       	ror	r19
    1108:	27 95       	ror	r18
    110a:	a7 95       	ror	r26
    110c:	f0 40       	sbci	r31, 0x00	; 0
    110e:	53 95       	inc	r21
    1110:	c9 f7       	brne	.-14     	; 0x1104 <__addsf3x+0x52>
    1112:	7e f4       	brtc	.+30     	; 0x1132 <__addsf3x+0x80>
    1114:	1f 16       	cp	r1, r31
    1116:	ba 0b       	sbc	r27, r26
    1118:	62 0b       	sbc	r22, r18
    111a:	73 0b       	sbc	r23, r19
    111c:	84 0b       	sbc	r24, r20
    111e:	ba f0       	brmi	.+46     	; 0x114e <__addsf3x+0x9c>
    1120:	91 50       	subi	r25, 0x01	; 1
    1122:	a1 f0       	breq	.+40     	; 0x114c <__addsf3x+0x9a>
    1124:	ff 0f       	add	r31, r31
    1126:	bb 1f       	adc	r27, r27
    1128:	66 1f       	adc	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	c2 f7       	brpl	.-16     	; 0x1120 <__addsf3x+0x6e>
    1130:	0e c0       	rjmp	.+28     	; 0x114e <__addsf3x+0x9c>
    1132:	ba 0f       	add	r27, r26
    1134:	62 1f       	adc	r22, r18
    1136:	73 1f       	adc	r23, r19
    1138:	84 1f       	adc	r24, r20
    113a:	48 f4       	brcc	.+18     	; 0x114e <__addsf3x+0x9c>
    113c:	87 95       	ror	r24
    113e:	77 95       	ror	r23
    1140:	67 95       	ror	r22
    1142:	b7 95       	ror	r27
    1144:	f7 95       	ror	r31
    1146:	9e 3f       	cpi	r25, 0xFE	; 254
    1148:	08 f0       	brcs	.+2      	; 0x114c <__addsf3x+0x9a>
    114a:	b0 cf       	rjmp	.-160    	; 0x10ac <__addsf3+0x28>
    114c:	93 95       	inc	r25
    114e:	88 0f       	add	r24, r24
    1150:	08 f0       	brcs	.+2      	; 0x1154 <__addsf3x+0xa2>
    1152:	99 27       	eor	r25, r25
    1154:	ee 0f       	add	r30, r30
    1156:	97 95       	ror	r25
    1158:	87 95       	ror	r24
    115a:	08 95       	ret

0000115c <__cmpsf2>:
    115c:	0e 94 98 09 	call	0x1330	; 0x1330 <__fp_cmp>
    1160:	08 f4       	brcc	.+2      	; 0x1164 <__cmpsf2+0x8>
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	08 95       	ret

00001166 <__divsf3>:
    1166:	0e 94 c7 08 	call	0x118e	; 0x118e <__divsf3x>
    116a:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_round>
    116e:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fp_pscB>
    1172:	58 f0       	brcs	.+22     	; 0x118a <__divsf3+0x24>
    1174:	0e 94 c5 09 	call	0x138a	; 0x138a <__fp_pscA>
    1178:	40 f0       	brcs	.+16     	; 0x118a <__divsf3+0x24>
    117a:	29 f4       	brne	.+10     	; 0x1186 <__divsf3+0x20>
    117c:	5f 3f       	cpi	r21, 0xFF	; 255
    117e:	29 f0       	breq	.+10     	; 0x118a <__divsf3+0x24>
    1180:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_inf>
    1184:	51 11       	cpse	r21, r1
    1186:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_szero>
    118a:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__fp_nan>

0000118e <__divsf3x>:
    118e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__fp_split3>
    1192:	68 f3       	brcs	.-38     	; 0x116e <__divsf3+0x8>

00001194 <__divsf3_pse>:
    1194:	99 23       	and	r25, r25
    1196:	b1 f3       	breq	.-20     	; 0x1184 <__divsf3+0x1e>
    1198:	55 23       	and	r21, r21
    119a:	91 f3       	breq	.-28     	; 0x1180 <__divsf3+0x1a>
    119c:	95 1b       	sub	r25, r21
    119e:	55 0b       	sbc	r21, r21
    11a0:	bb 27       	eor	r27, r27
    11a2:	aa 27       	eor	r26, r26
    11a4:	62 17       	cp	r22, r18
    11a6:	73 07       	cpc	r23, r19
    11a8:	84 07       	cpc	r24, r20
    11aa:	38 f0       	brcs	.+14     	; 0x11ba <__divsf3_pse+0x26>
    11ac:	9f 5f       	subi	r25, 0xFF	; 255
    11ae:	5f 4f       	sbci	r21, 0xFF	; 255
    11b0:	22 0f       	add	r18, r18
    11b2:	33 1f       	adc	r19, r19
    11b4:	44 1f       	adc	r20, r20
    11b6:	aa 1f       	adc	r26, r26
    11b8:	a9 f3       	breq	.-22     	; 0x11a4 <__divsf3_pse+0x10>
    11ba:	35 d0       	rcall	.+106    	; 0x1226 <__divsf3_pse+0x92>
    11bc:	0e 2e       	mov	r0, r30
    11be:	3a f0       	brmi	.+14     	; 0x11ce <__divsf3_pse+0x3a>
    11c0:	e0 e8       	ldi	r30, 0x80	; 128
    11c2:	32 d0       	rcall	.+100    	; 0x1228 <__divsf3_pse+0x94>
    11c4:	91 50       	subi	r25, 0x01	; 1
    11c6:	50 40       	sbci	r21, 0x00	; 0
    11c8:	e6 95       	lsr	r30
    11ca:	00 1c       	adc	r0, r0
    11cc:	ca f7       	brpl	.-14     	; 0x11c0 <__divsf3_pse+0x2c>
    11ce:	2b d0       	rcall	.+86     	; 0x1226 <__divsf3_pse+0x92>
    11d0:	fe 2f       	mov	r31, r30
    11d2:	29 d0       	rcall	.+82     	; 0x1226 <__divsf3_pse+0x92>
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	bb 1f       	adc	r27, r27
    11dc:	26 17       	cp	r18, r22
    11de:	37 07       	cpc	r19, r23
    11e0:	48 07       	cpc	r20, r24
    11e2:	ab 07       	cpc	r26, r27
    11e4:	b0 e8       	ldi	r27, 0x80	; 128
    11e6:	09 f0       	breq	.+2      	; 0x11ea <__divsf3_pse+0x56>
    11e8:	bb 0b       	sbc	r27, r27
    11ea:	80 2d       	mov	r24, r0
    11ec:	bf 01       	movw	r22, r30
    11ee:	ff 27       	eor	r31, r31
    11f0:	93 58       	subi	r25, 0x83	; 131
    11f2:	5f 4f       	sbci	r21, 0xFF	; 255
    11f4:	3a f0       	brmi	.+14     	; 0x1204 <__divsf3_pse+0x70>
    11f6:	9e 3f       	cpi	r25, 0xFE	; 254
    11f8:	51 05       	cpc	r21, r1
    11fa:	78 f0       	brcs	.+30     	; 0x121a <__divsf3_pse+0x86>
    11fc:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_inf>
    1200:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_szero>
    1204:	5f 3f       	cpi	r21, 0xFF	; 255
    1206:	e4 f3       	brlt	.-8      	; 0x1200 <__divsf3_pse+0x6c>
    1208:	98 3e       	cpi	r25, 0xE8	; 232
    120a:	d4 f3       	brlt	.-12     	; 0x1200 <__divsf3_pse+0x6c>
    120c:	86 95       	lsr	r24
    120e:	77 95       	ror	r23
    1210:	67 95       	ror	r22
    1212:	b7 95       	ror	r27
    1214:	f7 95       	ror	r31
    1216:	9f 5f       	subi	r25, 0xFF	; 255
    1218:	c9 f7       	brne	.-14     	; 0x120c <__divsf3_pse+0x78>
    121a:	88 0f       	add	r24, r24
    121c:	91 1d       	adc	r25, r1
    121e:	96 95       	lsr	r25
    1220:	87 95       	ror	r24
    1222:	97 f9       	bld	r25, 7
    1224:	08 95       	ret
    1226:	e1 e0       	ldi	r30, 0x01	; 1
    1228:	66 0f       	add	r22, r22
    122a:	77 1f       	adc	r23, r23
    122c:	88 1f       	adc	r24, r24
    122e:	bb 1f       	adc	r27, r27
    1230:	62 17       	cp	r22, r18
    1232:	73 07       	cpc	r23, r19
    1234:	84 07       	cpc	r24, r20
    1236:	ba 07       	cpc	r27, r26
    1238:	20 f0       	brcs	.+8      	; 0x1242 <__divsf3_pse+0xae>
    123a:	62 1b       	sub	r22, r18
    123c:	73 0b       	sbc	r23, r19
    123e:	84 0b       	sbc	r24, r20
    1240:	ba 0b       	sbc	r27, r26
    1242:	ee 1f       	adc	r30, r30
    1244:	88 f7       	brcc	.-30     	; 0x1228 <__divsf3_pse+0x94>
    1246:	e0 95       	com	r30
    1248:	08 95       	ret

0000124a <__fixsfsi>:
    124a:	0e 94 2c 09 	call	0x1258	; 0x1258 <__fixunssfsi>
    124e:	68 94       	set
    1250:	b1 11       	cpse	r27, r1
    1252:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_szero>
    1256:	08 95       	ret

00001258 <__fixunssfsi>:
    1258:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__fp_splitA>
    125c:	88 f0       	brcs	.+34     	; 0x1280 <__fixunssfsi+0x28>
    125e:	9f 57       	subi	r25, 0x7F	; 127
    1260:	98 f0       	brcs	.+38     	; 0x1288 <__fixunssfsi+0x30>
    1262:	b9 2f       	mov	r27, r25
    1264:	99 27       	eor	r25, r25
    1266:	b7 51       	subi	r27, 0x17	; 23
    1268:	b0 f0       	brcs	.+44     	; 0x1296 <__fixunssfsi+0x3e>
    126a:	e1 f0       	breq	.+56     	; 0x12a4 <__fixunssfsi+0x4c>
    126c:	66 0f       	add	r22, r22
    126e:	77 1f       	adc	r23, r23
    1270:	88 1f       	adc	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	1a f0       	brmi	.+6      	; 0x127c <__fixunssfsi+0x24>
    1276:	ba 95       	dec	r27
    1278:	c9 f7       	brne	.-14     	; 0x126c <__fixunssfsi+0x14>
    127a:	14 c0       	rjmp	.+40     	; 0x12a4 <__fixunssfsi+0x4c>
    127c:	b1 30       	cpi	r27, 0x01	; 1
    127e:	91 f0       	breq	.+36     	; 0x12a4 <__fixunssfsi+0x4c>
    1280:	0e 94 06 0a 	call	0x140c	; 0x140c <__fp_zero>
    1284:	b1 e0       	ldi	r27, 0x01	; 1
    1286:	08 95       	ret
    1288:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_zero>
    128c:	67 2f       	mov	r22, r23
    128e:	78 2f       	mov	r23, r24
    1290:	88 27       	eor	r24, r24
    1292:	b8 5f       	subi	r27, 0xF8	; 248
    1294:	39 f0       	breq	.+14     	; 0x12a4 <__fixunssfsi+0x4c>
    1296:	b9 3f       	cpi	r27, 0xF9	; 249
    1298:	cc f3       	brlt	.-14     	; 0x128c <__fixunssfsi+0x34>
    129a:	86 95       	lsr	r24
    129c:	77 95       	ror	r23
    129e:	67 95       	ror	r22
    12a0:	b3 95       	inc	r27
    12a2:	d9 f7       	brne	.-10     	; 0x129a <__fixunssfsi+0x42>
    12a4:	3e f4       	brtc	.+14     	; 0x12b4 <__fixunssfsi+0x5c>
    12a6:	90 95       	com	r25
    12a8:	80 95       	com	r24
    12aa:	70 95       	com	r23
    12ac:	61 95       	neg	r22
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	08 95       	ret

000012b6 <__floatunsisf>:
    12b6:	e8 94       	clt
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <__floatsisf+0x12>

000012ba <__floatsisf>:
    12ba:	97 fb       	bst	r25, 7
    12bc:	3e f4       	brtc	.+14     	; 0x12cc <__floatsisf+0x12>
    12be:	90 95       	com	r25
    12c0:	80 95       	com	r24
    12c2:	70 95       	com	r23
    12c4:	61 95       	neg	r22
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ca:	9f 4f       	sbci	r25, 0xFF	; 255
    12cc:	99 23       	and	r25, r25
    12ce:	a9 f0       	breq	.+42     	; 0x12fa <__floatsisf+0x40>
    12d0:	f9 2f       	mov	r31, r25
    12d2:	96 e9       	ldi	r25, 0x96	; 150
    12d4:	bb 27       	eor	r27, r27
    12d6:	93 95       	inc	r25
    12d8:	f6 95       	lsr	r31
    12da:	87 95       	ror	r24
    12dc:	77 95       	ror	r23
    12de:	67 95       	ror	r22
    12e0:	b7 95       	ror	r27
    12e2:	f1 11       	cpse	r31, r1
    12e4:	f8 cf       	rjmp	.-16     	; 0x12d6 <__floatsisf+0x1c>
    12e6:	fa f4       	brpl	.+62     	; 0x1326 <__floatsisf+0x6c>
    12e8:	bb 0f       	add	r27, r27
    12ea:	11 f4       	brne	.+4      	; 0x12f0 <__floatsisf+0x36>
    12ec:	60 ff       	sbrs	r22, 0
    12ee:	1b c0       	rjmp	.+54     	; 0x1326 <__floatsisf+0x6c>
    12f0:	6f 5f       	subi	r22, 0xFF	; 255
    12f2:	7f 4f       	sbci	r23, 0xFF	; 255
    12f4:	8f 4f       	sbci	r24, 0xFF	; 255
    12f6:	9f 4f       	sbci	r25, 0xFF	; 255
    12f8:	16 c0       	rjmp	.+44     	; 0x1326 <__floatsisf+0x6c>
    12fa:	88 23       	and	r24, r24
    12fc:	11 f0       	breq	.+4      	; 0x1302 <__floatsisf+0x48>
    12fe:	96 e9       	ldi	r25, 0x96	; 150
    1300:	11 c0       	rjmp	.+34     	; 0x1324 <__floatsisf+0x6a>
    1302:	77 23       	and	r23, r23
    1304:	21 f0       	breq	.+8      	; 0x130e <__floatsisf+0x54>
    1306:	9e e8       	ldi	r25, 0x8E	; 142
    1308:	87 2f       	mov	r24, r23
    130a:	76 2f       	mov	r23, r22
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <__floatsisf+0x5e>
    130e:	66 23       	and	r22, r22
    1310:	71 f0       	breq	.+28     	; 0x132e <__floatsisf+0x74>
    1312:	96 e8       	ldi	r25, 0x86	; 134
    1314:	86 2f       	mov	r24, r22
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	2a f0       	brmi	.+10     	; 0x1326 <__floatsisf+0x6c>
    131c:	9a 95       	dec	r25
    131e:	66 0f       	add	r22, r22
    1320:	77 1f       	adc	r23, r23
    1322:	88 1f       	adc	r24, r24
    1324:	da f7       	brpl	.-10     	; 0x131c <__floatsisf+0x62>
    1326:	88 0f       	add	r24, r24
    1328:	96 95       	lsr	r25
    132a:	87 95       	ror	r24
    132c:	97 f9       	bld	r25, 7
    132e:	08 95       	ret

00001330 <__fp_cmp>:
    1330:	99 0f       	add	r25, r25
    1332:	00 08       	sbc	r0, r0
    1334:	55 0f       	add	r21, r21
    1336:	aa 0b       	sbc	r26, r26
    1338:	e0 e8       	ldi	r30, 0x80	; 128
    133a:	fe ef       	ldi	r31, 0xFE	; 254
    133c:	16 16       	cp	r1, r22
    133e:	17 06       	cpc	r1, r23
    1340:	e8 07       	cpc	r30, r24
    1342:	f9 07       	cpc	r31, r25
    1344:	c0 f0       	brcs	.+48     	; 0x1376 <__fp_cmp+0x46>
    1346:	12 16       	cp	r1, r18
    1348:	13 06       	cpc	r1, r19
    134a:	e4 07       	cpc	r30, r20
    134c:	f5 07       	cpc	r31, r21
    134e:	98 f0       	brcs	.+38     	; 0x1376 <__fp_cmp+0x46>
    1350:	62 1b       	sub	r22, r18
    1352:	73 0b       	sbc	r23, r19
    1354:	84 0b       	sbc	r24, r20
    1356:	95 0b       	sbc	r25, r21
    1358:	39 f4       	brne	.+14     	; 0x1368 <__fp_cmp+0x38>
    135a:	0a 26       	eor	r0, r26
    135c:	61 f0       	breq	.+24     	; 0x1376 <__fp_cmp+0x46>
    135e:	23 2b       	or	r18, r19
    1360:	24 2b       	or	r18, r20
    1362:	25 2b       	or	r18, r21
    1364:	21 f4       	brne	.+8      	; 0x136e <__fp_cmp+0x3e>
    1366:	08 95       	ret
    1368:	0a 26       	eor	r0, r26
    136a:	09 f4       	brne	.+2      	; 0x136e <__fp_cmp+0x3e>
    136c:	a1 40       	sbci	r26, 0x01	; 1
    136e:	a6 95       	lsr	r26
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	81 1d       	adc	r24, r1
    1374:	81 1d       	adc	r24, r1
    1376:	08 95       	ret

00001378 <__fp_inf>:
    1378:	97 f9       	bld	r25, 7
    137a:	9f 67       	ori	r25, 0x7F	; 127
    137c:	80 e8       	ldi	r24, 0x80	; 128
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	08 95       	ret

00001384 <__fp_nan>:
    1384:	9f ef       	ldi	r25, 0xFF	; 255
    1386:	80 ec       	ldi	r24, 0xC0	; 192
    1388:	08 95       	ret

0000138a <__fp_pscA>:
    138a:	00 24       	eor	r0, r0
    138c:	0a 94       	dec	r0
    138e:	16 16       	cp	r1, r22
    1390:	17 06       	cpc	r1, r23
    1392:	18 06       	cpc	r1, r24
    1394:	09 06       	cpc	r0, r25
    1396:	08 95       	ret

00001398 <__fp_pscB>:
    1398:	00 24       	eor	r0, r0
    139a:	0a 94       	dec	r0
    139c:	12 16       	cp	r1, r18
    139e:	13 06       	cpc	r1, r19
    13a0:	14 06       	cpc	r1, r20
    13a2:	05 06       	cpc	r0, r21
    13a4:	08 95       	ret

000013a6 <__fp_round>:
    13a6:	09 2e       	mov	r0, r25
    13a8:	03 94       	inc	r0
    13aa:	00 0c       	add	r0, r0
    13ac:	11 f4       	brne	.+4      	; 0x13b2 <__fp_round+0xc>
    13ae:	88 23       	and	r24, r24
    13b0:	52 f0       	brmi	.+20     	; 0x13c6 <__fp_round+0x20>
    13b2:	bb 0f       	add	r27, r27
    13b4:	40 f4       	brcc	.+16     	; 0x13c6 <__fp_round+0x20>
    13b6:	bf 2b       	or	r27, r31
    13b8:	11 f4       	brne	.+4      	; 0x13be <__fp_round+0x18>
    13ba:	60 ff       	sbrs	r22, 0
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <__fp_round+0x20>
    13be:	6f 5f       	subi	r22, 0xFF	; 255
    13c0:	7f 4f       	sbci	r23, 0xFF	; 255
    13c2:	8f 4f       	sbci	r24, 0xFF	; 255
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	08 95       	ret

000013c8 <__fp_split3>:
    13c8:	57 fd       	sbrc	r21, 7
    13ca:	90 58       	subi	r25, 0x80	; 128
    13cc:	44 0f       	add	r20, r20
    13ce:	55 1f       	adc	r21, r21
    13d0:	59 f0       	breq	.+22     	; 0x13e8 <__fp_splitA+0x10>
    13d2:	5f 3f       	cpi	r21, 0xFF	; 255
    13d4:	71 f0       	breq	.+28     	; 0x13f2 <__fp_splitA+0x1a>
    13d6:	47 95       	ror	r20

000013d8 <__fp_splitA>:
    13d8:	88 0f       	add	r24, r24
    13da:	97 fb       	bst	r25, 7
    13dc:	99 1f       	adc	r25, r25
    13de:	61 f0       	breq	.+24     	; 0x13f8 <__fp_splitA+0x20>
    13e0:	9f 3f       	cpi	r25, 0xFF	; 255
    13e2:	79 f0       	breq	.+30     	; 0x1402 <__fp_splitA+0x2a>
    13e4:	87 95       	ror	r24
    13e6:	08 95       	ret
    13e8:	12 16       	cp	r1, r18
    13ea:	13 06       	cpc	r1, r19
    13ec:	14 06       	cpc	r1, r20
    13ee:	55 1f       	adc	r21, r21
    13f0:	f2 cf       	rjmp	.-28     	; 0x13d6 <__fp_split3+0xe>
    13f2:	46 95       	lsr	r20
    13f4:	f1 df       	rcall	.-30     	; 0x13d8 <__fp_splitA>
    13f6:	08 c0       	rjmp	.+16     	; 0x1408 <__fp_splitA+0x30>
    13f8:	16 16       	cp	r1, r22
    13fa:	17 06       	cpc	r1, r23
    13fc:	18 06       	cpc	r1, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	f1 cf       	rjmp	.-30     	; 0x13e4 <__fp_splitA+0xc>
    1402:	86 95       	lsr	r24
    1404:	71 05       	cpc	r23, r1
    1406:	61 05       	cpc	r22, r1
    1408:	08 94       	sec
    140a:	08 95       	ret

0000140c <__fp_zero>:
    140c:	e8 94       	clt

0000140e <__fp_szero>:
    140e:	bb 27       	eor	r27, r27
    1410:	66 27       	eor	r22, r22
    1412:	77 27       	eor	r23, r23
    1414:	cb 01       	movw	r24, r22
    1416:	97 f9       	bld	r25, 7
    1418:	08 95       	ret

0000141a <__gesf2>:
    141a:	0e 94 98 09 	call	0x1330	; 0x1330 <__fp_cmp>
    141e:	08 f4       	brcc	.+2      	; 0x1422 <__gesf2+0x8>
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	08 95       	ret

00001424 <__mulsf3>:
    1424:	0e 94 25 0a 	call	0x144a	; 0x144a <__mulsf3x>
    1428:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_round>
    142c:	0e 94 c5 09 	call	0x138a	; 0x138a <__fp_pscA>
    1430:	38 f0       	brcs	.+14     	; 0x1440 <__mulsf3+0x1c>
    1432:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fp_pscB>
    1436:	20 f0       	brcs	.+8      	; 0x1440 <__mulsf3+0x1c>
    1438:	95 23       	and	r25, r21
    143a:	11 f0       	breq	.+4      	; 0x1440 <__mulsf3+0x1c>
    143c:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_inf>
    1440:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__fp_nan>
    1444:	11 24       	eor	r1, r1
    1446:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_szero>

0000144a <__mulsf3x>:
    144a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__fp_split3>
    144e:	70 f3       	brcs	.-36     	; 0x142c <__mulsf3+0x8>

00001450 <__mulsf3_pse>:
    1450:	95 9f       	mul	r25, r21
    1452:	c1 f3       	breq	.-16     	; 0x1444 <__mulsf3+0x20>
    1454:	95 0f       	add	r25, r21
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	55 1f       	adc	r21, r21
    145a:	62 9f       	mul	r22, r18
    145c:	f0 01       	movw	r30, r0
    145e:	72 9f       	mul	r23, r18
    1460:	bb 27       	eor	r27, r27
    1462:	f0 0d       	add	r31, r0
    1464:	b1 1d       	adc	r27, r1
    1466:	63 9f       	mul	r22, r19
    1468:	aa 27       	eor	r26, r26
    146a:	f0 0d       	add	r31, r0
    146c:	b1 1d       	adc	r27, r1
    146e:	aa 1f       	adc	r26, r26
    1470:	64 9f       	mul	r22, r20
    1472:	66 27       	eor	r22, r22
    1474:	b0 0d       	add	r27, r0
    1476:	a1 1d       	adc	r26, r1
    1478:	66 1f       	adc	r22, r22
    147a:	82 9f       	mul	r24, r18
    147c:	22 27       	eor	r18, r18
    147e:	b0 0d       	add	r27, r0
    1480:	a1 1d       	adc	r26, r1
    1482:	62 1f       	adc	r22, r18
    1484:	73 9f       	mul	r23, r19
    1486:	b0 0d       	add	r27, r0
    1488:	a1 1d       	adc	r26, r1
    148a:	62 1f       	adc	r22, r18
    148c:	83 9f       	mul	r24, r19
    148e:	a0 0d       	add	r26, r0
    1490:	61 1d       	adc	r22, r1
    1492:	22 1f       	adc	r18, r18
    1494:	74 9f       	mul	r23, r20
    1496:	33 27       	eor	r19, r19
    1498:	a0 0d       	add	r26, r0
    149a:	61 1d       	adc	r22, r1
    149c:	23 1f       	adc	r18, r19
    149e:	84 9f       	mul	r24, r20
    14a0:	60 0d       	add	r22, r0
    14a2:	21 1d       	adc	r18, r1
    14a4:	82 2f       	mov	r24, r18
    14a6:	76 2f       	mov	r23, r22
    14a8:	6a 2f       	mov	r22, r26
    14aa:	11 24       	eor	r1, r1
    14ac:	9f 57       	subi	r25, 0x7F	; 127
    14ae:	50 40       	sbci	r21, 0x00	; 0
    14b0:	9a f0       	brmi	.+38     	; 0x14d8 <__mulsf3_pse+0x88>
    14b2:	f1 f0       	breq	.+60     	; 0x14f0 <__mulsf3_pse+0xa0>
    14b4:	88 23       	and	r24, r24
    14b6:	4a f0       	brmi	.+18     	; 0x14ca <__mulsf3_pse+0x7a>
    14b8:	ee 0f       	add	r30, r30
    14ba:	ff 1f       	adc	r31, r31
    14bc:	bb 1f       	adc	r27, r27
    14be:	66 1f       	adc	r22, r22
    14c0:	77 1f       	adc	r23, r23
    14c2:	88 1f       	adc	r24, r24
    14c4:	91 50       	subi	r25, 0x01	; 1
    14c6:	50 40       	sbci	r21, 0x00	; 0
    14c8:	a9 f7       	brne	.-22     	; 0x14b4 <__mulsf3_pse+0x64>
    14ca:	9e 3f       	cpi	r25, 0xFE	; 254
    14cc:	51 05       	cpc	r21, r1
    14ce:	80 f0       	brcs	.+32     	; 0x14f0 <__mulsf3_pse+0xa0>
    14d0:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__fp_inf>
    14d4:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_szero>
    14d8:	5f 3f       	cpi	r21, 0xFF	; 255
    14da:	e4 f3       	brlt	.-8      	; 0x14d4 <__mulsf3_pse+0x84>
    14dc:	98 3e       	cpi	r25, 0xE8	; 232
    14de:	d4 f3       	brlt	.-12     	; 0x14d4 <__mulsf3_pse+0x84>
    14e0:	86 95       	lsr	r24
    14e2:	77 95       	ror	r23
    14e4:	67 95       	ror	r22
    14e6:	b7 95       	ror	r27
    14e8:	f7 95       	ror	r31
    14ea:	e7 95       	ror	r30
    14ec:	9f 5f       	subi	r25, 0xFF	; 255
    14ee:	c1 f7       	brne	.-16     	; 0x14e0 <__mulsf3_pse+0x90>
    14f0:	fe 2b       	or	r31, r30
    14f2:	88 0f       	add	r24, r24
    14f4:	91 1d       	adc	r25, r1
    14f6:	96 95       	lsr	r25
    14f8:	87 95       	ror	r24
    14fa:	97 f9       	bld	r25, 7
    14fc:	08 95       	ret

000014fe <__umulhisi3>:
    14fe:	a2 9f       	mul	r26, r18
    1500:	b0 01       	movw	r22, r0
    1502:	b3 9f       	mul	r27, r19
    1504:	c0 01       	movw	r24, r0
    1506:	a3 9f       	mul	r26, r19
    1508:	70 0d       	add	r23, r0
    150a:	81 1d       	adc	r24, r1
    150c:	11 24       	eor	r1, r1
    150e:	91 1d       	adc	r25, r1
    1510:	b2 9f       	mul	r27, r18
    1512:	70 0d       	add	r23, r0
    1514:	81 1d       	adc	r24, r1
    1516:	11 24       	eor	r1, r1
    1518:	91 1d       	adc	r25, r1
    151a:	08 95       	ret

0000151c <__tablejump2__>:
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	05 90       	lpm	r0, Z+
    1522:	f4 91       	lpm	r31, Z
    1524:	e0 2d       	mov	r30, r0
    1526:	09 94       	ijmp

00001528 <_exit>:
    1528:	f8 94       	cli

0000152a <__stop_program>:
    152a:	ff cf       	rjmp	.-2      	; 0x152a <__stop_program>
