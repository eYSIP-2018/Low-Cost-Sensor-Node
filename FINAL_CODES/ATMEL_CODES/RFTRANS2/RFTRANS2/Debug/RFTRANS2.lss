
RFTRANS2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000010d2  00001166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080010a  0080010a  00001170  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a6d  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f87  00000000  00000000  00006f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b25  00000000  00000000  00007edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aa4  00000000  00000000  00009a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013cb  00000000  00000000  0000a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fba  00000000  00000000  0000b873  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000f82d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_6>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_14>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	74 01       	movw	r14, r8

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e2 ed       	ldi	r30, 0xD2	; 210
      7e:	f0 e1       	ldi	r31, 0x10	; 16
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	aa 30       	cpi	r26, 0x0A	; 10
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	aa e0       	ldi	r26, 0x0A	; 10
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a4 32       	cpi	r26, 0x24	; 36
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	c5 e3       	ldi	r28, 0x35	; 53
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	21 97       	sbiw	r28, 0x01	; 1
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__tablejump2__>
      ac:	c4 33       	cpi	r28, 0x34	; 52
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
      b6:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <UART_Init>:
	while((ADCSRA&0x10)==0);  //Wait for ADC conversion to complete
	a = ADCL;
	a |= (ADCH<<8);//higher 2 bit
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
	return a;
}
      be:	e1 ec       	ldi	r30, 0xC1	; 193
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	10 82       	st	Z, r1
      c4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      c8:	a2 ec       	ldi	r26, 0xC2	; 194
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	8c 91       	ld	r24, X
      ce:	8e 60       	ori	r24, 0x0E	; 14
      d0:	8c 93       	st	X, r24
      d2:	83 e3       	ldi	r24, 0x33	; 51
      d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      dc:	80 81       	ld	r24, Z
      de:	88 61       	ori	r24, 0x18	; 24
      e0:	80 83       	st	Z, r24
      e2:	08 95       	ret

000000e4 <Set_pin>:
      e4:	61 30       	cpi	r22, 0x01	; 1
      e6:	71 05       	cpc	r23, r1
      e8:	f1 f4       	brne	.+60     	; 0x126 <Set_pin+0x42>
      ea:	88 30       	cpi	r24, 0x08	; 8
      ec:	91 05       	cpc	r25, r1
      ee:	70 f0       	brcs	.+28     	; 0x10c <Set_pin+0x28>
      f0:	44 b1       	in	r20, 0x04	; 4
      f2:	08 97       	sbiw	r24, 0x08	; 8
      f4:	21 e0       	ldi	r18, 0x01	; 1
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	b9 01       	movw	r22, r18
      fa:	02 c0       	rjmp	.+4      	; 0x100 <Set_pin+0x1c>
      fc:	66 0f       	add	r22, r22
      fe:	77 1f       	adc	r23, r23
     100:	8a 95       	dec	r24
     102:	e2 f7       	brpl	.-8      	; 0xfc <Set_pin+0x18>
     104:	cb 01       	movw	r24, r22
     106:	84 2b       	or	r24, r20
     108:	84 b9       	out	0x04, r24	; 4
     10a:	08 95       	ret
     10c:	4a b1       	in	r20, 0x0a	; 10
     10e:	21 e0       	ldi	r18, 0x01	; 1
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	b9 01       	movw	r22, r18
     114:	02 c0       	rjmp	.+4      	; 0x11a <Set_pin+0x36>
     116:	66 0f       	add	r22, r22
     118:	77 1f       	adc	r23, r23
     11a:	8a 95       	dec	r24
     11c:	e2 f7       	brpl	.-8      	; 0x116 <Set_pin+0x32>
     11e:	cb 01       	movw	r24, r22
     120:	84 2b       	or	r24, r20
     122:	8a b9       	out	0x0a, r24	; 10
     124:	08 95       	ret
     126:	08 97       	sbiw	r24, 0x08	; 8
     128:	18 f0       	brcs	.+6      	; 0x130 <Set_pin+0x4c>
     12a:	84 b1       	in	r24, 0x04	; 4
     12c:	84 b9       	out	0x04, r24	; 4
     12e:	08 95       	ret
     130:	8a b1       	in	r24, 0x0a	; 10
     132:	8a b9       	out	0x0a, r24	; 10
     134:	08 95       	ret

00000136 <Write_Digital>:
     136:	66 23       	and	r22, r22
     138:	f1 f0       	breq	.+60     	; 0x176 <Write_Digital+0x40>
     13a:	88 30       	cpi	r24, 0x08	; 8
     13c:	91 05       	cpc	r25, r1
     13e:	70 f0       	brcs	.+28     	; 0x15c <Write_Digital+0x26>
     140:	45 b1       	in	r20, 0x05	; 5
     142:	08 97       	sbiw	r24, 0x08	; 8
     144:	21 e0       	ldi	r18, 0x01	; 1
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	b9 01       	movw	r22, r18
     14a:	02 c0       	rjmp	.+4      	; 0x150 <Write_Digital+0x1a>
     14c:	66 0f       	add	r22, r22
     14e:	77 1f       	adc	r23, r23
     150:	8a 95       	dec	r24
     152:	e2 f7       	brpl	.-8      	; 0x14c <Write_Digital+0x16>
     154:	cb 01       	movw	r24, r22
     156:	84 2b       	or	r24, r20
     158:	85 b9       	out	0x05, r24	; 5
     15a:	08 95       	ret
     15c:	4b b1       	in	r20, 0x0b	; 11
     15e:	21 e0       	ldi	r18, 0x01	; 1
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	b9 01       	movw	r22, r18
     164:	02 c0       	rjmp	.+4      	; 0x16a <Write_Digital+0x34>
     166:	66 0f       	add	r22, r22
     168:	77 1f       	adc	r23, r23
     16a:	8a 95       	dec	r24
     16c:	e2 f7       	brpl	.-8      	; 0x166 <Write_Digital+0x30>
     16e:	cb 01       	movw	r24, r22
     170:	84 2b       	or	r24, r20
     172:	8b b9       	out	0x0b, r24	; 11
     174:	08 95       	ret
     176:	88 30       	cpi	r24, 0x08	; 8
     178:	91 05       	cpc	r25, r1
     17a:	78 f0       	brcs	.+30     	; 0x19a <Write_Digital+0x64>
     17c:	45 b1       	in	r20, 0x05	; 5
     17e:	08 97       	sbiw	r24, 0x08	; 8
     180:	21 e0       	ldi	r18, 0x01	; 1
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	b9 01       	movw	r22, r18
     186:	02 c0       	rjmp	.+4      	; 0x18c <Write_Digital+0x56>
     188:	66 0f       	add	r22, r22
     18a:	77 1f       	adc	r23, r23
     18c:	8a 95       	dec	r24
     18e:	e2 f7       	brpl	.-8      	; 0x188 <Write_Digital+0x52>
     190:	cb 01       	movw	r24, r22
     192:	80 95       	com	r24
     194:	84 23       	and	r24, r20
     196:	85 b9       	out	0x05, r24	; 5
     198:	08 95       	ret
     19a:	4b b1       	in	r20, 0x0b	; 11
     19c:	21 e0       	ldi	r18, 0x01	; 1
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	b9 01       	movw	r22, r18
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <Write_Digital+0x72>
     1a4:	66 0f       	add	r22, r22
     1a6:	77 1f       	adc	r23, r23
     1a8:	8a 95       	dec	r24
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <Write_Digital+0x6e>
     1ac:	cb 01       	movw	r24, r22
     1ae:	80 95       	com	r24
     1b0:	84 23       	and	r24, r20
     1b2:	8b b9       	out	0x0b, r24	; 11
     1b4:	08 95       	ret

000001b6 <__vector_14>:
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	8f 93       	push	r24
     1c2:	9f 93       	push	r25
     1c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     1c8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     1d2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
     1d6:	9f 91       	pop	r25
     1d8:	8f 91       	pop	r24
     1da:	0f 90       	pop	r0
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	0f 90       	pop	r0
     1e0:	1f 90       	pop	r1
     1e2:	18 95       	reti

000001e4 <power_down>:
// function for setting ucontroller in sleep mode for given time in minute
void power_down (unsigned int s_time)
{
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	8c 01       	movw	r16, r24
	for(int i=0;i<20;i++)
     1ee:	c0 e0       	ldi	r28, 0x00	; 0
     1f0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Set_pin(i,OUT);
     1f2:	61 e0       	ldi	r22, 0x01	; 1
     1f4:	70 e0       	ldi	r23, 0x00	; 0
     1f6:	ce 01       	movw	r24, r28
     1f8:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
	return a;
}
// function for setting ucontroller in sleep mode for given time in minute
void power_down (unsigned int s_time)
{
	for(int i=0;i<20;i++)
     1fc:	21 96       	adiw	r28, 0x01	; 1
     1fe:	c4 31       	cpi	r28, 0x14	; 20
     200:	d1 05       	cpc	r29, r1
     202:	b9 f7       	brne	.-18     	; 0x1f2 <power_down+0xe>
		
	}
	//setup watchdog timer for 8s
	// comment below line if delay required in seconds
	// s_time = s_time*8;//as 1 for loop 8 sec sleep factor for 1 minute sleep
	WDTCSR = (24);//chane WDCE and WDE also resets
     204:	e0 e6       	ldi	r30, 0x60	; 96
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	88 e1       	ldi	r24, 0x18	; 24
     20a:	80 83       	st	Z, r24
	// WDTCSR = (33);//set prescalar for 8 sec timeout
	WDTCSR = 0x06; // set prescaler for 1 second timeout
     20c:	86 e0       	ldi	r24, 0x06	; 6
     20e:	80 83       	st	Z, r24
	WDTCSR |=(1<<6);//enable interrupt mode WDIE set
     210:	80 81       	ld	r24, Z
     212:	80 64       	ori	r24, 0x40	; 64
     214:	80 83       	st	Z, r24
	//Disable ADC
	ADCSRA &= ~(1<<7);//clear ADEN bit dont forget to set this bit while using ADC in main code
     216:	ea e7       	ldi	r30, 0x7A	; 122
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	8f 77       	andi	r24, 0x7F	; 127
     21e:	80 83       	st	Z, r24
	 DIDR0=0x3F;//disable digital input buffers
     220:	8f e3       	ldi	r24, 0x3F	; 63
     222:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	 DIDR1=0x03;//Disabled  AIN Digital Input Disable it reduces power consumption in digital input buffers
     226:	83 e0       	ldi	r24, 0x03	; 3
     228:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
	// select sleep mode using SMCR.SM[2:0]
	SMCR |=(1<<2);//power down mode   010
     22c:	83 b7       	in	r24, 0x33	; 51
     22e:	84 60       	ori	r24, 0x04	; 4
     230:	83 bf       	out	0x33, r24	; 51
	SMCR |=1;//enable sleep SMCR.SE set
     232:	83 b7       	in	r24, 0x33	; 51
     234:	81 60       	ori	r24, 0x01	; 1
     236:	83 bf       	out	0x33, r24	; 51
	for (int i=0;i<s_time;i++)//gives extended timeout for 8*s_time sec
     238:	01 15       	cp	r16, r1
     23a:	11 05       	cpc	r17, r1
     23c:	81 f0       	breq	.+32     	; 0x25e <power_down+0x7a>
     23e:	a8 01       	movw	r20, r16
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	30 e0       	ldi	r19, 0x00	; 0
	{
		//BODS Disable
		// disable Brounout detection (BOD)
		MCUCR|=(3<<5);
     244:	95 b7       	in	r25, 0x35	; 53
     246:	90 66       	ori	r25, 0x60	; 96
     248:	95 bf       	out	0x35, r25	; 53
		MCUCR = (MCUCR &~(1<<5)) | (1<<6);
     24a:	95 b7       	in	r25, 0x35	; 53
     24c:	9f 79       	andi	r25, 0x9F	; 159
     24e:	90 64       	ori	r25, 0x40	; 64
     250:	95 bf       	out	0x35, r25	; 53
		__asm__ __volatile__("sleep");// executes A sleep instruction
     252:	88 95       	sleep
	 DIDR0=0x3F;//disable digital input buffers
	 DIDR1=0x03;//Disabled  AIN Digital Input Disable it reduces power consumption in digital input buffers
	// select sleep mode using SMCR.SM[2:0]
	SMCR |=(1<<2);//power down mode   010
	SMCR |=1;//enable sleep SMCR.SE set
	for (int i=0;i<s_time;i++)//gives extended timeout for 8*s_time sec
     254:	2f 5f       	subi	r18, 0xFF	; 255
     256:	3f 4f       	sbci	r19, 0xFF	; 255
     258:	42 17       	cp	r20, r18
     25a:	53 07       	cpc	r21, r19
     25c:	99 f7       	brne	.-26     	; 0x244 <power_down+0x60>
		// disable Brounout detection (BOD)
		MCUCR|=(3<<5);
		MCUCR = (MCUCR &~(1<<5)) | (1<<6);
		__asm__ __volatile__("sleep");// executes A sleep instruction
	}
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	08 95       	ret

00000268 <__vector_6>:
////   ISR For WATCHDOG TIMER
ISR(WDT_vect)
{
     268:	1f 92       	push	r1
     26a:	0f 92       	push	r0
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	0f 92       	push	r0
     270:	11 24       	eor	r1, r1
	
};
     272:	0f 90       	pop	r0
     274:	0f be       	out	0x3f, r0	; 63
     276:	0f 90       	pop	r0
     278:	1f 90       	pop	r1
     27a:	18 95       	reti

0000027c <main>:
char data[10] = {"EYSIP2018"};
//char Ntime[3] = {"10"};//default value 
int main(void)
{ 
	unsigned char status1;//to read a NRF24L01 particular register using SPI
	UART_Init(9600);	 
     27c:	60 e8       	ldi	r22, 0x80	; 128
     27e:	75 e2       	ldi	r23, 0x25	; 37
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_Init>
	radio.begin();	 
     288:	8c e0       	ldi	r24, 0x0C	; 12
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 9c 05 	call	0xb38	; 0xb38 <_ZN4RF245beginEv>
	radio.setDataRate(RF24_250KBPS);
     290:	62 e0       	ldi	r22, 0x02	; 2
     292:	8c e0       	ldi	r24, 0x0C	; 12
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN4RF2411setDataRateE15rf24_datarate_e>
	radio.openWritingPipe(pipes[2]);// transmitter address for pipe 2
     29a:	03 ee       	ldi	r16, 0xE3	; 227
     29c:	10 ef       	ldi	r17, 0xF0	; 240
     29e:	20 ef       	ldi	r18, 0xF0	; 240
     2a0:	30 ef       	ldi	r19, 0xF0	; 240
     2a2:	40 ef       	ldi	r20, 0xF0	; 240
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	8c e0       	ldi	r24, 0x0C	; 12
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN4RF2415openWritingPipeEy>
	//radio.setRetries(8,15);
	radio.stopListening();//make radio  transmitter
     2b2:	8c e0       	ldi	r24, 0x0C	; 12
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN4RF2413stopListeningEv>
		while (1)
		{
			// code for transmitter
			// function to read modify data string i.e, read sensors data
			while (radio.write(data, sizeof(data)) != true)	{}
     2ba:	4a e0       	ldi	r20, 0x0A	; 10
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	71 e0       	ldi	r23, 0x01	; 1
     2c0:	8c e0       	ldi	r24, 0x0C	; 12
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN4RF245writeEPKvh>
     2c8:	88 23       	and	r24, r24
     2ca:	b9 f3       	breq	.-18     	; 0x2ba <main+0x3e>
				sei();
     2cc:	78 94       	sei
				radio.powerDown();//sleep nrf24l01+
     2ce:	8c e0       	ldi	r24, 0x0C	; 12
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	0e 94 a2 04 	call	0x944	; 0x944 <_ZN4RF249powerDownEv>
				power_down(20);//sleep mcu
     2d6:	84 e1       	ldi	r24, 0x14	; 20
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <power_down>
				radio.powerUp();
     2de:	8c e0       	ldi	r24, 0x0C	; 12
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN4RF247powerUpEv>
	radio.begin();	 
	radio.setDataRate(RF24_250KBPS);
	radio.openWritingPipe(pipes[2]);// transmitter address for pipe 2
	//radio.setRetries(8,15);
	radio.stopListening();//make radio  transmitter
		while (1)
     2e6:	e9 cf       	rjmp	.-46     	; 0x2ba <main+0x3e>

000002e8 <_GLOBAL__sub_I_radio>:
 * Created: 19-06-2018 13:08:29
 * Author : sachin mahadevjadhav
 */ 
#include <avr/io.h>
#include "RF24.h"
RF24 radio(9, 10); // CE, CSN object for nRF24L01+
     2e8:	4a e0       	ldi	r20, 0x0A	; 10
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	69 e0       	ldi	r22, 0x09	; 9
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	8c e0       	ldi	r24, 0x0C	; 12
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN4RF24C1Ejj>
     2f8:	08 95       	ret

000002fa <_ZN4RF243csnEb>:

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
}
     2fa:	4f 92       	push	r4
     2fc:	5f 92       	push	r5
     2fe:	6f 92       	push	r6
     300:	7f 92       	push	r7
     302:	8f 92       	push	r8
     304:	9f 92       	push	r9
     306:	af 92       	push	r10
     308:	bf 92       	push	r11
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	ec 01       	movw	r28, r24
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
     31c:	9b 81       	ldd	r25, Y+3	; 0x03
     31e:	0e 94 9b 00 	call	0x136	; 0x136 <Write_Digital>
     322:	6c 89       	ldd	r22, Y+20	; 0x14
     324:	7d 89       	ldd	r23, Y+21	; 0x15
     326:	8e 89       	ldd	r24, Y+22	; 0x16
     328:	9f 89       	ldd	r25, Y+23	; 0x17
     32a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__floatunsisf>
     32e:	6b 01       	movw	r12, r22
     330:	7c 01       	movw	r14, r24
     332:	2b ea       	ldi	r18, 0xAB	; 171
     334:	3a ea       	ldi	r19, 0xAA	; 170
     336:	4a e2       	ldi	r20, 0x2A	; 42
     338:	50 e4       	ldi	r21, 0x40	; 64
     33a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3>
     33e:	4b 01       	movw	r8, r22
     340:	5c 01       	movw	r10, r24
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e8       	ldi	r20, 0x80	; 128
     348:	5f e3       	ldi	r21, 0x3F	; 63
     34a:	0e 94 97 06 	call	0xd2e	; 0xd2e <__cmpsf2>
     34e:	88 23       	and	r24, r24
     350:	0c f4       	brge	.+2      	; 0x354 <_ZN4RF243csnEb+0x5a>
     352:	6e c0       	rjmp	.+220    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     354:	a7 01       	movw	r20, r14
     356:	96 01       	movw	r18, r12
     358:	c7 01       	movw	r24, r14
     35a:	b6 01       	movw	r22, r12
     35c:	0e 94 2b 06 	call	0xc56	; 0xc56 <__addsf3>
     360:	2b 01       	movw	r4, r22
     362:	3c 01       	movw	r6, r24
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	3f ef       	ldi	r19, 0xFF	; 255
     368:	4f e7       	ldi	r20, 0x7F	; 127
     36a:	57 e4       	ldi	r21, 0x47	; 71
     36c:	0e 94 ef 07 	call	0xfde	; 0xfde <__gesf2>
     370:	18 16       	cp	r1, r24
     372:	0c f0       	brlt	.+2      	; 0x376 <_ZN4RF243csnEb+0x7c>
     374:	45 c0       	rjmp	.+138    	; 0x400 <__LOCK_REGION_LENGTH__>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	4a e7       	ldi	r20, 0x7A	; 122
     37c:	54 e4       	ldi	r21, 0x44	; 68
     37e:	c7 01       	movw	r24, r14
     380:	b6 01       	movw	r22, r12
     382:	0e 94 9c 06 	call	0xd38	; 0xd38 <__divsf3>
     386:	4b 01       	movw	r8, r22
     388:	5c 01       	movw	r10, r24
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	4a ef       	ldi	r20, 0xFA	; 250
     390:	54 e4       	ldi	r21, 0x44	; 68
     392:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3>
     396:	6b 01       	movw	r12, r22
     398:	7c 01       	movw	r14, r24
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 e8       	ldi	r20, 0x80	; 128
     3a0:	5f e3       	ldi	r21, 0x3F	; 63
     3a2:	0e 94 97 06 	call	0xd2e	; 0xd2e <__cmpsf2>
     3a6:	88 23       	and	r24, r24
     3a8:	2c f1       	brlt	.+74     	; 0x3f4 <_ZN4RF243csnEb+0xfa>
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	3f ef       	ldi	r19, 0xFF	; 255
     3ae:	4f e7       	ldi	r20, 0x7F	; 127
     3b0:	57 e4       	ldi	r21, 0x47	; 71
     3b2:	c7 01       	movw	r24, r14
     3b4:	b6 01       	movw	r22, r12
     3b6:	0e 94 ef 07 	call	0xfde	; 0xfde <__gesf2>
     3ba:	18 16       	cp	r1, r24
     3bc:	b4 f4       	brge	.+44     	; 0x3ea <_ZN4RF243csnEb+0xf0>
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	40 e2       	ldi	r20, 0x20	; 32
     3c4:	51 e4       	ldi	r21, 0x41	; 65
     3c6:	c5 01       	movw	r24, r10
     3c8:	b4 01       	movw	r22, r8
     3ca:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3>
     3ce:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fixunssfsi>
     3d2:	61 15       	cp	r22, r1
     3d4:	71 05       	cpc	r23, r1
     3d6:	69 f1       	breq	.+90     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     3d8:	28 ec       	ldi	r18, 0xC8	; 200
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	c9 01       	movw	r24, r18
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <_ZN4RF243csnEb+0xe4>
     3e2:	61 50       	subi	r22, 0x01	; 1
     3e4:	71 09       	sbc	r23, r1
     3e6:	d1 f7       	brne	.-12     	; 0x3dc <_ZN4RF243csnEb+0xe2>
     3e8:	24 c0       	rjmp	.+72     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     3ea:	c7 01       	movw	r24, r14
     3ec:	b6 01       	movw	r22, r12
     3ee:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fixunssfsi>
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <_ZN4RF243csnEb+0xfe>
     3f4:	61 e0       	ldi	r22, 0x01	; 1
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	cb 01       	movw	r24, r22
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <_ZN4RF243csnEb+0x100>
     3fe:	19 c0       	rjmp	.+50     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	4f e7       	ldi	r20, 0x7F	; 127
     406:	53 e4       	ldi	r21, 0x43	; 67
     408:	c5 01       	movw	r24, r10
     40a:	b4 01       	movw	r22, r8
     40c:	0e 94 ef 07 	call	0xfde	; 0xfde <__gesf2>
     410:	18 16       	cp	r1, r24
     412:	44 f4       	brge	.+16     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     414:	c3 01       	movw	r24, r6
     416:	b2 01       	movw	r22, r4
     418:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fixunssfsi>
     41c:	cb 01       	movw	r24, r22
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     422:	0a c0       	rjmp	.+20     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     424:	c5 01       	movw	r24, r10
     426:	b4 01       	movw	r22, r8
     428:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fixunssfsi>
     42c:	16 2f       	mov	r17, r22
     42e:	01 c0       	rjmp	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	11 e0       	ldi	r17, 0x01	; 1
     432:	61 2f       	mov	r22, r17
     434:	6a 95       	dec	r22
     436:	f1 f7       	brne	.-4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	bf 90       	pop	r11
     448:	af 90       	pop	r10
     44a:	9f 90       	pop	r9
     44c:	8f 90       	pop	r8
     44e:	7f 90       	pop	r7
     450:	6f 90       	pop	r6
     452:	5f 90       	pop	r5
     454:	4f 90       	pop	r4
     456:	08 95       	ret

00000458 <_ZN4RF242ceEb>:
     458:	fc 01       	movw	r30, r24
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	22 81       	ldd	r18, Z+2	; 0x02
     460:	33 81       	ldd	r19, Z+3	; 0x03
     462:	82 17       	cp	r24, r18
     464:	93 07       	cpc	r25, r19
     466:	11 f0       	breq	.+4      	; 0x46c <_ZN4RF242ceEb+0x14>
     468:	0e 94 9b 00 	call	0x136	; 0x136 <Write_Digital>
     46c:	84 e0       	ldi	r24, 0x04	; 4
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <_ZN4RF242ceEb+0x18>
     474:	08 95       	ret

00000476 <_ZN4RF2413read_registerEh>:
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	8c 01       	movw	r16, r24
     47e:	c6 2f       	mov	r28, r22
     480:	80 e5       	ldi	r24, 0x50	; 80
     482:	8c bd       	out	0x2c, r24	; 44
     484:	1d bc       	out	0x2d, r1	; 45
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	c8 01       	movw	r24, r16
     48a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN4RF243csnEb>
     48e:	cf 71       	andi	r28, 0x1F	; 31
     490:	ce bd       	out	0x2e, r28	; 46
     492:	00 00       	nop
     494:	0d b4       	in	r0, 0x2d	; 45
     496:	07 fe       	sbrs	r0, 7
     498:	fd cf       	rjmp	.-6      	; 0x494 <_ZN4RF2413read_registerEh+0x1e>
     49a:	8e b5       	in	r24, 0x2e	; 46
     49c:	8f ef       	ldi	r24, 0xFF	; 255
     49e:	8e bd       	out	0x2e, r24	; 46
     4a0:	00 00       	nop
     4a2:	0d b4       	in	r0, 0x2d	; 45
     4a4:	07 fe       	sbrs	r0, 7
     4a6:	fd cf       	rjmp	.-6      	; 0x4a2 <_ZN4RF2413read_registerEh+0x2c>
     4a8:	ce b5       	in	r28, 0x2e	; 46
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	c8 01       	movw	r24, r16
     4ae:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN4RF243csnEb>
     4b2:	8c 2f       	mov	r24, r28
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <_ZN4RF2414write_registerEhPKhh>:
     4bc:	ef 92       	push	r14
     4be:	ff 92       	push	r15
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	8c 01       	movw	r16, r24
     4ca:	c6 2f       	mov	r28, r22
     4cc:	e4 2e       	mov	r14, r20
     4ce:	f5 2e       	mov	r15, r21
     4d0:	d2 2f       	mov	r29, r18
     4d2:	80 e5       	ldi	r24, 0x50	; 80
     4d4:	8c bd       	out	0x2c, r24	; 44
     4d6:	1d bc       	out	0x2d, r1	; 45
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	c8 01       	movw	r24, r16
     4dc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN4RF243csnEb>
     4e0:	cf 71       	andi	r28, 0x1F	; 31
     4e2:	c0 62       	ori	r28, 0x20	; 32
     4e4:	ce bd       	out	0x2e, r28	; 46
     4e6:	00 00       	nop
     4e8:	0d b4       	in	r0, 0x2d	; 45
     4ea:	07 fe       	sbrs	r0, 7
     4ec:	fd cf       	rjmp	.-6      	; 0x4e8 <_ZN4RF2414write_registerEhPKhh+0x2c>
     4ee:	ce b5       	in	r28, 0x2e	; 46
     4f0:	8f ef       	ldi	r24, 0xFF	; 255
     4f2:	8d 0f       	add	r24, r29
     4f4:	dd 23       	and	r29, r29
     4f6:	59 f0       	breq	.+22     	; 0x50e <_ZN4RF2414write_registerEhPKhh+0x52>
     4f8:	ee 2d       	mov	r30, r14
     4fa:	ff 2d       	mov	r31, r15
     4fc:	91 91       	ld	r25, Z+
     4fe:	9e bd       	out	0x2e, r25	; 46
     500:	00 00       	nop
     502:	0d b4       	in	r0, 0x2d	; 45
     504:	07 fe       	sbrs	r0, 7
     506:	fd cf       	rjmp	.-6      	; 0x502 <_ZN4RF2414write_registerEhPKhh+0x46>
     508:	9e b5       	in	r25, 0x2e	; 46
     50a:	81 50       	subi	r24, 0x01	; 1
     50c:	b8 f7       	brcc	.-18     	; 0x4fc <_ZN4RF2414write_registerEhPKhh+0x40>
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	c8 01       	movw	r24, r16
     512:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN4RF243csnEb>
     516:	8c 2f       	mov	r24, r28
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	ff 90       	pop	r15
     522:	ef 90       	pop	r14
     524:	08 95       	ret

00000526 <_ZN4RF2414write_registerEhh>:
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	8c 01       	movw	r16, r24
     530:	c6 2f       	mov	r28, r22
     532:	d4 2f       	mov	r29, r20
     534:	80 e5       	ldi	r24, 0x50	; 80
     536:	8c bd       	out	0x2c, r24	; 44
     538:	1d bc       	out	0x2d, r1	; 45
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	c8 01       	movw	r24, r16
     53e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN4RF243csnEb>
     542:	cf 71       	andi	r28, 0x1F	; 31
     544:	c0 62       	ori	r28, 0x20	; 32
     546:	ce bd       	out	0x2e, r28	; 46
     548:	00 00       	nop
     54a:	0d b4       	in	r0, 0x2d	; 45
     54c:	07 fe       	sbrs	r0, 7
     54e:	fd cf       	rjmp	.-6      	; 0x54a <_ZN4RF2414write_registerEhh+0x24>
     550:	ce b5       	in	r28, 0x2e	; 46
     552:	de bd       	out	0x2e, r29	; 46
     554:	00 00       	nop
     556:	0d b4       	in	r0, 0x2d	; 45
     558:	07 fe       	sbrs	r0, 7
     55a:	fd cf       	rjmp	.-6      	; 0x556 <_ZN4RF2414write_registerEhh+0x30>
     55c:	8e b5       	in	r24, 0x2e	; 46
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	c8 01       	movw	r24, r16
     562:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN4RF243csnEb>
     566:	8c 2f       	mov	r24, r28
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	08 95       	ret

00000572 <_ZN4RF2413write_payloadEPKvhh>:
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	ec 01       	movw	r28, r24
     582:	d6 2e       	mov	r13, r22
     584:	e7 2e       	mov	r14, r23
     586:	f2 2e       	mov	r15, r18
     588:	8f 81       	ldd	r24, Y+7	; 0x07
     58a:	08 2f       	mov	r16, r24
     58c:	48 17       	cp	r20, r24
     58e:	08 f4       	brcc	.+2      	; 0x592 <_ZN4RF2413write_payloadEPKvhh+0x20>
     590:	04 2f       	mov	r16, r20
     592:	98 85       	ldd	r25, Y+8	; 0x08
     594:	91 11       	cpse	r25, r1
     596:	03 c0       	rjmp	.+6      	; 0x59e <_ZN4RF2413write_payloadEPKvhh+0x2c>
     598:	18 2f       	mov	r17, r24
     59a:	10 1b       	sub	r17, r16
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <_ZN4RF2413write_payloadEPKvhh+0x2e>
     59e:	10 e0       	ldi	r17, 0x00	; 0
     5a0:	80 e5       	ldi	r24, 0x50	; 80
     5a2:	8c bd       	out	0x2c, r24	; 44
     5a4:	1d bc       	out	0x2d, r1	; 45
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	ce 01       	movw	r24, r28
     5aa:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN4RF243csnEb>
     5ae:	fe bc       	out	0x2e, r15	; 46
     5b0:	00 00       	nop
     5b2:	0d b4       	in	r0, 0x2d	; 45
     5b4:	07 fe       	sbrs	r0, 7
     5b6:	fd cf       	rjmp	.-6      	; 0x5b2 <_ZN4RF2413write_payloadEPKvhh+0x40>
     5b8:	fe b4       	in	r15, 0x2e	; 46
     5ba:	8f ef       	ldi	r24, 0xFF	; 255
     5bc:	80 0f       	add	r24, r16
     5be:	01 11       	cpse	r16, r1
     5c0:	05 c0       	rjmp	.+10     	; 0x5cc <_ZN4RF2413write_payloadEPKvhh+0x5a>
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	81 0f       	add	r24, r17
     5c6:	11 11       	cpse	r17, r1
     5c8:	0d c0       	rjmp	.+26     	; 0x5e4 <_ZN4RF2413write_payloadEPKvhh+0x72>
     5ca:	14 c0       	rjmp	.+40     	; 0x5f4 <_ZN4RF2413write_payloadEPKvhh+0x82>
     5cc:	ed 2d       	mov	r30, r13
     5ce:	fe 2d       	mov	r31, r14
     5d0:	91 91       	ld	r25, Z+
     5d2:	9e bd       	out	0x2e, r25	; 46
     5d4:	00 00       	nop
     5d6:	0d b4       	in	r0, 0x2d	; 45
     5d8:	07 fe       	sbrs	r0, 7
     5da:	fd cf       	rjmp	.-6      	; 0x5d6 <_ZN4RF2413write_payloadEPKvhh+0x64>
     5dc:	9e b5       	in	r25, 0x2e	; 46
     5de:	81 50       	subi	r24, 0x01	; 1
     5e0:	b8 f7       	brcc	.-18     	; 0x5d0 <_ZN4RF2413write_payloadEPKvhh+0x5e>
     5e2:	ef cf       	rjmp	.-34     	; 0x5c2 <_ZN4RF2413write_payloadEPKvhh+0x50>
     5e4:	1e bc       	out	0x2e, r1	; 46
     5e6:	00 00       	nop
     5e8:	0d b4       	in	r0, 0x2d	; 45
     5ea:	07 fe       	sbrs	r0, 7
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <_ZN4RF2413write_payloadEPKvhh+0x76>
     5ee:	9e b5       	in	r25, 0x2e	; 46
     5f0:	81 50       	subi	r24, 0x01	; 1
     5f2:	c0 f7       	brcc	.-16     	; 0x5e4 <_ZN4RF2413write_payloadEPKvhh+0x72>
     5f4:	61 e0       	ldi	r22, 0x01	; 1
     5f6:	ce 01       	movw	r24, r28
     5f8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN4RF243csnEb>
     5fc:	8f 2d       	mov	r24, r15
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	df 90       	pop	r13
     60c:	08 95       	ret

0000060e <_ZN4RF248spiTransEh>:
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	ec 01       	movw	r28, r24
     616:	16 2f       	mov	r17, r22
     618:	80 e5       	ldi	r24, 0x50	; 80
     61a:	8c bd       	out	0x2c, r24	; 44
     61c:	1d bc       	out	0x2d, r1	; 45
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	ce 01       	movw	r24, r28
     622:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN4RF243csnEb>
     626:	1e bd       	out	0x2e, r17	; 46
     628:	00 00       	nop
     62a:	0d b4       	in	r0, 0x2d	; 45
     62c:	07 fe       	sbrs	r0, 7
     62e:	fd cf       	rjmp	.-6      	; 0x62a <_ZN4RF248spiTransEh+0x1c>
     630:	1e b5       	in	r17, 0x2e	; 46
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	ce 01       	movw	r24, r28
     636:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN4RF243csnEb>
     63a:	81 2f       	mov	r24, r17
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	08 95       	ret

00000644 <_ZN4RF248flush_rxEv>:
     644:	62 ee       	ldi	r22, 0xE2	; 226
     646:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF248spiTransEh>
     64a:	08 95       	ret

0000064c <_ZN4RF248flush_txEv>:
     64c:	61 ee       	ldi	r22, 0xE1	; 225
     64e:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF248spiTransEh>
     652:	08 95       	ret

00000654 <_ZN4RF2410get_statusEv>:
     654:	6f ef       	ldi	r22, 0xFF	; 255
     656:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN4RF248spiTransEh>
     65a:	08 95       	ret

0000065c <_ZN4RF24C1Ejj>:
     65c:	fc 01       	movw	r30, r24
     65e:	71 83       	std	Z+1, r23	; 0x01
     660:	60 83       	st	Z, r22
     662:	53 83       	std	Z+3, r21	; 0x03
     664:	42 83       	std	Z+2, r20	; 0x02
     666:	16 82       	std	Z+6, r1	; 0x06
     668:	80 e2       	ldi	r24, 0x20	; 32
     66a:	87 83       	std	Z+7, r24	; 0x07
     66c:	10 86       	std	Z+8, r1	; 0x08
     66e:	85 e0       	ldi	r24, 0x05	; 5
     670:	86 87       	std	Z+14, r24	; 0x0e
     672:	85 e0       	ldi	r24, 0x05	; 5
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	a0 e0       	ldi	r26, 0x00	; 0
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	84 8b       	std	Z+20, r24	; 0x14
     67c:	95 8b       	std	Z+21, r25	; 0x15
     67e:	a6 8b       	std	Z+22, r26	; 0x16
     680:	b7 8b       	std	Z+23, r27	; 0x17
     682:	11 86       	std	Z+9, r1	; 0x09
     684:	08 95       	ret

00000686 <_ZN4RF2410setChannelEh>:
     686:	6d 37       	cpi	r22, 0x7D	; 125
     688:	10 f4       	brcc	.+4      	; 0x68e <_ZN4RF2410setChannelEh+0x8>
     68a:	46 2f       	mov	r20, r22
     68c:	01 c0       	rjmp	.+2      	; 0x690 <_ZN4RF2410setChannelEh+0xa>
     68e:	4d e7       	ldi	r20, 0x7D	; 125
     690:	65 e0       	ldi	r22, 0x05	; 5
     692:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>
     696:	08 95       	ret

00000698 <_ZN4RF2413stopListeningEv>:
     698:	4f 92       	push	r4
     69a:	5f 92       	push	r5
     69c:	6f 92       	push	r6
     69e:	7f 92       	push	r7
     6a0:	8f 92       	push	r8
     6a2:	9f 92       	push	r9
     6a4:	af 92       	push	r10
     6a6:	bf 92       	push	r11
     6a8:	cf 92       	push	r12
     6aa:	df 92       	push	r13
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	ec 01       	movw	r28, r24
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN4RF242ceEb>
     6c0:	68 89       	ldd	r22, Y+16	; 0x10
     6c2:	79 89       	ldd	r23, Y+17	; 0x11
     6c4:	8a 89       	ldd	r24, Y+18	; 0x12
     6c6:	9b 89       	ldd	r25, Y+19	; 0x13
     6c8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__floatunsisf>
     6cc:	6b 01       	movw	r12, r22
     6ce:	7c 01       	movw	r14, r24
     6d0:	2b ea       	ldi	r18, 0xAB	; 171
     6d2:	3a ea       	ldi	r19, 0xAA	; 170
     6d4:	4a e2       	ldi	r20, 0x2A	; 42
     6d6:	50 e4       	ldi	r21, 0x40	; 64
     6d8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3>
     6dc:	4b 01       	movw	r8, r22
     6de:	5c 01       	movw	r10, r24
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e8       	ldi	r20, 0x80	; 128
     6e6:	5f e3       	ldi	r21, 0x3F	; 63
     6e8:	0e 94 97 06 	call	0xd2e	; 0xd2e <__cmpsf2>
     6ec:	88 23       	and	r24, r24
     6ee:	0c f4       	brge	.+2      	; 0x6f2 <_ZN4RF2413stopListeningEv+0x5a>
     6f0:	6e c0       	rjmp	.+220    	; 0x7ce <_ZN4RF2413stopListeningEv+0x136>
     6f2:	a7 01       	movw	r20, r14
     6f4:	96 01       	movw	r18, r12
     6f6:	c7 01       	movw	r24, r14
     6f8:	b6 01       	movw	r22, r12
     6fa:	0e 94 2b 06 	call	0xc56	; 0xc56 <__addsf3>
     6fe:	2b 01       	movw	r4, r22
     700:	3c 01       	movw	r6, r24
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	3f ef       	ldi	r19, 0xFF	; 255
     706:	4f e7       	ldi	r20, 0x7F	; 127
     708:	57 e4       	ldi	r21, 0x47	; 71
     70a:	0e 94 ef 07 	call	0xfde	; 0xfde <__gesf2>
     70e:	18 16       	cp	r1, r24
     710:	0c f0       	brlt	.+2      	; 0x714 <_ZN4RF2413stopListeningEv+0x7c>
     712:	45 c0       	rjmp	.+138    	; 0x79e <_ZN4RF2413stopListeningEv+0x106>
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	4a e7       	ldi	r20, 0x7A	; 122
     71a:	54 e4       	ldi	r21, 0x44	; 68
     71c:	c7 01       	movw	r24, r14
     71e:	b6 01       	movw	r22, r12
     720:	0e 94 9c 06 	call	0xd38	; 0xd38 <__divsf3>
     724:	4b 01       	movw	r8, r22
     726:	5c 01       	movw	r10, r24
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	4a ef       	ldi	r20, 0xFA	; 250
     72e:	54 e4       	ldi	r21, 0x44	; 68
     730:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3>
     734:	6b 01       	movw	r12, r22
     736:	7c 01       	movw	r14, r24
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 97 06 	call	0xd2e	; 0xd2e <__cmpsf2>
     744:	88 23       	and	r24, r24
     746:	2c f1       	brlt	.+74     	; 0x792 <_ZN4RF2413stopListeningEv+0xfa>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	3f ef       	ldi	r19, 0xFF	; 255
     74c:	4f e7       	ldi	r20, 0x7F	; 127
     74e:	57 e4       	ldi	r21, 0x47	; 71
     750:	c7 01       	movw	r24, r14
     752:	b6 01       	movw	r22, r12
     754:	0e 94 ef 07 	call	0xfde	; 0xfde <__gesf2>
     758:	18 16       	cp	r1, r24
     75a:	b4 f4       	brge	.+44     	; 0x788 <_ZN4RF2413stopListeningEv+0xf0>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	40 e2       	ldi	r20, 0x20	; 32
     762:	51 e4       	ldi	r21, 0x41	; 65
     764:	c5 01       	movw	r24, r10
     766:	b4 01       	movw	r22, r8
     768:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3>
     76c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fixunssfsi>
     770:	61 15       	cp	r22, r1
     772:	71 05       	cpc	r23, r1
     774:	69 f1       	breq	.+90     	; 0x7d0 <_ZN4RF2413stopListeningEv+0x138>
     776:	28 ec       	ldi	r18, 0xC8	; 200
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	c9 01       	movw	r24, r18
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <_ZN4RF2413stopListeningEv+0xe4>
     780:	61 50       	subi	r22, 0x01	; 1
     782:	71 09       	sbc	r23, r1
     784:	d1 f7       	brne	.-12     	; 0x77a <_ZN4RF2413stopListeningEv+0xe2>
     786:	24 c0       	rjmp	.+72     	; 0x7d0 <_ZN4RF2413stopListeningEv+0x138>
     788:	c7 01       	movw	r24, r14
     78a:	b6 01       	movw	r22, r12
     78c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fixunssfsi>
     790:	02 c0       	rjmp	.+4      	; 0x796 <_ZN4RF2413stopListeningEv+0xfe>
     792:	61 e0       	ldi	r22, 0x01	; 1
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	cb 01       	movw	r24, r22
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <_ZN4RF2413stopListeningEv+0x100>
     79c:	19 c0       	rjmp	.+50     	; 0x7d0 <_ZN4RF2413stopListeningEv+0x138>
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	4f e7       	ldi	r20, 0x7F	; 127
     7a4:	53 e4       	ldi	r21, 0x43	; 67
     7a6:	c5 01       	movw	r24, r10
     7a8:	b4 01       	movw	r22, r8
     7aa:	0e 94 ef 07 	call	0xfde	; 0xfde <__gesf2>
     7ae:	18 16       	cp	r1, r24
     7b0:	44 f4       	brge	.+16     	; 0x7c2 <_ZN4RF2413stopListeningEv+0x12a>
     7b2:	c3 01       	movw	r24, r6
     7b4:	b2 01       	movw	r22, r4
     7b6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fixunssfsi>
     7ba:	cb 01       	movw	r24, r22
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <_ZN4RF2413stopListeningEv+0x124>
     7c0:	09 c0       	rjmp	.+18     	; 0x7d4 <_ZN4RF2413stopListeningEv+0x13c>
     7c2:	c5 01       	movw	r24, r10
     7c4:	b4 01       	movw	r22, r8
     7c6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fixunssfsi>
     7ca:	16 2f       	mov	r17, r22
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <_ZN4RF2413stopListeningEv+0x138>
     7ce:	11 e0       	ldi	r17, 0x01	; 1
     7d0:	1a 95       	dec	r17
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <_ZN4RF2413stopListeningEv+0x138>
     7d4:	6d e1       	ldi	r22, 0x1D	; 29
     7d6:	ce 01       	movw	r24, r28
     7d8:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN4RF2413read_registerEh>
     7dc:	81 ff       	sbrs	r24, 1
     7de:	8d c0       	rjmp	.+282    	; 0x8fa <_ZN4RF2413stopListeningEv+0x262>
     7e0:	68 89       	ldd	r22, Y+16	; 0x10
     7e2:	79 89       	ldd	r23, Y+17	; 0x11
     7e4:	8a 89       	ldd	r24, Y+18	; 0x12
     7e6:	9b 89       	ldd	r25, Y+19	; 0x13
     7e8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__floatunsisf>
     7ec:	6b 01       	movw	r12, r22
     7ee:	7c 01       	movw	r14, r24
     7f0:	2b ea       	ldi	r18, 0xAB	; 171
     7f2:	3a ea       	ldi	r19, 0xAA	; 170
     7f4:	4a e2       	ldi	r20, 0x2A	; 42
     7f6:	50 e4       	ldi	r21, 0x40	; 64
     7f8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3>
     7fc:	4b 01       	movw	r8, r22
     7fe:	5c 01       	movw	r10, r24
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	40 e8       	ldi	r20, 0x80	; 128
     806:	5f e3       	ldi	r21, 0x3F	; 63
     808:	0e 94 97 06 	call	0xd2e	; 0xd2e <__cmpsf2>
     80c:	88 23       	and	r24, r24
     80e:	0c f4       	brge	.+2      	; 0x812 <_ZN4RF2413stopListeningEv+0x17a>
     810:	6e c0       	rjmp	.+220    	; 0x8ee <_ZN4RF2413stopListeningEv+0x256>
     812:	a7 01       	movw	r20, r14
     814:	96 01       	movw	r18, r12
     816:	c7 01       	movw	r24, r14
     818:	b6 01       	movw	r22, r12
     81a:	0e 94 2b 06 	call	0xc56	; 0xc56 <__addsf3>
     81e:	2b 01       	movw	r4, r22
     820:	3c 01       	movw	r6, r24
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	3f ef       	ldi	r19, 0xFF	; 255
     826:	4f e7       	ldi	r20, 0x7F	; 127
     828:	57 e4       	ldi	r21, 0x47	; 71
     82a:	0e 94 ef 07 	call	0xfde	; 0xfde <__gesf2>
     82e:	18 16       	cp	r1, r24
     830:	0c f0       	brlt	.+2      	; 0x834 <_ZN4RF2413stopListeningEv+0x19c>
     832:	45 c0       	rjmp	.+138    	; 0x8be <_ZN4RF2413stopListeningEv+0x226>
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	4a e7       	ldi	r20, 0x7A	; 122
     83a:	54 e4       	ldi	r21, 0x44	; 68
     83c:	c7 01       	movw	r24, r14
     83e:	b6 01       	movw	r22, r12
     840:	0e 94 9c 06 	call	0xd38	; 0xd38 <__divsf3>
     844:	4b 01       	movw	r8, r22
     846:	5c 01       	movw	r10, r24
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	4a ef       	ldi	r20, 0xFA	; 250
     84e:	54 e4       	ldi	r21, 0x44	; 68
     850:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3>
     854:	6b 01       	movw	r12, r22
     856:	7c 01       	movw	r14, r24
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	40 e8       	ldi	r20, 0x80	; 128
     85e:	5f e3       	ldi	r21, 0x3F	; 63
     860:	0e 94 97 06 	call	0xd2e	; 0xd2e <__cmpsf2>
     864:	88 23       	and	r24, r24
     866:	2c f1       	brlt	.+74     	; 0x8b2 <_ZN4RF2413stopListeningEv+0x21a>
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	3f ef       	ldi	r19, 0xFF	; 255
     86c:	4f e7       	ldi	r20, 0x7F	; 127
     86e:	57 e4       	ldi	r21, 0x47	; 71
     870:	c7 01       	movw	r24, r14
     872:	b6 01       	movw	r22, r12
     874:	0e 94 ef 07 	call	0xfde	; 0xfde <__gesf2>
     878:	18 16       	cp	r1, r24
     87a:	b4 f4       	brge	.+44     	; 0x8a8 <_ZN4RF2413stopListeningEv+0x210>
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e2       	ldi	r20, 0x20	; 32
     882:	51 e4       	ldi	r21, 0x41	; 65
     884:	c5 01       	movw	r24, r10
     886:	b4 01       	movw	r22, r8
     888:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3>
     88c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fixunssfsi>
     890:	61 15       	cp	r22, r1
     892:	71 05       	cpc	r23, r1
     894:	69 f1       	breq	.+90     	; 0x8f0 <_ZN4RF2413stopListeningEv+0x258>
     896:	28 ec       	ldi	r18, 0xC8	; 200
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	c9 01       	movw	r24, r18
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <_ZN4RF2413stopListeningEv+0x204>
     8a0:	61 50       	subi	r22, 0x01	; 1
     8a2:	71 09       	sbc	r23, r1
     8a4:	d1 f7       	brne	.-12     	; 0x89a <_ZN4RF2413stopListeningEv+0x202>
     8a6:	24 c0       	rjmp	.+72     	; 0x8f0 <_ZN4RF2413stopListeningEv+0x258>
     8a8:	c7 01       	movw	r24, r14
     8aa:	b6 01       	movw	r22, r12
     8ac:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fixunssfsi>
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <_ZN4RF2413stopListeningEv+0x21e>
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	cb 01       	movw	r24, r22
     8b8:	01 97       	sbiw	r24, 0x01	; 1
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <_ZN4RF2413stopListeningEv+0x220>
     8bc:	19 c0       	rjmp	.+50     	; 0x8f0 <_ZN4RF2413stopListeningEv+0x258>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	4f e7       	ldi	r20, 0x7F	; 127
     8c4:	53 e4       	ldi	r21, 0x43	; 67
     8c6:	c5 01       	movw	r24, r10
     8c8:	b4 01       	movw	r22, r8
     8ca:	0e 94 ef 07 	call	0xfde	; 0xfde <__gesf2>
     8ce:	18 16       	cp	r1, r24
     8d0:	44 f4       	brge	.+16     	; 0x8e2 <_ZN4RF2413stopListeningEv+0x24a>
     8d2:	c3 01       	movw	r24, r6
     8d4:	b2 01       	movw	r22, r4
     8d6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fixunssfsi>
     8da:	cb 01       	movw	r24, r22
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <_ZN4RF2413stopListeningEv+0x244>
     8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <_ZN4RF2413stopListeningEv+0x25c>
     8e2:	c5 01       	movw	r24, r10
     8e4:	b4 01       	movw	r22, r8
     8e6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fixunssfsi>
     8ea:	06 2f       	mov	r16, r22
     8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <_ZN4RF2413stopListeningEv+0x258>
     8ee:	01 e0       	ldi	r16, 0x01	; 1
     8f0:	0a 95       	dec	r16
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <_ZN4RF2413stopListeningEv+0x258>
     8f4:	ce 01       	movw	r24, r28
     8f6:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN4RF248flush_txEv>
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	ce 01       	movw	r24, r28
     8fe:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN4RF2413read_registerEh>
     902:	48 2f       	mov	r20, r24
     904:	4e 7f       	andi	r20, 0xFE	; 254
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	ce 01       	movw	r24, r28
     90a:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>
     90e:	62 e0       	ldi	r22, 0x02	; 2
     910:	ce 01       	movw	r24, r28
     912:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN4RF2413read_registerEh>
     916:	48 2f       	mov	r20, r24
     918:	41 60       	ori	r20, 0x01	; 1
     91a:	62 e0       	ldi	r22, 0x02	; 2
     91c:	ce 01       	movw	r24, r28
     91e:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
     92e:	df 90       	pop	r13
     930:	cf 90       	pop	r12
     932:	bf 90       	pop	r11
     934:	af 90       	pop	r10
     936:	9f 90       	pop	r9
     938:	8f 90       	pop	r8
     93a:	7f 90       	pop	r7
     93c:	6f 90       	pop	r6
     93e:	5f 90       	pop	r5
     940:	4f 90       	pop	r4
     942:	08 95       	ret

00000944 <_ZN4RF249powerDownEv>:
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN4RF242ceEb>
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	ce 01       	movw	r24, r28
     954:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN4RF2413read_registerEh>
     958:	48 2f       	mov	r20, r24
     95a:	4d 7f       	andi	r20, 0xFD	; 253
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	ce 01       	movw	r24, r28
     960:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <_ZN4RF247powerUpEv>:
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ec 01       	movw	r28, r24
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN4RF2413read_registerEh>
     976:	81 fd       	sbrc	r24, 1
     978:	0a c0       	rjmp	.+20     	; 0x98e <_ZN4RF247powerUpEv+0x24>
     97a:	48 2f       	mov	r20, r24
     97c:	42 60       	ori	r20, 0x02	; 2
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	ce 01       	movw	r24, r28
     982:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>
     986:	80 e1       	ldi	r24, 0x10	; 16
     988:	97 e2       	ldi	r25, 0x27	; 39
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <_ZN4RF247powerUpEv+0x20>
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <_ZN4RF2414startFastWriteEPKvhbb>:
     994:	0f 93       	push	r16
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	ec 01       	movw	r28, r24
     99c:	21 11       	cpse	r18, r1
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <_ZN4RF2414startFastWriteEPKvhbb+0x10>
     9a0:	20 ea       	ldi	r18, 0xA0	; 160
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <_ZN4RF2414startFastWriteEPKvhbb+0x12>
     9a4:	20 eb       	ldi	r18, 0xB0	; 176
     9a6:	ce 01       	movw	r24, r28
     9a8:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN4RF2413write_payloadEPKvhh>
     9ac:	00 23       	and	r16, r16
     9ae:	21 f0       	breq	.+8      	; 0x9b8 <_ZN4RF2414startFastWriteEPKvhbb+0x24>
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	ce 01       	movw	r24, r28
     9b4:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN4RF242ceEb>
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	0f 91       	pop	r16
     9be:	08 95       	ret

000009c0 <_ZN4RF245writeEPKvhb>:
     9c0:	0f 93       	push	r16
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	ec 01       	movw	r28, r24
     9c8:	01 e0       	ldi	r16, 0x01	; 1
     9ca:	0e 94 ca 04 	call	0x994	; 0x994 <_ZN4RF2414startFastWriteEPKvhbb>
     9ce:	ce 01       	movw	r24, r28
     9d0:	0e 94 2a 03 	call	0x654	; 0x654 <_ZN4RF2410get_statusEv>
     9d4:	80 73       	andi	r24, 0x30	; 48
     9d6:	d9 f3       	breq	.-10     	; 0x9ce <_ZN4RF245writeEPKvhb+0xe>
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	ce 01       	movw	r24, r28
     9dc:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN4RF242ceEb>
     9e0:	40 e7       	ldi	r20, 0x70	; 112
     9e2:	67 e0       	ldi	r22, 0x07	; 7
     9e4:	ce 01       	movw	r24, r28
     9e6:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>
     9ea:	84 ff       	sbrs	r24, 4
     9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <_ZN4RF245writeEPKvhb+0x38>
     9ee:	ce 01       	movw	r24, r28
     9f0:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN4RF248flush_txEv>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <_ZN4RF245writeEPKvhb+0x3a>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	0f 91       	pop	r16
     a00:	08 95       	ret

00000a02 <_ZN4RF245writeEPKvh>:
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN4RF245writeEPKvhb>
     a08:	08 95       	ret

00000a0a <_ZN4RF2415openWritingPipeEy>:
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	28 97       	sbiw	r28, 0x08	; 8
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	7c 01       	movw	r14, r24
     a28:	09 83       	std	Y+1, r16	; 0x01
     a2a:	1a 83       	std	Y+2, r17	; 0x02
     a2c:	2b 83       	std	Y+3, r18	; 0x03
     a2e:	3c 83       	std	Y+4, r19	; 0x04
     a30:	4d 83       	std	Y+5, r20	; 0x05
     a32:	5e 83       	std	Y+6, r21	; 0x06
     a34:	6f 83       	std	Y+7, r22	; 0x07
     a36:	78 87       	std	Y+8, r23	; 0x08
     a38:	fc 01       	movw	r30, r24
     a3a:	26 85       	ldd	r18, Z+14	; 0x0e
     a3c:	ae 01       	movw	r20, r28
     a3e:	4f 5f       	subi	r20, 0xFF	; 255
     a40:	5f 4f       	sbci	r21, 0xFF	; 255
     a42:	6a e0       	ldi	r22, 0x0A	; 10
     a44:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN4RF2414write_registerEhPKhh>
     a48:	f7 01       	movw	r30, r14
     a4a:	26 85       	ldd	r18, Z+14	; 0x0e
     a4c:	ae 01       	movw	r20, r28
     a4e:	4f 5f       	subi	r20, 0xFF	; 255
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	60 e1       	ldi	r22, 0x10	; 16
     a54:	c7 01       	movw	r24, r14
     a56:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN4RF2414write_registerEhPKhh>
     a5a:	f7 01       	movw	r30, r14
     a5c:	47 81       	ldd	r20, Z+7	; 0x07
     a5e:	61 e1       	ldi	r22, 0x11	; 17
     a60:	c7 01       	movw	r24, r14
     a62:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>
     a66:	28 96       	adiw	r28, 0x08	; 8
     a68:	0f b6       	in	r0, 0x3f	; 63
     a6a:	f8 94       	cli
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cd bf       	out	0x3d, r28	; 61
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	08 95       	ret

00000a80 <_ZN4RF2415toggle_featuresEv>:
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	ec 01       	movw	r28, r24
     a88:	10 e5       	ldi	r17, 0x50	; 80
     a8a:	1c bd       	out	0x2c, r17	; 44
     a8c:	1d bc       	out	0x2d, r1	; 45
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN4RF243csnEb>
     a94:	1e bd       	out	0x2e, r17	; 46
     a96:	00 00       	nop
     a98:	0d b4       	in	r0, 0x2d	; 45
     a9a:	07 fe       	sbrs	r0, 7
     a9c:	fd cf       	rjmp	.-6      	; 0xa98 <_ZN4RF2415toggle_featuresEv+0x18>
     a9e:	8e b5       	in	r24, 0x2e	; 46
     aa0:	83 e7       	ldi	r24, 0x73	; 115
     aa2:	8e bd       	out	0x2e, r24	; 46
     aa4:	00 00       	nop
     aa6:	0d b4       	in	r0, 0x2d	; 45
     aa8:	07 fe       	sbrs	r0, 7
     aaa:	fd cf       	rjmp	.-6      	; 0xaa6 <_ZN4RF2415toggle_featuresEv+0x26>
     aac:	8e b5       	in	r24, 0x2e	; 46
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	ce 01       	movw	r24, r28
     ab2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN4RF243csnEb>
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	08 95       	ret

00000abe <_ZN4RF2411setDataRateE15rf24_datarate_e>:

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	ec 01       	movw	r28, r24
     ac8:	06 2f       	mov	r16, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     aca:	66 e0       	ldi	r22, 0x06	; 6
     acc:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     ad0:	18 2f       	mov	r17, r24
     ad2:	17 7d       	andi	r17, 0xD7	; 215
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
  //#endif
  if( speed == RF24_250KBPS )
     ad4:	02 30       	cpi	r16, 0x02	; 2
     ad6:	51 f4       	brne	.+20     	; 0xaec <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2e>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
     ad8:	10 62       	ori	r17, 0x20	; 32
 /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=450;
  #else //16Mhz Arduino*/
	txDelay=155;
     ada:	8b e9       	ldi	r24, 0x9B	; 155
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	88 8b       	std	Y+16, r24	; 0x10
     ae4:	99 8b       	std	Y+17, r25	; 0x11
     ae6:	aa 8b       	std	Y+18, r26	; 0x12
     ae8:	bb 8b       	std	Y+19, r27	; 0x13
     aea:	14 c0       	rjmp	.+40     	; 0xb14 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     aec:	01 30       	cpi	r16, 0x01	; 1
     aee:	49 f0       	breq	.+18     	; 0xb02 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x44>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
/*  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
 */ //#else //16Mhz Arduino
    txDelay=85;
     af0:	85 e5       	ldi	r24, 0x55	; 85
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	a0 e0       	ldi	r26, 0x00	; 0
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	88 8b       	std	Y+16, r24	; 0x10
     afa:	99 8b       	std	Y+17, r25	; 0x11
     afc:	aa 8b       	std	Y+18, r26	; 0x12
     afe:	bb 8b       	std	Y+19, r27	; 0x13
     b00:	09 c0       	rjmp	.+18     	; 0xb14 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x56>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
     b02:	18 60       	ori	r17, 0x08	; 8
     /* #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txDelay=190;
      #else //16Mhz Arduino	*/  
	 txDelay=65;
     b04:	81 e4       	ldi	r24, 0x41	; 65
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	a0 e0       	ldi	r26, 0x00	; 0
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	88 8b       	std	Y+16, r24	; 0x10
     b0e:	99 8b       	std	Y+17, r25	; 0x11
     b10:	aa 8b       	std	Y+18, r26	; 0x12
     b12:	bb 8b       	std	Y+19, r27	; 0x13
	  //#endif
    }
  }
  write_register(RF_SETUP,setup);
     b14:	41 2f       	mov	r20, r17
     b16:	66 e0       	ldi	r22, 0x06	; 6
     b18:	ce 01       	movw	r24, r28
     b1a:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     b1e:	66 e0       	ldi	r22, 0x06	; 6
     b20:	ce 01       	movw	r24, r28
     b22:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN4RF2413read_registerEh>
  {
    result = true;
  }
  return result;
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	18 13       	cpse	r17, r24
     b2a:	90 e0       	ldi	r25, 0x00	; 0
}
     b2c:	89 2f       	mov	r24, r25
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	08 95       	ret

00000b38 <_ZN4RF245beginEv>:
}

/****************************************************************************/

bool RF24::begin(void)
{
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	ec 01       	movw	r28, r24
  uint8_t setup=0;

    if (ce_pin != csn_pin) Set_pin(ce_pin,OUT);  
     b40:	88 81       	ld	r24, Y
     b42:	99 81       	ldd	r25, Y+1	; 0x01
     b44:	2a 81       	ldd	r18, Y+2	; 0x02
     b46:	3b 81       	ldd	r19, Y+3	; 0x03
     b48:	82 17       	cp	r24, r18
     b4a:	93 07       	cpc	r25, r19
     b4c:	21 f0       	breq	.+8      	; 0xb56 <_ZN4RF245beginEv+0x1e>
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
        Set_pin(csn_pin,OUT);
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	9b 81       	ldd	r25, Y+3	; 0x03
     b5e:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
    _SPI.begin();
     b62:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN8SPIClass5beginEv>
    ce(low);
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	ce 01       	movw	r24, r28
     b6a:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN4RF242ceEb>
  	csn(high);
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	ce 01       	movw	r24, r28
     b72:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN4RF243csnEb>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     b76:	80 e1       	ldi	r24, 0x10	; 16
     b78:	97 e2       	ldi	r25, 0x27	; 39
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	f1 f7       	brne	.-4      	; 0xb7a <_ZN4RF245beginEv+0x42>
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: _delay_ms is based on P-variant whereby non-P *may* require different timing.
  _delay_ms( 5 ) ;

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;
     b7e:	4c e0       	ldi	r20, 0x0C	; 12
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	ce 01       	movw	r24, r28
     b84:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     b88:	4f e5       	ldi	r20, 0x5F	; 95
     b8a:	64 e0       	ldi	r22, 0x04	; 4
     b8c:	ce 01       	movw	r24, r28
     b8e:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
     b92:	62 e0       	ldi	r22, 0x02	; 2
     b94:	ce 01       	movw	r24, r28
     b96:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN4RF2411setDataRateE15rf24_datarate_e>
     b9a:	88 23       	and	r24, r24
     b9c:	11 f0       	breq	.+4      	; 0xba2 <_ZN4RF245beginEv+0x6a>
  {
    p_variant = true ;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	8e 83       	std	Y+6, r24	; 0x06
  }
  setup = read_register(RF_SETUP);
     ba2:	66 e0       	ldi	r22, 0x06	; 6
     ba4:	ce 01       	movw	r24, r28
     ba6:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN4RF2413read_registerEh>
     baa:	18 2f       	mov	r17, r24
 if( setup == 0b00001110 )     // register default for nRF24L01P
     bac:	8e 30       	cpi	r24, 0x0E	; 14
     bae:	11 f4       	brne	.+4      	; 0xbb4 <_ZN4RF245beginEv+0x7c>
  {
    p_variant = true ;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	8e 83       	std	Y+6, r24	; 0x06
  }
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	ce 01       	movw	r24, r28
     bb8:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
     bbc:	ce 01       	movw	r24, r28
     bbe:	0e 94 40 05 	call	0xa80	; 0xa80 <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	6d e1       	ldi	r22, 0x1D	; 29
     bc6:	ce 01       	movw	r24, r28
     bc8:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	6c e1       	ldi	r22, 0x1C	; 28
     bd0:	ce 01       	movw	r24, r28
     bd2:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>
  dynamic_payloads_enabled = false;
     bd6:	18 86       	std	Y+8, r1	; 0x08

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     bd8:	40 e7       	ldi	r20, 0x70	; 112
     bda:	67 e0       	ldi	r22, 0x07	; 7
     bdc:	ce 01       	movw	r24, r28
     bde:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
     be2:	6c e4       	ldi	r22, 0x4C	; 76
     be4:	ce 01       	movw	r24, r28
     be6:	0e 94 43 03 	call	0x686	; 0x686 <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
     bea:	ce 01       	movw	r24, r28
     bec:	0e 94 22 03 	call	0x644	; 0x644 <_ZN4RF248flush_rxEv>
  flush_tx();
     bf0:	ce 01       	movw	r24, r28
     bf2:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
     bf6:	ce 01       	movw	r24, r28
     bf8:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	ce 01       	movw	r24, r28
     c00:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN4RF2413read_registerEh>
     c04:	48 2f       	mov	r20, r24
     c06:	4e 7f       	andi	r20, 0xFE	; 254
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	ce 01       	movw	r24, r28
     c0c:	0e 94 93 02 	call	0x526	; 0x526 <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
     c10:	11 50       	subi	r17, 0x01	; 1
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	1e 3f       	cpi	r17, 0xFE	; 254
     c16:	08 f0       	brcs	.+2      	; 0xc1a <_ZN4RF245beginEv+0xe2>
     c18:	80 e0       	ldi	r24, 0x00	; 0
}
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	08 95       	ret

00000c22 <_ZN8SPIClass5beginEv>:
void SPIClass::begin()
{
 //  cli();//noInterrupts(); // Protect from a scheduler and prevent transactionBegin
 
    
    Set_pin(SS, OUT);
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	8a e0       	ldi	r24, 0x0A	; 10
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUT.
    SPCR |= _BV(MSTR);
     c2e:	8c b5       	in	r24, 0x2c	; 44
     c30:	80 61       	ori	r24, 0x10	; 16
     c32:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     c34:	8c b5       	in	r24, 0x2c	; 44
     c36:	80 64       	ori	r24, 0x40	; 64
     c38:	8c bd       	out	0x2c, r24	; 44
    // Set direction register for SCK and MOSI pin.
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    Set_pin(SCK, OUT);
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	8d e0       	ldi	r24, 0x0D	; 13
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
    Set_pin(MOSI, OUT);
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	8b e0       	ldi	r24, 0x0B	; 11
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 72 00 	call	0xe4	; 0xe4 <Set_pin>
     c52:	08 95       	ret

00000c54 <__subsf3>:
     c54:	50 58       	subi	r21, 0x80	; 128

00000c56 <__addsf3>:
     c56:	bb 27       	eor	r27, r27
     c58:	aa 27       	eor	r26, r26
     c5a:	0e 94 42 06 	call	0xc84	; 0xc84 <__addsf3x>
     c5e:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_round>
     c62:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fp_pscA>
     c66:	38 f0       	brcs	.+14     	; 0xc76 <__addsf3+0x20>
     c68:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_pscB>
     c6c:	20 f0       	brcs	.+8      	; 0xc76 <__addsf3+0x20>
     c6e:	39 f4       	brne	.+14     	; 0xc7e <__addsf3+0x28>
     c70:	9f 3f       	cpi	r25, 0xFF	; 255
     c72:	19 f4       	brne	.+6      	; 0xc7a <__addsf3+0x24>
     c74:	26 f4       	brtc	.+8      	; 0xc7e <__addsf3+0x28>
     c76:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__fp_nan>
     c7a:	0e f4       	brtc	.+2      	; 0xc7e <__addsf3+0x28>
     c7c:	e0 95       	com	r30
     c7e:	e7 fb       	bst	r30, 7
     c80:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__fp_inf>

00000c84 <__addsf3x>:
     c84:	e9 2f       	mov	r30, r25
     c86:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_split3>
     c8a:	58 f3       	brcs	.-42     	; 0xc62 <__addsf3+0xc>
     c8c:	ba 17       	cp	r27, r26
     c8e:	62 07       	cpc	r22, r18
     c90:	73 07       	cpc	r23, r19
     c92:	84 07       	cpc	r24, r20
     c94:	95 07       	cpc	r25, r21
     c96:	20 f0       	brcs	.+8      	; 0xca0 <__addsf3x+0x1c>
     c98:	79 f4       	brne	.+30     	; 0xcb8 <__addsf3x+0x34>
     c9a:	a6 f5       	brtc	.+104    	; 0xd04 <__addsf3x+0x80>
     c9c:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_zero>
     ca0:	0e f4       	brtc	.+2      	; 0xca4 <__addsf3x+0x20>
     ca2:	e0 95       	com	r30
     ca4:	0b 2e       	mov	r0, r27
     ca6:	ba 2f       	mov	r27, r26
     ca8:	a0 2d       	mov	r26, r0
     caa:	0b 01       	movw	r0, r22
     cac:	b9 01       	movw	r22, r18
     cae:	90 01       	movw	r18, r0
     cb0:	0c 01       	movw	r0, r24
     cb2:	ca 01       	movw	r24, r20
     cb4:	a0 01       	movw	r20, r0
     cb6:	11 24       	eor	r1, r1
     cb8:	ff 27       	eor	r31, r31
     cba:	59 1b       	sub	r21, r25
     cbc:	99 f0       	breq	.+38     	; 0xce4 <__addsf3x+0x60>
     cbe:	59 3f       	cpi	r21, 0xF9	; 249
     cc0:	50 f4       	brcc	.+20     	; 0xcd6 <__addsf3x+0x52>
     cc2:	50 3e       	cpi	r21, 0xE0	; 224
     cc4:	68 f1       	brcs	.+90     	; 0xd20 <__addsf3x+0x9c>
     cc6:	1a 16       	cp	r1, r26
     cc8:	f0 40       	sbci	r31, 0x00	; 0
     cca:	a2 2f       	mov	r26, r18
     ccc:	23 2f       	mov	r18, r19
     cce:	34 2f       	mov	r19, r20
     cd0:	44 27       	eor	r20, r20
     cd2:	58 5f       	subi	r21, 0xF8	; 248
     cd4:	f3 cf       	rjmp	.-26     	; 0xcbc <__addsf3x+0x38>
     cd6:	46 95       	lsr	r20
     cd8:	37 95       	ror	r19
     cda:	27 95       	ror	r18
     cdc:	a7 95       	ror	r26
     cde:	f0 40       	sbci	r31, 0x00	; 0
     ce0:	53 95       	inc	r21
     ce2:	c9 f7       	brne	.-14     	; 0xcd6 <__addsf3x+0x52>
     ce4:	7e f4       	brtc	.+30     	; 0xd04 <__addsf3x+0x80>
     ce6:	1f 16       	cp	r1, r31
     ce8:	ba 0b       	sbc	r27, r26
     cea:	62 0b       	sbc	r22, r18
     cec:	73 0b       	sbc	r23, r19
     cee:	84 0b       	sbc	r24, r20
     cf0:	ba f0       	brmi	.+46     	; 0xd20 <__addsf3x+0x9c>
     cf2:	91 50       	subi	r25, 0x01	; 1
     cf4:	a1 f0       	breq	.+40     	; 0xd1e <__addsf3x+0x9a>
     cf6:	ff 0f       	add	r31, r31
     cf8:	bb 1f       	adc	r27, r27
     cfa:	66 1f       	adc	r22, r22
     cfc:	77 1f       	adc	r23, r23
     cfe:	88 1f       	adc	r24, r24
     d00:	c2 f7       	brpl	.-16     	; 0xcf2 <__addsf3x+0x6e>
     d02:	0e c0       	rjmp	.+28     	; 0xd20 <__addsf3x+0x9c>
     d04:	ba 0f       	add	r27, r26
     d06:	62 1f       	adc	r22, r18
     d08:	73 1f       	adc	r23, r19
     d0a:	84 1f       	adc	r24, r20
     d0c:	48 f4       	brcc	.+18     	; 0xd20 <__addsf3x+0x9c>
     d0e:	87 95       	ror	r24
     d10:	77 95       	ror	r23
     d12:	67 95       	ror	r22
     d14:	b7 95       	ror	r27
     d16:	f7 95       	ror	r31
     d18:	9e 3f       	cpi	r25, 0xFE	; 254
     d1a:	08 f0       	brcs	.+2      	; 0xd1e <__addsf3x+0x9a>
     d1c:	b0 cf       	rjmp	.-160    	; 0xc7e <__addsf3+0x28>
     d1e:	93 95       	inc	r25
     d20:	88 0f       	add	r24, r24
     d22:	08 f0       	brcs	.+2      	; 0xd26 <__addsf3x+0xa2>
     d24:	99 27       	eor	r25, r25
     d26:	ee 0f       	add	r30, r30
     d28:	97 95       	ror	r25
     d2a:	87 95       	ror	r24
     d2c:	08 95       	ret

00000d2e <__cmpsf2>:
     d2e:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_cmp>
     d32:	08 f4       	brcc	.+2      	; 0xd36 <__cmpsf2+0x8>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	08 95       	ret

00000d38 <__divsf3>:
     d38:	0e 94 b0 06 	call	0xd60	; 0xd60 <__divsf3x>
     d3c:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_round>
     d40:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_pscB>
     d44:	58 f0       	brcs	.+22     	; 0xd5c <__divsf3+0x24>
     d46:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fp_pscA>
     d4a:	40 f0       	brcs	.+16     	; 0xd5c <__divsf3+0x24>
     d4c:	29 f4       	brne	.+10     	; 0xd58 <__divsf3+0x20>
     d4e:	5f 3f       	cpi	r21, 0xFF	; 255
     d50:	29 f0       	breq	.+10     	; 0xd5c <__divsf3+0x24>
     d52:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__fp_inf>
     d56:	51 11       	cpse	r21, r1
     d58:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_szero>
     d5c:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__fp_nan>

00000d60 <__divsf3x>:
     d60:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_split3>
     d64:	68 f3       	brcs	.-38     	; 0xd40 <__divsf3+0x8>

00000d66 <__divsf3_pse>:
     d66:	99 23       	and	r25, r25
     d68:	b1 f3       	breq	.-20     	; 0xd56 <__divsf3+0x1e>
     d6a:	55 23       	and	r21, r21
     d6c:	91 f3       	breq	.-28     	; 0xd52 <__divsf3+0x1a>
     d6e:	95 1b       	sub	r25, r21
     d70:	55 0b       	sbc	r21, r21
     d72:	bb 27       	eor	r27, r27
     d74:	aa 27       	eor	r26, r26
     d76:	62 17       	cp	r22, r18
     d78:	73 07       	cpc	r23, r19
     d7a:	84 07       	cpc	r24, r20
     d7c:	38 f0       	brcs	.+14     	; 0xd8c <__divsf3_pse+0x26>
     d7e:	9f 5f       	subi	r25, 0xFF	; 255
     d80:	5f 4f       	sbci	r21, 0xFF	; 255
     d82:	22 0f       	add	r18, r18
     d84:	33 1f       	adc	r19, r19
     d86:	44 1f       	adc	r20, r20
     d88:	aa 1f       	adc	r26, r26
     d8a:	a9 f3       	breq	.-22     	; 0xd76 <__divsf3_pse+0x10>
     d8c:	35 d0       	rcall	.+106    	; 0xdf8 <__divsf3_pse+0x92>
     d8e:	0e 2e       	mov	r0, r30
     d90:	3a f0       	brmi	.+14     	; 0xda0 <__divsf3_pse+0x3a>
     d92:	e0 e8       	ldi	r30, 0x80	; 128
     d94:	32 d0       	rcall	.+100    	; 0xdfa <__divsf3_pse+0x94>
     d96:	91 50       	subi	r25, 0x01	; 1
     d98:	50 40       	sbci	r21, 0x00	; 0
     d9a:	e6 95       	lsr	r30
     d9c:	00 1c       	adc	r0, r0
     d9e:	ca f7       	brpl	.-14     	; 0xd92 <__divsf3_pse+0x2c>
     da0:	2b d0       	rcall	.+86     	; 0xdf8 <__divsf3_pse+0x92>
     da2:	fe 2f       	mov	r31, r30
     da4:	29 d0       	rcall	.+82     	; 0xdf8 <__divsf3_pse+0x92>
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	88 1f       	adc	r24, r24
     dac:	bb 1f       	adc	r27, r27
     dae:	26 17       	cp	r18, r22
     db0:	37 07       	cpc	r19, r23
     db2:	48 07       	cpc	r20, r24
     db4:	ab 07       	cpc	r26, r27
     db6:	b0 e8       	ldi	r27, 0x80	; 128
     db8:	09 f0       	breq	.+2      	; 0xdbc <__divsf3_pse+0x56>
     dba:	bb 0b       	sbc	r27, r27
     dbc:	80 2d       	mov	r24, r0
     dbe:	bf 01       	movw	r22, r30
     dc0:	ff 27       	eor	r31, r31
     dc2:	93 58       	subi	r25, 0x83	; 131
     dc4:	5f 4f       	sbci	r21, 0xFF	; 255
     dc6:	3a f0       	brmi	.+14     	; 0xdd6 <__divsf3_pse+0x70>
     dc8:	9e 3f       	cpi	r25, 0xFE	; 254
     dca:	51 05       	cpc	r21, r1
     dcc:	78 f0       	brcs	.+30     	; 0xdec <__divsf3_pse+0x86>
     dce:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__fp_inf>
     dd2:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_szero>
     dd6:	5f 3f       	cpi	r21, 0xFF	; 255
     dd8:	e4 f3       	brlt	.-8      	; 0xdd2 <__divsf3_pse+0x6c>
     dda:	98 3e       	cpi	r25, 0xE8	; 232
     ddc:	d4 f3       	brlt	.-12     	; 0xdd2 <__divsf3_pse+0x6c>
     dde:	86 95       	lsr	r24
     de0:	77 95       	ror	r23
     de2:	67 95       	ror	r22
     de4:	b7 95       	ror	r27
     de6:	f7 95       	ror	r31
     de8:	9f 5f       	subi	r25, 0xFF	; 255
     dea:	c9 f7       	brne	.-14     	; 0xdde <__divsf3_pse+0x78>
     dec:	88 0f       	add	r24, r24
     dee:	91 1d       	adc	r25, r1
     df0:	96 95       	lsr	r25
     df2:	87 95       	ror	r24
     df4:	97 f9       	bld	r25, 7
     df6:	08 95       	ret
     df8:	e1 e0       	ldi	r30, 0x01	; 1
     dfa:	66 0f       	add	r22, r22
     dfc:	77 1f       	adc	r23, r23
     dfe:	88 1f       	adc	r24, r24
     e00:	bb 1f       	adc	r27, r27
     e02:	62 17       	cp	r22, r18
     e04:	73 07       	cpc	r23, r19
     e06:	84 07       	cpc	r24, r20
     e08:	ba 07       	cpc	r27, r26
     e0a:	20 f0       	brcs	.+8      	; 0xe14 <__divsf3_pse+0xae>
     e0c:	62 1b       	sub	r22, r18
     e0e:	73 0b       	sbc	r23, r19
     e10:	84 0b       	sbc	r24, r20
     e12:	ba 0b       	sbc	r27, r26
     e14:	ee 1f       	adc	r30, r30
     e16:	88 f7       	brcc	.-30     	; 0xdfa <__divsf3_pse+0x94>
     e18:	e0 95       	com	r30
     e1a:	08 95       	ret

00000e1c <__fixunssfsi>:
     e1c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fp_splitA>
     e20:	88 f0       	brcs	.+34     	; 0xe44 <__fixunssfsi+0x28>
     e22:	9f 57       	subi	r25, 0x7F	; 127
     e24:	98 f0       	brcs	.+38     	; 0xe4c <__fixunssfsi+0x30>
     e26:	b9 2f       	mov	r27, r25
     e28:	99 27       	eor	r25, r25
     e2a:	b7 51       	subi	r27, 0x17	; 23
     e2c:	b0 f0       	brcs	.+44     	; 0xe5a <__fixunssfsi+0x3e>
     e2e:	e1 f0       	breq	.+56     	; 0xe68 <__fixunssfsi+0x4c>
     e30:	66 0f       	add	r22, r22
     e32:	77 1f       	adc	r23, r23
     e34:	88 1f       	adc	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	1a f0       	brmi	.+6      	; 0xe40 <__fixunssfsi+0x24>
     e3a:	ba 95       	dec	r27
     e3c:	c9 f7       	brne	.-14     	; 0xe30 <__fixunssfsi+0x14>
     e3e:	14 c0       	rjmp	.+40     	; 0xe68 <__fixunssfsi+0x4c>
     e40:	b1 30       	cpi	r27, 0x01	; 1
     e42:	91 f0       	breq	.+36     	; 0xe68 <__fixunssfsi+0x4c>
     e44:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_zero>
     e48:	b1 e0       	ldi	r27, 0x01	; 1
     e4a:	08 95       	ret
     e4c:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_zero>
     e50:	67 2f       	mov	r22, r23
     e52:	78 2f       	mov	r23, r24
     e54:	88 27       	eor	r24, r24
     e56:	b8 5f       	subi	r27, 0xF8	; 248
     e58:	39 f0       	breq	.+14     	; 0xe68 <__fixunssfsi+0x4c>
     e5a:	b9 3f       	cpi	r27, 0xF9	; 249
     e5c:	cc f3       	brlt	.-14     	; 0xe50 <__fixunssfsi+0x34>
     e5e:	86 95       	lsr	r24
     e60:	77 95       	ror	r23
     e62:	67 95       	ror	r22
     e64:	b3 95       	inc	r27
     e66:	d9 f7       	brne	.-10     	; 0xe5e <__fixunssfsi+0x42>
     e68:	3e f4       	brtc	.+14     	; 0xe78 <__fixunssfsi+0x5c>
     e6a:	90 95       	com	r25
     e6c:	80 95       	com	r24
     e6e:	70 95       	com	r23
     e70:	61 95       	neg	r22
     e72:	7f 4f       	sbci	r23, 0xFF	; 255
     e74:	8f 4f       	sbci	r24, 0xFF	; 255
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	08 95       	ret

00000e7a <__floatunsisf>:
     e7a:	e8 94       	clt
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <__floatsisf+0x12>

00000e7e <__floatsisf>:
     e7e:	97 fb       	bst	r25, 7
     e80:	3e f4       	brtc	.+14     	; 0xe90 <__floatsisf+0x12>
     e82:	90 95       	com	r25
     e84:	80 95       	com	r24
     e86:	70 95       	com	r23
     e88:	61 95       	neg	r22
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	8f 4f       	sbci	r24, 0xFF	; 255
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	99 23       	and	r25, r25
     e92:	a9 f0       	breq	.+42     	; 0xebe <__floatsisf+0x40>
     e94:	f9 2f       	mov	r31, r25
     e96:	96 e9       	ldi	r25, 0x96	; 150
     e98:	bb 27       	eor	r27, r27
     e9a:	93 95       	inc	r25
     e9c:	f6 95       	lsr	r31
     e9e:	87 95       	ror	r24
     ea0:	77 95       	ror	r23
     ea2:	67 95       	ror	r22
     ea4:	b7 95       	ror	r27
     ea6:	f1 11       	cpse	r31, r1
     ea8:	f8 cf       	rjmp	.-16     	; 0xe9a <__floatsisf+0x1c>
     eaa:	fa f4       	brpl	.+62     	; 0xeea <__floatsisf+0x6c>
     eac:	bb 0f       	add	r27, r27
     eae:	11 f4       	brne	.+4      	; 0xeb4 <__floatsisf+0x36>
     eb0:	60 ff       	sbrs	r22, 0
     eb2:	1b c0       	rjmp	.+54     	; 0xeea <__floatsisf+0x6c>
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	8f 4f       	sbci	r24, 0xFF	; 255
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	16 c0       	rjmp	.+44     	; 0xeea <__floatsisf+0x6c>
     ebe:	88 23       	and	r24, r24
     ec0:	11 f0       	breq	.+4      	; 0xec6 <__floatsisf+0x48>
     ec2:	96 e9       	ldi	r25, 0x96	; 150
     ec4:	11 c0       	rjmp	.+34     	; 0xee8 <__floatsisf+0x6a>
     ec6:	77 23       	and	r23, r23
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__floatsisf+0x54>
     eca:	9e e8       	ldi	r25, 0x8E	; 142
     ecc:	87 2f       	mov	r24, r23
     ece:	76 2f       	mov	r23, r22
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <__floatsisf+0x5e>
     ed2:	66 23       	and	r22, r22
     ed4:	71 f0       	breq	.+28     	; 0xef2 <__floatsisf+0x74>
     ed6:	96 e8       	ldi	r25, 0x86	; 134
     ed8:	86 2f       	mov	r24, r22
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	2a f0       	brmi	.+10     	; 0xeea <__floatsisf+0x6c>
     ee0:	9a 95       	dec	r25
     ee2:	66 0f       	add	r22, r22
     ee4:	77 1f       	adc	r23, r23
     ee6:	88 1f       	adc	r24, r24
     ee8:	da f7       	brpl	.-10     	; 0xee0 <__floatsisf+0x62>
     eea:	88 0f       	add	r24, r24
     eec:	96 95       	lsr	r25
     eee:	87 95       	ror	r24
     ef0:	97 f9       	bld	r25, 7
     ef2:	08 95       	ret

00000ef4 <__fp_cmp>:
     ef4:	99 0f       	add	r25, r25
     ef6:	00 08       	sbc	r0, r0
     ef8:	55 0f       	add	r21, r21
     efa:	aa 0b       	sbc	r26, r26
     efc:	e0 e8       	ldi	r30, 0x80	; 128
     efe:	fe ef       	ldi	r31, 0xFE	; 254
     f00:	16 16       	cp	r1, r22
     f02:	17 06       	cpc	r1, r23
     f04:	e8 07       	cpc	r30, r24
     f06:	f9 07       	cpc	r31, r25
     f08:	c0 f0       	brcs	.+48     	; 0xf3a <__fp_cmp+0x46>
     f0a:	12 16       	cp	r1, r18
     f0c:	13 06       	cpc	r1, r19
     f0e:	e4 07       	cpc	r30, r20
     f10:	f5 07       	cpc	r31, r21
     f12:	98 f0       	brcs	.+38     	; 0xf3a <__fp_cmp+0x46>
     f14:	62 1b       	sub	r22, r18
     f16:	73 0b       	sbc	r23, r19
     f18:	84 0b       	sbc	r24, r20
     f1a:	95 0b       	sbc	r25, r21
     f1c:	39 f4       	brne	.+14     	; 0xf2c <__fp_cmp+0x38>
     f1e:	0a 26       	eor	r0, r26
     f20:	61 f0       	breq	.+24     	; 0xf3a <__fp_cmp+0x46>
     f22:	23 2b       	or	r18, r19
     f24:	24 2b       	or	r18, r20
     f26:	25 2b       	or	r18, r21
     f28:	21 f4       	brne	.+8      	; 0xf32 <__fp_cmp+0x3e>
     f2a:	08 95       	ret
     f2c:	0a 26       	eor	r0, r26
     f2e:	09 f4       	brne	.+2      	; 0xf32 <__fp_cmp+0x3e>
     f30:	a1 40       	sbci	r26, 0x01	; 1
     f32:	a6 95       	lsr	r26
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	81 1d       	adc	r24, r1
     f38:	81 1d       	adc	r24, r1
     f3a:	08 95       	ret

00000f3c <__fp_inf>:
     f3c:	97 f9       	bld	r25, 7
     f3e:	9f 67       	ori	r25, 0x7F	; 127
     f40:	80 e8       	ldi	r24, 0x80	; 128
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	08 95       	ret

00000f48 <__fp_nan>:
     f48:	9f ef       	ldi	r25, 0xFF	; 255
     f4a:	80 ec       	ldi	r24, 0xC0	; 192
     f4c:	08 95       	ret

00000f4e <__fp_pscA>:
     f4e:	00 24       	eor	r0, r0
     f50:	0a 94       	dec	r0
     f52:	16 16       	cp	r1, r22
     f54:	17 06       	cpc	r1, r23
     f56:	18 06       	cpc	r1, r24
     f58:	09 06       	cpc	r0, r25
     f5a:	08 95       	ret

00000f5c <__fp_pscB>:
     f5c:	00 24       	eor	r0, r0
     f5e:	0a 94       	dec	r0
     f60:	12 16       	cp	r1, r18
     f62:	13 06       	cpc	r1, r19
     f64:	14 06       	cpc	r1, r20
     f66:	05 06       	cpc	r0, r21
     f68:	08 95       	ret

00000f6a <__fp_round>:
     f6a:	09 2e       	mov	r0, r25
     f6c:	03 94       	inc	r0
     f6e:	00 0c       	add	r0, r0
     f70:	11 f4       	brne	.+4      	; 0xf76 <__fp_round+0xc>
     f72:	88 23       	and	r24, r24
     f74:	52 f0       	brmi	.+20     	; 0xf8a <__fp_round+0x20>
     f76:	bb 0f       	add	r27, r27
     f78:	40 f4       	brcc	.+16     	; 0xf8a <__fp_round+0x20>
     f7a:	bf 2b       	or	r27, r31
     f7c:	11 f4       	brne	.+4      	; 0xf82 <__fp_round+0x18>
     f7e:	60 ff       	sbrs	r22, 0
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <__fp_round+0x20>
     f82:	6f 5f       	subi	r22, 0xFF	; 255
     f84:	7f 4f       	sbci	r23, 0xFF	; 255
     f86:	8f 4f       	sbci	r24, 0xFF	; 255
     f88:	9f 4f       	sbci	r25, 0xFF	; 255
     f8a:	08 95       	ret

00000f8c <__fp_split3>:
     f8c:	57 fd       	sbrc	r21, 7
     f8e:	90 58       	subi	r25, 0x80	; 128
     f90:	44 0f       	add	r20, r20
     f92:	55 1f       	adc	r21, r21
     f94:	59 f0       	breq	.+22     	; 0xfac <__fp_splitA+0x10>
     f96:	5f 3f       	cpi	r21, 0xFF	; 255
     f98:	71 f0       	breq	.+28     	; 0xfb6 <__fp_splitA+0x1a>
     f9a:	47 95       	ror	r20

00000f9c <__fp_splitA>:
     f9c:	88 0f       	add	r24, r24
     f9e:	97 fb       	bst	r25, 7
     fa0:	99 1f       	adc	r25, r25
     fa2:	61 f0       	breq	.+24     	; 0xfbc <__fp_splitA+0x20>
     fa4:	9f 3f       	cpi	r25, 0xFF	; 255
     fa6:	79 f0       	breq	.+30     	; 0xfc6 <__fp_splitA+0x2a>
     fa8:	87 95       	ror	r24
     faa:	08 95       	ret
     fac:	12 16       	cp	r1, r18
     fae:	13 06       	cpc	r1, r19
     fb0:	14 06       	cpc	r1, r20
     fb2:	55 1f       	adc	r21, r21
     fb4:	f2 cf       	rjmp	.-28     	; 0xf9a <__fp_split3+0xe>
     fb6:	46 95       	lsr	r20
     fb8:	f1 df       	rcall	.-30     	; 0xf9c <__fp_splitA>
     fba:	08 c0       	rjmp	.+16     	; 0xfcc <__fp_splitA+0x30>
     fbc:	16 16       	cp	r1, r22
     fbe:	17 06       	cpc	r1, r23
     fc0:	18 06       	cpc	r1, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	f1 cf       	rjmp	.-30     	; 0xfa8 <__fp_splitA+0xc>
     fc6:	86 95       	lsr	r24
     fc8:	71 05       	cpc	r23, r1
     fca:	61 05       	cpc	r22, r1
     fcc:	08 94       	sec
     fce:	08 95       	ret

00000fd0 <__fp_zero>:
     fd0:	e8 94       	clt

00000fd2 <__fp_szero>:
     fd2:	bb 27       	eor	r27, r27
     fd4:	66 27       	eor	r22, r22
     fd6:	77 27       	eor	r23, r23
     fd8:	cb 01       	movw	r24, r22
     fda:	97 f9       	bld	r25, 7
     fdc:	08 95       	ret

00000fde <__gesf2>:
     fde:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_cmp>
     fe2:	08 f4       	brcc	.+2      	; 0xfe6 <__gesf2+0x8>
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	08 95       	ret

00000fe8 <__mulsf3>:
     fe8:	0e 94 07 08 	call	0x100e	; 0x100e <__mulsf3x>
     fec:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_round>
     ff0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <__fp_pscA>
     ff4:	38 f0       	brcs	.+14     	; 0x1004 <__mulsf3+0x1c>
     ff6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fp_pscB>
     ffa:	20 f0       	brcs	.+8      	; 0x1004 <__mulsf3+0x1c>
     ffc:	95 23       	and	r25, r21
     ffe:	11 f0       	breq	.+4      	; 0x1004 <__mulsf3+0x1c>
    1000:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__fp_inf>
    1004:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__fp_nan>
    1008:	11 24       	eor	r1, r1
    100a:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_szero>

0000100e <__mulsf3x>:
    100e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fp_split3>
    1012:	70 f3       	brcs	.-36     	; 0xff0 <__mulsf3+0x8>

00001014 <__mulsf3_pse>:
    1014:	95 9f       	mul	r25, r21
    1016:	c1 f3       	breq	.-16     	; 0x1008 <__mulsf3+0x20>
    1018:	95 0f       	add	r25, r21
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	55 1f       	adc	r21, r21
    101e:	62 9f       	mul	r22, r18
    1020:	f0 01       	movw	r30, r0
    1022:	72 9f       	mul	r23, r18
    1024:	bb 27       	eor	r27, r27
    1026:	f0 0d       	add	r31, r0
    1028:	b1 1d       	adc	r27, r1
    102a:	63 9f       	mul	r22, r19
    102c:	aa 27       	eor	r26, r26
    102e:	f0 0d       	add	r31, r0
    1030:	b1 1d       	adc	r27, r1
    1032:	aa 1f       	adc	r26, r26
    1034:	64 9f       	mul	r22, r20
    1036:	66 27       	eor	r22, r22
    1038:	b0 0d       	add	r27, r0
    103a:	a1 1d       	adc	r26, r1
    103c:	66 1f       	adc	r22, r22
    103e:	82 9f       	mul	r24, r18
    1040:	22 27       	eor	r18, r18
    1042:	b0 0d       	add	r27, r0
    1044:	a1 1d       	adc	r26, r1
    1046:	62 1f       	adc	r22, r18
    1048:	73 9f       	mul	r23, r19
    104a:	b0 0d       	add	r27, r0
    104c:	a1 1d       	adc	r26, r1
    104e:	62 1f       	adc	r22, r18
    1050:	83 9f       	mul	r24, r19
    1052:	a0 0d       	add	r26, r0
    1054:	61 1d       	adc	r22, r1
    1056:	22 1f       	adc	r18, r18
    1058:	74 9f       	mul	r23, r20
    105a:	33 27       	eor	r19, r19
    105c:	a0 0d       	add	r26, r0
    105e:	61 1d       	adc	r22, r1
    1060:	23 1f       	adc	r18, r19
    1062:	84 9f       	mul	r24, r20
    1064:	60 0d       	add	r22, r0
    1066:	21 1d       	adc	r18, r1
    1068:	82 2f       	mov	r24, r18
    106a:	76 2f       	mov	r23, r22
    106c:	6a 2f       	mov	r22, r26
    106e:	11 24       	eor	r1, r1
    1070:	9f 57       	subi	r25, 0x7F	; 127
    1072:	50 40       	sbci	r21, 0x00	; 0
    1074:	9a f0       	brmi	.+38     	; 0x109c <__mulsf3_pse+0x88>
    1076:	f1 f0       	breq	.+60     	; 0x10b4 <__mulsf3_pse+0xa0>
    1078:	88 23       	and	r24, r24
    107a:	4a f0       	brmi	.+18     	; 0x108e <__mulsf3_pse+0x7a>
    107c:	ee 0f       	add	r30, r30
    107e:	ff 1f       	adc	r31, r31
    1080:	bb 1f       	adc	r27, r27
    1082:	66 1f       	adc	r22, r22
    1084:	77 1f       	adc	r23, r23
    1086:	88 1f       	adc	r24, r24
    1088:	91 50       	subi	r25, 0x01	; 1
    108a:	50 40       	sbci	r21, 0x00	; 0
    108c:	a9 f7       	brne	.-22     	; 0x1078 <__mulsf3_pse+0x64>
    108e:	9e 3f       	cpi	r25, 0xFE	; 254
    1090:	51 05       	cpc	r21, r1
    1092:	80 f0       	brcs	.+32     	; 0x10b4 <__mulsf3_pse+0xa0>
    1094:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__fp_inf>
    1098:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__fp_szero>
    109c:	5f 3f       	cpi	r21, 0xFF	; 255
    109e:	e4 f3       	brlt	.-8      	; 0x1098 <__mulsf3_pse+0x84>
    10a0:	98 3e       	cpi	r25, 0xE8	; 232
    10a2:	d4 f3       	brlt	.-12     	; 0x1098 <__mulsf3_pse+0x84>
    10a4:	86 95       	lsr	r24
    10a6:	77 95       	ror	r23
    10a8:	67 95       	ror	r22
    10aa:	b7 95       	ror	r27
    10ac:	f7 95       	ror	r31
    10ae:	e7 95       	ror	r30
    10b0:	9f 5f       	subi	r25, 0xFF	; 255
    10b2:	c1 f7       	brne	.-16     	; 0x10a4 <__mulsf3_pse+0x90>
    10b4:	fe 2b       	or	r31, r30
    10b6:	88 0f       	add	r24, r24
    10b8:	91 1d       	adc	r25, r1
    10ba:	96 95       	lsr	r25
    10bc:	87 95       	ror	r24
    10be:	97 f9       	bld	r25, 7
    10c0:	08 95       	ret

000010c2 <__tablejump2__>:
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	05 90       	lpm	r0, Z+
    10c8:	f4 91       	lpm	r31, Z
    10ca:	e0 2d       	mov	r30, r0
    10cc:	09 94       	ijmp

000010ce <_exit>:
    10ce:	f8 94       	cli

000010d0 <__stop_program>:
    10d0:	ff cf       	rjmp	.-2      	; 0x10d0 <__stop_program>
